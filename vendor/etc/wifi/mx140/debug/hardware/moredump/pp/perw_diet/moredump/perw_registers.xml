<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for perw subsystem moredump
  Chip hash: 5266


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="perw">
  <block name="phy" comment="Phy Capture/playback/BFEE/BFER/DMA registers">
    <register addr="a3100000" rw_flags="R" width="4" name="PHY_ID_0" comment='PHY ID 0, ASCII "PHY-"'/>
    <register addr="a3100004" rw_flags="R" width="4" name="PHY_ID_1" comment="PHY ID 1, ASCII BANDWIDTH,TX_SS,RX_SS,TC"/>
    <register addr="a3100008" rw_flags="RW" width="4" name="PHY_CONFIG[0]" comment="PHY configuration (one for each of the two paths in RSDB builds)"/>
    <register addr="a3100010" rw_flags="RW" width="4" name="PHY_RESET" comment="Async reset for phy blocks"/>
    <register addr="a3100014" rw_flags="RW" width="4" name="PHY_RAM_POWER" comment="RAM power controls for various sections of the PHY"/>
    <register addr="a3100018" rw_flags="RW" width="4" name="PHY_RAM_POWER_SEQ" comment="RAM power controls for sequencing ON-&amp;gt;OFF OFF-&amp;gt;ON ON-&amp;gt;RET and RET-&amp;gt;ON.       Shared between all power sequencers these fields set the RAM power up/down sequences.  This varies with SoC technology node. For 8nm, in each three bit field, bit 2 is unused, bit 1 is PDE and bit 0 is RETN, normally 0b011 for power off, 0b001 for power on. For 5nm and 4nm, in each three bit field, bit 2 is unused, bit 1 is PDE and bit 0 is RET, normally 0b010 for power off, 0b000 for power on."/>
    <register addr="a310001c" rw_flags="R" width="4" name="PHY_STATUS" comment="Some global PHY status bits"/>
    <register addr="a3100020" rw_flags="RW" width="1" name="PHY_SEMAPHORE[0]" comment="General-use mutual exclusion lock for a single resource"/>
    <register addr="a3100024" rw_flags="RW" width="1" name="PHY_SEMAPHORE[1]" comment="General-use mutual exclusion lock for a single resource"/>
    <register addr="a3100028" rw_flags="RW" width="1" name="PHY_SEMAPHORE[2]" comment="General-use mutual exclusion lock for a single resource"/>
    <register addr="a310002c" rw_flags="RW" width="1" name="PHY_SEMAPHORE_3" comment="General-use mutual exclusion lock for up to 2 resources"/>
    <register addr="a3100030" rw_flags="RW" width="4" name="CAPTURE_BASE_ADDR" comment="Capture base address must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a3100034" rw_flags="RW" width="4" name="CAPTURE_BUFFER_LEN" comment="Capture buffer length must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a3100038" rw_flags="RW" width="4" name="CAPTURE_CONTROL" comment="This register controls the data capture features within the capture block"/>
    <register addr="a310003c" rw_flags="RW" width="4" name="CAPTURE_START_CONTROL" comment="Capture delayed start trigger interval and rearm settings"/>
    <register addr="a3100040" rw_flags="RW" width="4" name="CAPTURE_STOP_CONTROL" comment="Capture delayed stop trigger interval and rearm settings"/>
    <register addr="a3100044" rw_flags="R" width="4" name="CAPTURE_STATUS" comment="Capture and DMA channel state"/>
    <register addr="a3100048" rw_flags="R" width="4" name="CAPTURE_CUR_ADDR" comment="Capture current address"/>
    <register addr="a310004c" rw_flags="RW" width="4" name="PLAYBACK_BASE_ADDR" comment="Playback base address must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a3100050" rw_flags="RW" width="4" name="PLAYBACK_BUFFER_LEN" comment="Playback buffer length must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a3100054" rw_flags="RW" width="4" name="PLAYBACK_CONTROL" comment="This register controls the data Playback features within the Playback block"/>
    <register addr="a3100058" rw_flags="R" width="4" name="PLAYBACK_STATUS" comment="Playback and DMA channel state"/>
    <register addr="a310005c" rw_flags="R" width="4" name="PLAYBACK_CUR_ADDR" comment="Playback current address"/>
    <register addr="a3100060" rw_flags="RW" width="4" name="EVENT_CONTROL_0" comment="Enables for event capture and event DMA control"/>
    <register addr="a3100064" rw_flags="RW" width="4" name="EVENT_CONTROL_1" comment="Enables for event capture"/>
    <register addr="a3100068" rw_flags="W" width="4" name="EVENT_GENERATE" comment="generates event from software"/>
    <register addr="a310006c" rw_flags="RW" width="4" name="EVENT_HIGH" comment="high 32 bits of software generated events"/>
    <register addr="a3100070" rw_flags="RW" width="4" name="EVENT_MATCH_CONTROL[0]" comment="Event ID matches that generate interrupt and capture trigger"/>
    <register addr="a3100074" rw_flags="RW" width="4" name="EVENT_MATCH_CONTROL[1]" comment="Event ID matches that generate interrupt and capture trigger"/>
    <register addr="a3100078" rw_flags="RW" width="4" name="EVENT_MATCH_CONTROL[2]" comment="Event ID matches that generate interrupt and capture trigger"/>
    <register addr="a310007c" rw_flags="RW" width="4" name="EVENT_MATCH_CONTROL[3]" comment="Event ID matches that generate interrupt and capture trigger"/>
    <register addr="a3100080" rw_flags="R" width="4" name="EVENT_MATCH_DATA[0]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a3100084" rw_flags="R" width="4" name="EVENT_MATCH_DATA[1]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a3100088" rw_flags="R" width="4" name="EVENT_MATCH_DATA[2]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a310008c" rw_flags="R" width="4" name="EVENT_MATCH_DATA[3]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a3100090" rw_flags="R" width="4" name="EVENT_MATCH_DATA[4]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a3100094" rw_flags="R" width="4" name="EVENT_MATCH_DATA[5]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a3100098" rw_flags="R" width="4" name="EVENT_MATCH_DATA[6]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a310009c" rw_flags="R" width="4" name="EVENT_MATCH_DATA[7]" comment="Store the bottom 20-bits of event data for EVENT_MATCH...7"/>
    <register addr="a31000a0" rw_flags="RW" width="4" name="EVENT_COUNT_CONTROL[0]" comment="This register configures the event IDs to be counted"/>
    <register addr="a31000a4" rw_flags="RW" width="4" name="EVENT_COUNT_CONTROL[1]" comment="This register configures the event IDs to be counted"/>
    <register addr="a31000a8" rw_flags="RW" width="4" name="EVENT_COUNT_CONTROL[2]" comment="This register configures the event IDs to be counted"/>
    <register addr="a31000ac" rw_flags="RW" width="4" name="EVENT_COUNT_CONTROL[3]" comment="This register configures the event IDs to be counted"/>
    <register addr="a31000b0" rw_flags="R" width="2" name="EVENT_COUNT[0]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000b4" rw_flags="R" width="2" name="EVENT_COUNT[1]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000b8" rw_flags="R" width="2" name="EVENT_COUNT[2]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000bc" rw_flags="R" width="2" name="EVENT_COUNT[3]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000c0" rw_flags="R" width="2" name="EVENT_COUNT[4]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000c4" rw_flags="R" width="2" name="EVENT_COUNT[5]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000c8" rw_flags="R" width="2" name="EVENT_COUNT[6]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000cc" rw_flags="R" width="2" name="EVENT_COUNT[7]" comment="Store the event count for EVENT_COUNT_0...7"/>
    <register addr="a31000d0" rw_flags="RW" width="4" name="EVENT_DMA_BASE_ADDR" comment="Events logging base address must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a31000d4" rw_flags="RW" width="4" name="EVENT_DMA_BUFFER_LEN" comment="Events logging buffer length must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a31000d8" rw_flags="R" width="2" name="EVENT_STATUS" comment="EVENT logging status"/>
    <register addr="a31000dc" rw_flags="R" width="4" name="EVENT_DMA_CUR_ADDR" comment="Beamformee0 DMA read current address"/>
    <register addr="a31000e0" rw_flags="RW" width="4" name="DPD_LOADER_DMA_BASE_ADDR" comment="DPD loader base address must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a31000e4" rw_flags="RW" width="4" name="DPD_LOADER_DMA_BUFFER_LEN" comment="DPD loader buffer length must be 16-byte aligned, four LSBs are ignored"/>
    <register addr="a31000e8" rw_flags="R" width="2" name="DPD_LOADER_STATUS" comment="EVENT logging status"/>
    <register addr="a31000ec" rw_flags="R" width="4" name="DPD_LOADER_DMA_CUR_ADDR" comment="DPD loader DMA read current address"/>
    <register addr="a31000f0" rw_flags="RW" width="4" name="PHY_DEBUG_SELECT[0]" comment="Controls bits 31:16 and 15:0 of the debug multiplexers' output.       The multiplexers are organized hierarchically,       one nibble controlling multiplexer at each hierarchical level.       Selecting 0 for any of the multiplexer positions disables the debug output,       setting PHY_DEBUG_SELECT_0 for both bus segments to zero disables the clock to any debug logic."/>
    <register addr="a31000f4" rw_flags="RW" width="4" name="PHY_DEBUG_SELECT[1]" comment="Controls bits 31:16 and 15:0 of the debug multiplexers' output.       The multiplexers are organized hierarchically,       one nibble controlling multiplexer at each hierarchical level.       Selecting 0 for any of the multiplexer positions disables the debug output,       setting PHY_DEBUG_SELECT_0 for both bus segments to zero disables the clock to any debug logic."/>
    <register addr="a31000f8" rw_flags="R" width="4" name="PHY_DEBUG_READ" comment="Reads the instantaneous value of the output of the debug multiplexers."/>
    <register addr="a31000fc" rw_flags="RW" width="4" name="PHY_FEATURES" comment="Enable bits for the features implemented in PHY"/>
    <register addr="a3100128" rw_flags="RW" width="4" name="DMA_INTERRUPT_DISABLE" comment="Interrupt enable/disable and pending events clear - Disable interrupt/read enable status"/>
    <register addr="a310012c" rw_flags="RW" width="4" name="DMA_INTERRUPT_ENABLE" comment="Interrupt enable/disable and pending events clear - Enable interrupt/read enable status"/>
    <register addr="a3100130" rw_flags="RWS" width="4" name="DMA_INTERRUPT_CLEAR" comment="Interrupt enable/disable and pending events clear - Clear interrupt/read pending interrupt status"/>
    <register addr="a3100134" rw_flags="R" width="4" name="DMA_INTERRUPT_RAW" comment="Interrupt enable/disable and pending events clear - Read incoming interrupt status"/>
    <register addr="a3100138" rw_flags="RW" width="2" name="PHY_LH_PHY2ABB_CONTROL[0]" comment="LongHop control for PHY2ABB. Signals other than the reset bit should only be changed when LH is in reset"/>
    <register addr="a3100140" rw_flags="R" width="2" name="PHY_LH_PHY2ABB_STATUS[0]" comment="LongHop status for the PHY2ABB."/>
    <register addr="a3100148" rw_flags="RW" width="2" name="PHY_LH_ABB2PHY_CONTROL[0]" comment="LongHop control for ABB2PHY. Signals other than the reset bit should only be changed when LH is in reset"/>
    <register addr="a3100150" rw_flags="R" width="2" name="PHY_LH_ABB2PHY_STATUS[0]" comment="LongHop status for the ABB2PHY."/>
  </block>
  <block name="phy_dfe" comment="WLAN digital front end registers">
    <register addr="a3110000" rw_flags="RW" width="2" name="DFE_RX_CONFIG[0]" comment="Rx configuration bits"/>
    <register addr="a3110004" rw_flags="R" width="2" name="DFE_RX_STATUS[0]" comment="Rx path status and latency measurements"/>
    <register addr="a3110008" rw_flags="RW" width="1" name="DFE_RX_LNA_PHASE_COMP_CONFIG1[0]" comment="Configuration for LNA phase compensation - WL LNA."/>
    <register addr="a311000c" rw_flags="RW" width="2" name="DFE_RX_LNA_PHASE_COMP_CONFIG2[0]" comment="Configuration for LNA phase compensation - WL LNA."/>
    <register addr="a3110010" rw_flags="RW" width="2" name="DFE_RX_NOTCH_CONFIG[0]" comment="This register configures the two notch filters in each of the receive chains.                The lower 8 bits configure the OFDM filter and the next 8 bits the CCK filter."/>
    <register addr="a3110014" rw_flags="R" width="4" name="DFE_RX_NOTCHA_STATUS[0]" comment="Rx status of notch filter A (OFDM) in each of the receive chain."/>
    <register addr="a3110018" rw_flags="R" width="4" name="DFE_RX_NOTCHB_STATUS[0]" comment="Rx status of notch filter B (CCK) in each of the receive chain."/>
    <register addr="a311001c" rw_flags="RW" width="2" name="DFE_RX_NOTCH_PRELOAD[0]" comment="Sets values to be loaded into the memory element of the notch filters at the start of each frame"/>
    <register addr="a3110020" rw_flags="RW" width="2" name="DFE_SIGANAL_CONFIG[0]" comment="This register configures the signal analyser"/>
    <register addr="a3110024" rw_flags="RW" width="2" name="DFE_SIGANAL_FREQ[0][0]" comment="This signed value sets the frequencies of the tones used by signal analyser channels.                The value for a given frequency can be found by multiplying by 65_536 and dividing by 160_000_000."/>
    <register addr="a3110028" rw_flags="RW" width="2" name="DFE_SIGANAL_FREQ[0][1]" comment="This signed value sets the frequencies of the tones used by signal analyser channels.                The value for a given frequency can be found by multiplying by 65_536 and dividing by 160_000_000."/>
    <register addr="a311002c" rw_flags="R" width="4" name="DFE_SIGANAL_CH_I_OUTPUT[0][0]" comment="This contains the signed I value generated by signal analyser channels."/>
    <register addr="a3110030" rw_flags="R" width="4" name="DFE_SIGANAL_CH_I_OUTPUT[0][1]" comment="This contains the signed I value generated by signal analyser channels."/>
    <register addr="a3110034" rw_flags="R" width="4" name="DFE_SIGANAL_CH_Q_OUTPUT[0][0]" comment="This contains the signed Q value generated by signal analyser channels."/>
    <register addr="a3110038" rw_flags="R" width="4" name="DFE_SIGANAL_CH_Q_OUTPUT[0][1]" comment="This contains the signed Q value generated by signal analyser channels."/>
    <register addr="a311003c" rw_flags="R" width="1" name="DFE_SIGANAL_STATUS[0]" comment="Signal analyser status bits."/>
    <register addr="a3110040" rw_flags="RW" width="1" name="DFE_RX_COMP_CONFIG1[0]" comment="This register controls phase and magnitude compensation for the receive signals in the                first receive chain, and has a bit which enables frequency compensation for both receive chains."/>
    <register addr="a3110044" rw_flags="RW" width="2" name="DFE_RX_COMP_CONFIG2[0]" comment="Configuration parameters for the averaging block in the Rx IQ Compensation measurement block"/>
    <register addr="a3110048" rw_flags="RW" width="2" name="DFE_RX_COMP_DC[0][0]" comment="This register controls the ADC DC level compensation parameters"/>
    <register addr="a311004c" rw_flags="RW" width="2" name="DFE_RX_COMP_DC[0][1]" comment="This register controls the ADC DC level compensation parameters"/>
    <register addr="a3110050" rw_flags="RW" width="2" name="DFE_RX_COMP_DELAY_CONFIG[0]" comment="This register controls the receiver delay compensation parameters"/>
    <register addr="a3110054" rw_flags="RW" width="2" name="DFE_RX_COMP_PHASE_CONFIG[0]" comment="Configuration for receiver phase compensation.                   Writing this register writes to one of thee settings indexed by DFE_RX_COMP_LUT_INDEX.                   In receive operation the RFIC MixerGain value is used to index the LUT."/>
    <register addr="a3110058" rw_flags="RW" width="2" name="DFE_RX_COMP_AMPL_CONFIG[0]" comment="Configuration for receiver amplitude compensation.                   Writing this register writes to one of thee settings indexed by DFE_RX_COMP_LUT_INDEX.                   In receive operation the RFIC MixerGain value is used to index the LUT."/>
    <register addr="a311005c" rw_flags="R" width="1" name="DFE_RX_PHASE_COMP_LUT_STATUS[0]" comment="This register reads the current phase compensation LUT entry"/>
    <register addr="a3110060" rw_flags="R" width="1" name="DFE_RX_AMPL_COMP_LUT_STATUS[0]" comment="This register reads the current amplitude compensation LUT entry"/>
    <register addr="a3110064" rw_flags="RW" width="4" name="DFE_RX_COMP_MATRIX_I_CONFIG[0]" comment="This register controls the receiver IQ matrix compensation parameters for output I samples."/>
    <register addr="a3110068" rw_flags="RW" width="4" name="DFE_RX_COMP_MATRIX_Q_CONFIG[0]" comment="This register controls the receiver IQ matrix compensation parameters for output Q samples."/>
    <register addr="a311006c" rw_flags="RW" width="1" name="DFE_RX_FDIQMC_CONTROL[0]" comment="Frequency dependent Rx IQ Compensation based on FIR filter"/>
    <register addr="a3110070" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][0]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110074" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][1]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110078" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][2]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a311007c" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][3]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110080" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][4]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110084" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][5]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110088" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][6]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a311008c" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][7]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110090" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][8]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110094" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][9]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a3110098" rw_flags="RW" width="4" name="DFE_RX_FDIQMC_COEFF[0][10]" comment="Frequency dependent Rx IQ Compensation based on 11 tap FIR filter"/>
    <register addr="a31100ac" rw_flags="RW" width="1" name="DFE_RX_MPDPD_FEEDBACK[0]" comment="DFE Rx configuration for MPDPD feedback"/>
    <register addr="a31100b0" rw_flags="RW" width="4" name="DFE_RX_MPDPD_DC_NOTCH[0]" comment="Predistortion - Feedback Notch Mode Config2"/>
    <register addr="a31100b4" rw_flags="RW" width="4" name="DFE_RX_MPDPD_DC_BIAS[0]" comment="DPD DC Bias input"/>
    <register addr="a31100b8" rw_flags="R" width="4" name="DFE_RX_MPDPD_DC_BIAS_STATUS[0]" comment="Predistortion - DC Bias Status"/>
    <register addr="a31100bc" rw_flags="RW" width="4" name="DFE_RX_DEBUG_DRAIN[0]" comment="Rx path debug IQ drain"/>
    <register addr="a31100c0" rw_flags="RW" width="4" name="DFE_RX_ADC_NOTCH_CONFIG[0]" comment="This register configures the notch filter after the ADC, and also the source of the Radio AGC samples."/>
    <register addr="a31100c4" rw_flags="R" width="4" name="DFE_RX_ADC_NOTCH_EVEN_STATUS[0]" comment="Rx status of ADC Even slice notch filter."/>
    <register addr="a31100c8" rw_flags="R" width="4" name="DFE_RX_ADC_NOTCH_ODD_STATUS[0]" comment="Rx status of ADC Odd slice notch filter. Only used if ADC rate &amp;gt; 320Msps."/>
    <register addr="a31100cc" rw_flags="RW" width="2" name="DFE_RX_ADC_NOTCH_EVEN_PRELOAD[0]" comment="Sets the DC offset loaded into the notch filters at the start of each packet."/>
    <register addr="a31100d0" rw_flags="RW" width="2" name="DFE_RX_ADC_NOTCH_ODD_PRELOAD[0]" comment="Sets the DC offset loaded into the notch filters at the start of each packet. Only used if ADC rate &amp;gt; 320Msps."/>
    <register addr="a31101a8" rw_flags="RW" width="1" name="DFE_SIG_ENABLE" comment="Enable bits for signal generator and signal analyser"/>
    <register addr="a31101ac" rw_flags="RW" width="4" name="DFE_SIGGEN_CONFIG[0]" comment="Register to control operation of the internal signal generator.                   SigGen must be enabled in DFE_SIGGEN_ENABLE to start"/>
    <register addr="a31101b0" rw_flags="RW" width="2" name="DFE_SIGGEN_CONFIG2[0]" comment="Register to control operation of the internal signal generator - logical extension of DFE_SIGGEN_CONFIG"/>
    <register addr="a31101b4" rw_flags="RW" width="2" name="DFE_SIGGEN_FREQ[0][0]" comment="This sets the frequency of each tone used by the signal generator.             The value for a given frequency can be found by multiplying by 65_536 and dividing by the sample rate of the injection point.             When multiple tones are enabled, output will be scaled down automatically to avoid clipping."/>
    <register addr="a31101b8" rw_flags="RW" width="2" name="DFE_SIGGEN_FREQ[0][1]" comment="This sets the frequency of each tone used by the signal generator.             The value for a given frequency can be found by multiplying by 65_536 and dividing by the sample rate of the injection point.             When multiple tones are enabled, output will be scaled down automatically to avoid clipping."/>
    <register addr="a31101bc" rw_flags="RW" width="2" name="DFE_SIGGEN_PHASE[0][0]" comment="This register has several functions:             It is the phase value preloaded into the accumulator used to generate each tone, except the last tone.             The last tone always starts with phase 0.             Register index 0 is used to provide the DC level in DC output mode.             It also affects I and Q phases in pseudo-random signal mode."/>
    <register addr="a31101d4" rw_flags="RW" width="4" name="DFE_TX_CONFIG[0]" comment="Tx configuration bits"/>
    <register addr="a31101d8" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_CONTROL[0]" comment="Frequency dependent Tx IQ Compensation"/>
    <register addr="a31101dc" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][0]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101e0" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][1]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101e4" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][2]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101e8" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][3]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101ec" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][4]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101f0" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][5]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101f4" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][6]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101f8" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][7]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a31101fc" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][8]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a3110200" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][9]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a3110204" rw_flags="RW" width="4" name="DFE_TX_FDIQMC_COEFF[0][10]" comment="Frequency dependent Tx IQ Compensation based on 11-tap FIR filter"/>
    <register addr="a3110208" rw_flags="RW" width="1" name="DFE_TX_COMP_DELAY_CONFIG[0]" comment="This register controls the transmit delay compensation parameters"/>
    <register addr="a311020c" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][0]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110210" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][1]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110214" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][2]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110218" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][3]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311021c" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][4]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110220" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][5]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110224" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][6]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110228" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][7]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311022c" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][8]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110230" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][9]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110234" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][10]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110238" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][11]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311023c" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][12]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110240" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][13]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110244" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][14]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110248" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][15]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311024c" rw_flags="RW" width="4" name="DFE_TX_PREEMP_BANK[0][16]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110250" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][0]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110254" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][1]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110258" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][2]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311025c" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][3]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110260" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][4]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110264" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][5]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110268" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][6]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311026c" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][7]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110270" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][8]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110274" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][9]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110278" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][10]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311027c" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][11]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110280" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][12]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110284" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][13]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110288" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][14]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a311028c" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][15]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110290" rw_flags="RW" width="4" name="DFE_TX_POSTEMP_BANK[0][16]" comment="17x complex 11+11-bit coeffecients for Tx dpd pre-emphasis.                Bit 31 of last register is Filter enable bit,                Bit 30..27 of last register is Filter full scale adjust"/>
    <register addr="a3110294" rw_flags="RW" width="2" name="DFE_TX_SAMP_ALIGN[0]" comment="Sample alignment in DPD feedback path"/>
    <register addr="a3110298" rw_flags="RW" width="4" name="DFE_TX_SAMP_ALIGN_GAIN[0]" comment="Sample alignment in DPD feedback path"/>
    <register addr="a311029c" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK0[0][0]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 0.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102a0" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK0[0][1]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 0.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102a4" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK0[0][2]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 0.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102a8" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK0[0][3]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 0.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102ac" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK0[0][4]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 0.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102b0" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK0[0][5]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 0.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102b4" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK1[0][0]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 1.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102b8" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK1[0][1]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 1.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102bc" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK1[0][2]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 1.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102c0" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK1[0][3]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 1.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102c4" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK1[0][4]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 1.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102c8" rw_flags="RW" width="4" name="DFE_TX_SSF_BANK1[0][5]" comment="21x 8-bit coeffecients for Tx Spectrum shaping filter bank 1.                Bit 8 of last register is Filter enable bit"/>
    <register addr="a31102cc" rw_flags="RW" width="4" name="DFE_TX_CFO_CONFIG[0]" comment="Carrier frequency offset compensation"/>
    <register addr="a31102d0" rw_flags="RW" width="4" name="DFE_TX_SCO_INC[0]" comment="Sampling frequency increment"/>
    <register addr="a31102d4" rw_flags="RW" width="4" name="DFE_TX_SCO_INIT[0]" comment="Sampling frequency initial value"/>
    <register addr="a31102d8" rw_flags="RW" width="1" name="DFE_TX_DPD_CONFIG[0]" comment="DPD configuration"/>
    <register addr="a31102dc" rw_flags="RW" width="2" name="DFE_TX_DPD_GAIN[0]" comment="Predistortion gain Config"/>
    <register addr="a31102e0" rw_flags="RW" width="2" name="DFE_TX_DPD_SWED[0]" comment="DFE Tx DPD SWED configuration"/>
    <register addr="a31102e4" rw_flags="RW" width="4" name="DFE_TX_DPD_DELAYS[0][0]" comment="Configuration of the delay lines for term computation"/>
    <register addr="a31102e8" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_THRESHOLDS[0][0]" comment="Configuration of the thresholds for LUT addressing"/>
    <register addr="a31102ec" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_OFFSETS[0][0]" comment="Configuration of the offsets for LUT addressing"/>
    <register addr="a31102f0" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_ADDR_LBS[0][0]" comment="Lower bound saturation levels for LUT addressing"/>
    <register addr="a31102f4" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_ADDR_UBS[0][0]" comment="Upper bound saturation levels for LUT addressing"/>
    <register addr="a31102f8" rw_flags="RW" width="4" name="DFE_TX_DPD_DELAYS[0][1]" comment="Configuration of the delay lines for term computation"/>
    <register addr="a31102fc" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_THRESHOLDS[0][1]" comment="Configuration of the thresholds for LUT addressing"/>
    <register addr="a3110300" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_OFFSETS[0][1]" comment="Configuration of the offsets for LUT addressing"/>
    <register addr="a3110304" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_ADDR_LBS[0][1]" comment="Lower bound saturation levels for LUT addressing"/>
    <register addr="a3110308" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_ADDR_UBS[0][1]" comment="Upper bound saturation levels for LUT addressing"/>
    <register addr="a311030c" rw_flags="RW" width="4" name="DFE_TX_DPD_DELAYS[0][2]" comment="Configuration of the delay lines for term computation"/>
    <register addr="a3110310" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_THRESHOLDS[0][2]" comment="Configuration of the thresholds for LUT addressing"/>
    <register addr="a3110314" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_OFFSETS[0][2]" comment="Configuration of the offsets for LUT addressing"/>
    <register addr="a3110318" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_ADDR_LBS[0][2]" comment="Lower bound saturation levels for LUT addressing"/>
    <register addr="a311031c" rw_flags="RW" width="4" name="DFE_TX_DPD_LUT_ADDR_UBS[0][2]" comment="Upper bound saturation levels for LUT addressing"/>
    <register addr="a31103ac" rw_flags="R" width="1" name="DFE_TX_STATUS[0]" comment="Tx path status and latency measurements"/>
    <register addr="a31103b0" rw_flags="RW" width="4" name="DFE_TX_DEBUG_DRAIN[0]" comment="Tx path debug IQ drain"/>
    <register addr="a3110594" rw_flags="RW" width="4" name="DFE_TX_DPD_LOADER" comment="Predistortion LUT loader address for DMA and keyhole access"/>
    <register addr="a3110598" rw_flags="RW" width="4" name="DFE_TX_DPD_LOADER_LUTS[0]" comment="Predistortion LUT loader DMA control"/>
    <register addr="a311059c" rw_flags="RW" width="4" name="DFE_TX_DPD_LOADER_LUTS[1]" comment="Predistortion LUT loader DMA control"/>
    <register addr="a31105a0" rw_flags="RW" width="4" name="DFE_TX_DPD_LOADER_DATA" comment="Predistortion LUT loader read/write data for keyhole access"/>
  </block>
  <block name="phy_fleximac" comment="PHY FlexiMAC control and status registers">
    <register addr="a3000000" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR1" comment="Tx parameters required to be set before start of transmission"/>
    <register addr="a3000004" rw_flags="RW" width="2" name="PHY_FLEXIMAC_TX_VECTOR1_STS" comment="Tx parameters required to determine space time streams"/>
    <register addr="a3000008" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR1_DFE_RF[0]" comment="DFE and RF Tx parameters required to be set before start of transmission.                      For non-mimo modes register 0 is used. For MIMO modes the registers are                      used to allow configuration of the different Tx chains"/>
    <register addr="a300000c" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR1_DFE_IQ_COMP[0]" comment="DFE transmit I/Q scaling and phase compensation"/>
    <register addr="a3000010" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR1_DFE_IQ_OFFSET[0]" comment="DFE transmit I/Q DC offset compensation"/>
    <register addr="a3000014" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR1_DFE_DPD[0]" comment="DFE transmit I/Q DC offset compensation"/>
    <register addr="a3000028" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_TIMER" comment="Internal PHY delays from MAC TxEnable rising edge"/>
    <register addr="a300002c" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR1_PAPR" comment="PAPR Threshold"/>
    <register addr="a3000030" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR2_PARAM1" comment="Allows the CPU to write the Tx parameters required before the end of LTF1 transmission"/>
    <register addr="a3000034" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR2_PARAM2" comment="Allows the CPU to write the Tx parameters required before the end of LTF1 transmission"/>
    <register addr="a3000038" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR2_LENGTH" comment="Allows the CPU to write the Tx parameters required before the end of LTF1 transmission"/>
    <register addr="a300003c" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_VECTOR3" comment="HT-GF: Allows the CPU to write the required Tx parameters before the end of HT-LTF1 transmission.                   all other packet types : Allows the CPU to write the required Tx parameters before the end of LTF2 transmission."/>
    <register addr="a3000040" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_SIGNAL_LSIG" comment="L-SIG contents: Must be set before the end of LTF1 transmission."/>
    <register addr="a3000044" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_SIGNAL_SIG1" comment="HT-GF contents: Must be set before the end of HT-LTF1 symbol transmission.                   HT-MM/VHT/HE SIG1 contents: Must be set before the end of L-LTF2 symbol transmission."/>
    <register addr="a3000048" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_SIGNAL_SIG2" comment="HT-GF contents: Must be set before the end of HT-LTF1 symbol transmission.                   HT-MM/VHT/HE SIG1 contents: Must be set before the end of L-LTF2 symbol transmission."/>
    <register addr="a300004c" rw_flags="RW" width="4" name="PHY_FLEXIMAC_TX_SIGNAL_SIGB" comment="VHT SIGB contents. Needs to be set before the end of L-LTF2 symbol transmission."/>
    <register addr="a3000050" rw_flags="R" width="4" name="PHY_FLEXIMAC_TX_STATUS" comment="Tx parameters required to be set before start of transmission"/>
    <register addr="a3000054" rw_flags="RW" width="1" name="PHY_FLEXIMAC_TX_SPARE" comment="Spare, reserved"/>
    <register addr="a3000058" rw_flags="RW" width="4" name="PHY_FLEXIMAC_RX_TIMER" comment="Internal PHY delays from MAC RxEnable rising edge"/>
    <register addr="a300005c" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_VECTOR1" comment="Rx parameters from received packet, zero when no packet has been received"/>
    <register addr="a3000060" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_VECTOR2" comment="Rx parameters from received packet"/>
    <register addr="a3000064" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_VECTOR3" comment="Rx parameters from received packet"/>
    <register addr="a3000068" rw_flags="RW" width="4" name="PHY_FLEXIMAC_RX_TB_VECTOR1" comment="Configuration1 for Rx trigger based packet"/>
    <register addr="a300006c" rw_flags="RW" width="4" name="PHY_FLEXIMAC_RX_TB_VECTOR2" comment="Configuration2 for Rx trigger based packet"/>
    <register addr="a3000070" rw_flags="RW" width="2" name="PHY_FLEXIMAC_RX_TB_VECTOR3" comment="Configuration3 for Rx trigger based packet"/>
    <register addr="a3000074" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_FREQ_OFF[0]" comment="Signed Rx frequency offset measurements from received packet per selected antenna.             For OFDM, offset = reg * 625kHz / 65536;             For CCK, offset = reg * 1000kHz / 65536"/>
    <register addr="a3000078" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_SIG_QUAL[0]" comment="Rx signal quality measurements from received packet, per selected antenna"/>
    <register addr="a300007c" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_RCPI[0]" comment="Rx received channel power indicator from received packet per selected antenna, equal to (rx_power_in_dBm+110)*2"/>
    <register addr="a3000080" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_WRSSI[0]" comment="Rx AGC gain related information per antenna"/>
    <register addr="a3000088" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_L_SIG" comment="Contents of the Legacy (Non-HT) Signal field"/>
    <register addr="a300008c" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HT_SIG1" comment="Contents of the HT-SIG(1) field"/>
    <register addr="a3000090" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HT_SIG2" comment="Contents of the HT-SIG(2) field"/>
    <register addr="a3000094" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_VHT_SIG_A1" comment="Contents of the VHT-SIG(A1) field"/>
    <register addr="a3000098" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_VHT_SIG_A2" comment="Contents of the HT-SIG(A1) field"/>
    <register addr="a300009c" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_VHT_SIG_B" comment="Contents of the HT-SIG(B) field"/>
    <register addr="a30000a0" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HE_SIG_A1" comment="Contents of the HE-SIG(A1) field"/>
    <register addr="a30000a4" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HE_SIG_A2" comment="Contents of the HE-SIG(A2) field"/>
    <register addr="a30000a8" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HE_SIG_B_COMMON_PART1" comment="Contents of the HE-SIGB Common Block content_channel[31:0]"/>
    <register addr="a30000ac" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HE_SIG_B_COMMON_PART2" comment="Contents of the HE-SIGB Common Block content_channe2[31:0]"/>
    <register addr="a30000b0" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HE_SIG_B_COMMON_PART3" comment="Contents of the HE-SIGB Common Block {content_channe2[32],content_channe1[32]} and CRC"/>
    <register addr="a30000b4" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_HE_SIG_B_USER0" comment="Contents of the HE-SIGB User field targeted for us (where the STA-ID matches the register TODO)"/>
    <register addr="a30000b8" rw_flags="R" width="2" name="PHY_FLEXIMAC_RX_SCRAM_SEED" comment="Received Scrambling Seed"/>
    <register addr="a30000bc" rw_flags="R" width="1" name="PHY_FLEXIMAC_RX_STATUS" comment="Receive status"/>
    <register addr="a30000c0" rw_flags="R" width="1" name="PHY_FLEXIMAC_RX_LOW_ENERGY_STATUS" comment="Low Power indication from BBB and BBA modems."/>
    <register addr="a30000c8" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_SIGNAL_RMS_GAIN_COMP_CONT[0][0]" comment="OFDM digital energy measured in each channel per selected Rx antenna.                         The energy is multiplexed on each 20MHz Channel depending on the PHY_CONFIG.PhyConfigPrimaryChan value                         so that the Primary20 Mhz subband is always mapped to Channel 0."/>
    <register addr="a30000e8" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_SIGNAL_RMS_GAIN_COMP_INST[0][0]" comment="OFDM digital energy measured in each channel per selected Rx antenna. This is a fixed value per PPDU reception.                         The energy is multiplexed on each 20MHz Channel depending on the PHY_CONFIG.PhyConfigPrimaryChan value                         so that the Primary20 Mhz subband is always mapped to Channel 0."/>
    <register addr="a3000108" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_CCK_RMS_GAIN_COMP_CONT_20MHZ[0]" comment="CCK energy per selected Rx antenna"/>
    <register addr="a300010c" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_CCK_RMS_GAIN_COMP_CONT_10MHZ[0]" comment="CCK energy per selected Rx antenna within 10MHz"/>
    <register addr="a3000110" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_CCK_RMS_GAIN_COMP_INST_20MHZ[0]" comment="CCK energy per selected Rx antenna. This is a fixed value per PPDU reception"/>
    <register addr="a3000114" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_CCK_RMS_GAIN_COMP_INST_10MHZ[0]" comment="CCK energy per selected Rx antenna within 10MHz. This is a fixed value per PPDU reception"/>
    <register addr="a3000118" rw_flags="R" width="1" name="PHY_FLEXIMAC_RX_GAIN[0]" comment="Digital and analog gain settings applied across the whole operating bandwidth"/>
    <register addr="a300011c" rw_flags="R" width="4" name="PHY_FLEXIMAC_RX_STF_AUTOCORRELATION[0][0]" comment="STF autocorrelation value on each 20MHz channel for each antenna"/>
    <register addr="a300013c" rw_flags="R" width="1" name="PHY_FLEXIMAC_RX_ED[0]" comment="Energy detected on each 20MHz channel for each antenna.                         Primary 20MHz channel is always mapped to channel 0;                         Secondary 20MHz channel is always mapped to channel 1;                         Secondary 40MHz channel is always mapped to channel 2 and 3; etc."/>
    <register addr="a3000140" rw_flags="R" width="2" name="PHY_FLEXIMAC_RX_PACKET_CCA[0]" comment="CCA for each 20MHz subband per selected Rx antenna.                         The energy is multiplexed on each 20MHz Channel depending on the PHY_CONFIG.PhyConfigPrimaryChan value                         so that the Primary20 Mhz channel is always mapped to Channel 0;                         Secondary20 MHz is always mapped to Channel 1;                         Channel 2 and Channel 3 always correspond to the Secondary 40. Channel 0 is the lowest 20MHz subband"/>
    <register addr="a3000144" rw_flags="R" width="2" name="PHY_FLEXIMAC_RX_PACKET_START[0]" comment="This is a fine detection using STF symbols on each Rx antenna.                         The Primary20 Mhz channel is always mapped to Channel 0;                         The Secondary20 MHz is always mapped to Channel 1;                         Channel 2 and Channel 3 always correspond to the Secondary 40. Channel 0 is the lowest 20MHz subband"/>
    <register addr="a3000148" rw_flags="R" width="2" name="PHY_FLEXIMAC_RX_PACKET_SYNC[0]" comment="LTF preamble detection on each Rx antenna and for each 20MHz channel"/>
    <register addr="a300014c" rw_flags="R" width="1" name="PHY_FLEXIMAC_RX_PAYLOAD_DET[0]" comment="Payload detection on each Rx antenna                         The Primary20 Mhz channel is always mapped to Channel 0;                         The Secondary20 MHz is always mapped to Channel 1;                         Channel 2 and Channel 3 always correspond to the Secondary 40. Channel 0 is the lowest 20MHz subband"/>
    <register addr="a30001d8" rw_flags="RW" width="4" name="PHY_FLEXIMAC_INTERRUPT_DISABLE" comment="Interrupt enable/disable and pending events clear.       Note that in Mxl450 the CPU interrupts bypass this register and are connected directly       to the CPU interrupt controller. This register can still be used for polling operation. - Disable interrupt/read enable status"/>
    <register addr="a30001dc" rw_flags="RW" width="4" name="PHY_FLEXIMAC_INTERRUPT_ENABLE" comment="Interrupt enable/disable and pending events clear.       Note that in Mxl450 the CPU interrupts bypass this register and are connected directly       to the CPU interrupt controller. This register can still be used for polling operation. - Enable interrupt/read enable status"/>
    <register addr="a30001e0" rw_flags="RWS" width="4" name="PHY_FLEXIMAC_INTERRUPT_CLEAR" comment="Interrupt enable/disable and pending events clear.       Note that in Mxl450 the CPU interrupts bypass this register and are connected directly       to the CPU interrupt controller. This register can still be used for polling operation. - Clear interrupt/read pending interrupt status"/>
    <register addr="a30001e4" rw_flags="R" width="4" name="PHY_FLEXIMAC_INTERRUPT_RAW" comment="Interrupt enable/disable and pending events clear.       Note that in Mxl450 the CPU interrupts bypass this register and are connected directly       to the CPU interrupt controller. This register can still be used for polling operation. - Read incoming interrupt status"/>
    <register addr="a30001e8" rw_flags="RW" width="4" name="PHY_FLEXIMAC_OVERRIDE" comment="State machine debug overrides"/>
    <register addr="a30001ec" rw_flags="R" width="4" name="PHY_FLEXIMAC_STATE" comment="State machine current state of FSM and counters for debug inspection"/>
    <register addr="a30001f0" rw_flags="RW" width="1" name="PHY_FLEXIMAC_COADJ_ENABLES" comment="Coadj general config register"/>
    <register addr="a30001f4" rw_flags="RW" width="4" name="PHY_FLEXIMAC_COADJ_CONFIG" comment="Coadj general config register"/>
    <register addr="a30001f8" rw_flags="RW" width="4" name="PHY_FLEXIMAC_COADJ_CONFIG2" comment="Coadj general config register 2"/>
    <register addr="a30001fc" rw_flags="R" width="4" name="PHY_FLEXIMAC_COADJ_STATUS" comment="Coadj general status register"/>
    <register addr="a3000200" rw_flags="R" width="4" name="PHY_FLEXIMAC_COADJ_BRACKEN_STATUS" comment="Status of Bracken core - 8 LS bits of PC for last 4 clock cycles (LS is most recent)"/>
    <register addr="a3000204" rw_flags="RW" width="4" name="PHY_FLEXIMAC_COADJ_COMMS" comment="General Communication register. Bracken gets an interrupt event when this is writtem"/>
    <register addr="a3000208" rw_flags="RW" width="2" name="PHY_FLEXIMAC_COADJ_TIMER" comment="Timer initial value, downcount at core clk rate starts on write"/>
    <register addr="a300020c" rw_flags="RW" width="2" name="PHY_FLEXIMAC_COADJ_MEM_ADDR" comment="Coadj Code/Data Mem Address. MSBs=2'b00: DataStore, 2'b10: Core internal regs, 2'b11: Local regs"/>
    <register addr="a3000210" rw_flags="RW" width="4" name="PHY_FLEXIMAC_COADJ_MEM_WDATA" comment="Coadj Code/Data Mem Write Data - auto increments address on write"/>
    <register addr="a3000214" rw_flags="R" width="4" name="PHY_FLEXIMAC_COADJ_MEM_RDATA" comment="Coadj Code/Data Mem Read Data - auto increments address on read"/>
  </block>
  <block name="rams" comment="WLMACPHY RAMS registers.">
    <register addr="a5000000" rw_flags="R" width="4" name="RAMS_NIC_AXI2MEM_READ_STATUS" comment="Status of the NIC-400-&amp;gt;RAMS AXI2MEM block."/>
    <register addr="a5000004" rw_flags="R" width="4" name="RAMS_NIC_AXI2MEM_WRITE_STATUS" comment="Status of the NIC-400-&amp;gt;RAMS AXI2MEM block."/>
    <register addr="a5000008" rw_flags="R" width="4" name="RAMS_ETR_AXI2MEM_READ_STATUS" comment="Status of the NIC-400-&amp;gt;RAMS AXI2MEM block."/>
    <register addr="a500000c" rw_flags="R" width="4" name="RAMS_ETR_AXI2MEM_WRITE_STATUS" comment="Status of the NIC-400-&amp;gt;RAMS AXI2MEM block."/>
    <register addr="a5000010" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_START[0]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000014" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_START[1]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000018" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_START[2]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a500001c" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_START[3]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000020" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_START[4]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000024" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_START[5]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000028" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_END[0]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a500002c" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_END[1]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000030" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_END[2]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000034" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_END[3]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000038" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_END[4]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a500003c" rw_flags="RW" width="4" name="RAMS_MAC_IF_ADDR_CHECK_END[5]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000040" rw_flags="RW" width="1" name="RAMS_MAC_IF_ADDR_CHECK_EN" comment="Set a bit to 1 to enable the corresponding address check region."/>
    <register addr="a5000044" rw_flags="R" width="1" name="RAMS_MAC_IF_ADDR_CHECK_STATUS" comment="Interrupt status of read address AXI channel."/>
    <register addr="a5000048" rw_flags="W" width="1" name="RAMS_MAC_IF_ADDR_CHECK_CLEAR" comment="Write a 1 to clear the interrupt status."/>
    <register addr="a500004c" rw_flags="R" width="4" name="RAMS_MAC_IF_ADDR_CHECK_ERROR_ADDR" comment="The address which caused the error."/>
    <register addr="a5000050" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_START[0]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000054" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_START[1]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000058" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_START[2]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a500005c" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_START[3]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000060" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_START[4]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000064" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_START[5]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a5000068" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_END[0]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a500006c" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_END[1]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000070" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_END[2]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000074" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_END[3]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000078" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_END[4]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a500007c" rw_flags="RW" width="4" name="RAMS_PHY_ADDR_CHECK_END[5]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a5000080" rw_flags="RW" width="1" name="RAMS_PHY_ADDR_CHECK_EN" comment="Set a bit to 1 to enable the corresponding address check region."/>
    <register addr="a5000084" rw_flags="R" width="1" name="RAMS_PHY_ADDR_CHECK_STATUS" comment="Interrupt status of read address AXI channel."/>
    <register addr="a5000088" rw_flags="W" width="1" name="RAMS_PHY_ADDR_CHECK_CLEAR" comment="Write a 1 to clear the interrupt status."/>
    <register addr="a500008c" rw_flags="R" width="4" name="RAMS_PHY_ADDR_CHECK_ERROR_ADDR" comment="The address which caused the error."/>
    <register addr="a5000090" rw_flags="RW" width="1" name="RAMS_CLK1X_EN_EXTEND" comment="Leave the clock enabled for this many cycles after activity stops on RAMS."/>
    <register addr="a5000094" rw_flags="W" width="1" name="MAC_IF_PREFETCHER_FLUSH" comment="Flush the MAC IF prefetcher in case there's a problem"/>
  </block>
  <block name="wl_bba" comment="Wireless LAN OFDM modem registers">
    <register addr="a3120000" rw_flags="RW" width="4" name="BB_RX_FORCE_CLOCK" comment="Force clock enable of manual clock gating if there is any logic bug"/>
    <register addr="a3120004" rw_flags="RW" width="1" name="BBA_DIRECTION_FIND_CONFIG" comment="Configuration for direction finder"/>
    <register addr="a3120008" rw_flags="R" width="4" name="BBA_DIRECTION_FIND_PHASE[0]" comment="This register is used to read the phase of symbol 0 and 1 ."/>
    <register addr="a312000c" rw_flags="R" width="4" name="BBA_DIRECTION_FIND_PHASE[1]" comment="This register is used to read the phase of symbol 0 and 1 ."/>
    <register addr="a3120010" rw_flags="R" width="4" name="BBA_DIRECTION_FIND_PHASE[2]" comment="This register is used to read the phase of symbol 0 and 1 ."/>
    <register addr="a3120014" rw_flags="R" width="4" name="BBA_DIRECTION_FIND_PHASE[3]" comment="This register is used to read the phase of symbol 0 and 1 ."/>
    <register addr="a3120018" rw_flags="R" width="4" name="BBA_DIRECTION_FIND_PHASE[4]" comment="This register is used to read the phase of symbol 0 and 1 ."/>
    <register addr="a312001c" rw_flags="RW" width="4" name="BB_CPE_CONFIG" comment="BB DD CPE configuration"/>
    <register addr="a3120020" rw_flags="RW" width="4" name="BB_HE_DDCPE_CONFIG" comment="DDCPE configuration"/>
    <register addr="a3120024" rw_flags="RW" width="2" name="BB_VLTF_CPE_CONFIG" comment="VLTF/HE LTF CPE"/>
    <register addr="a3120028" rw_flags="RW" width="4" name="BB_BPSK_CPE_CONFIG" comment="Pilot extension CPE and Preamble DDCPE for BPSK"/>
    <register addr="a312002c" rw_flags="RW" width="2" name="BB_PILOT_PHASE_LIMIT" comment="Limit the absolute pilot angle correction. This is an 11-bit unsigned number in RTL phase                 format (max value 1024). RTL phase format=(angle in deg / 180) * 1024. (Default=0.4 radians)"/>
    <register addr="a3120030" rw_flags="RW" width="4" name="BB_DDCPE_PHASE_LIMIT" comment="Phase limitation value for DD-CPE"/>
    <register addr="a3120034" rw_flags="RW" width="1" name="BB_DDCPE_PHASE_1024QAM_LIMIT" comment="Phase limitation value for DD-CPE"/>
    <register addr="a3120038" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_BANK0" comment="Pilot weight for MMSE CPE"/>
    <register addr="a312003c" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_BANK1" comment="Pilot weight for MMSE CPE"/>
    <register addr="a3120040" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_BANK2" comment="Pilot weight for MMSE CPE"/>
    <register addr="a3120044" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_PILOT_WEIGHT_BANK0" comment="Pilot weight for MMSE DD-CPE"/>
    <register addr="a3120048" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_PILOT_WEIGHT_BANK1" comment="Pilot weight for MMSE DD-CPE"/>
    <register addr="a312004c" rw_flags="RW" width="2" name="BB_DDCPE_MMSE_PILOT_WEIGHT_BANK2" comment="Pilot weight for MMSE DD-CPE"/>
    <register addr="a3120050" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_DATA_WEIGHT_BANK0" comment="Data weight for MMSE DD-CPE"/>
    <register addr="a3120054" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_DATA_WEIGHT_BANK1" comment="Data weight for MMSE DD-CPE"/>
    <register addr="a3120058" rw_flags="RW" width="2" name="BB_DDCPE_MMSE_DATA_WEIGHT_BANK2" comment="Data weight for MMSE DD-CPE"/>
    <register addr="a312005c" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_HE_BANK0" comment="Pilot weight for HE MMSE CPE"/>
    <register addr="a3120060" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_HE_BANK1" comment="Pilot weight for HE MMSE CPE"/>
    <register addr="a3120064" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_HE_BANK2" comment="Pilot weight for HE MMSE CPE"/>
    <register addr="a3120068" rw_flags="RW" width="4" name="BB_CPE_MMSE_WEIGHT_HE_BANK3" comment="Pilot weight for HE MMSE CPE"/>
    <register addr="a312006c" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_PILOT_WEIGHT_HE_BANK0" comment="Pilot weight for HE MMSE DD-CPE"/>
    <register addr="a3120070" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_PILOT_WEIGHT_HE_BANK1" comment="Pilot weight for HE MMSE DD-CPE"/>
    <register addr="a3120074" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_PILOT_WEIGHT_HE_BANK2" comment="Pilot weight for HE MMSE DD-CPE"/>
    <register addr="a3120078" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_PILOT_WEIGHT_HE_BANK3" comment="Pilot weight for HE MMSE DD-CPE"/>
    <register addr="a312007c" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_DATA_WEIGHT_HE_BANK0" comment="Data weight for HE MMSE DD-CPE"/>
    <register addr="a3120080" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_DATA_WEIGHT_HE_BANK1" comment="Data weight for HE MMSE DD-CPE"/>
    <register addr="a3120084" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_DATA_WEIGHT_HE_BANK2" comment="Data weight for HE MMSE DD-CPE"/>
    <register addr="a3120088" rw_flags="RW" width="4" name="BB_DDCPE_MMSE_DATA_WEIGHT_HE_BANK3" comment="Data weight for HE MMSE DD-CPE"/>
    <register addr="a312008c" rw_flags="RW" width="2" name="BB_MMSE_SYM_OFFSET" comment="Symbol Offset to skip MMSE-CPE"/>
    <register addr="a3120090" rw_flags="RW" width="4" name="BB_DDCPE_LLR_THRES_BCC" comment="DDCPE LLR threshold for BCC"/>
    <register addr="a3120098" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_CONFIG" comment="This register is used to control CE and CH smoothing"/>
    <register addr="a312009c" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_SNR_CONFIG" comment="This register is used to control SNR range for CH smoothing"/>
    <register addr="a31200a0" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_A" comment="Delay spread of SM filter sets(x 50nsec) for AWGN case (5bits x 6 SNR ranges)"/>
    <register addr="a31200a4" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_D" comment="Delay spread of SM filter sets(x 50nsec) for fading CH case (5bits x 6 SNR ranges)"/>
    <register addr="a31200a8" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_A_HE1X" comment="Delay spread of SM filter sets(x 50nsec) for HE1X AWGN case (5bits x 6 SNR ranges)"/>
    <register addr="a31200ac" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_A_HE2X" comment="Delay spread of SM filter sets(x 50nsec) for HE2X AWGN case (5bits x 6 SNR ranges)"/>
    <register addr="a31200b0" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_A_HE4X" comment="Delay spread of SM filter sets(x 50nsec) for HE4X AWGN case (5bits x 6 SNR ranges)"/>
    <register addr="a31200b4" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_D_HE1X" comment="Delay spread of SM filter sets(x 50nsec) for HE1X fading CH case (5bits x 6 SNR ranges)"/>
    <register addr="a31200b8" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_D_HE2X" comment="Delay spread of SM filter sets(x 50nsec) for HE2X fading CH case (5bits x 6 SNR ranges)"/>
    <register addr="a31200bc" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_D_HE4X" comment="Delay spread of SM filter sets(x 50nsec) for HE4X fading CH case (5bits x 6 SNR ranges)"/>
    <register addr="a31200c0" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF_HE1X" comment="Delay spread of SM filter sets(x 50nsec) for HE1X BFed case (5bits x 6 SNR ranges)"/>
    <register addr="a31200c4" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF_HE2X" comment="Delay spread of SM filter sets(x 50nsec) for HE2X BFed case (5bits x 6 SNR ranges)"/>
    <register addr="a31200c8" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF_HE4X" comment="Delay spread of SM filter sets(x 50nsec) for HE4X BFed case (5bits x 6 SNR ranges)"/>
    <register addr="a31200cc" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF0_A" comment="Delay spread of SM filter sets(x 50nsec) of Nsts1 for BFed AWGN case (5bits x 6 SNR ranges)"/>
    <register addr="a31200d0" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF1_A" comment="Delay spread of SM filter sets(x 50nsec) of Nsts2 for BFed AWGN case (5bits x 6 SNR ranges)"/>
    <register addr="a31200d4" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF0_D" comment="Delay spread of SM filter sets(x 50nsec) of Nsts1 for BFed fading CH case (5bits x 6 SNR ranges)"/>
    <register addr="a31200d8" rw_flags="RW" width="4" name="BB_CEST_SMOOTH_COEFF_BF1_D" comment="Delay spread of SM filter sets(x 50nsec) of Nsts2 for BFed fading CH case (5bits x 6 SNR ranges)"/>
    <register addr="a31200dc" rw_flags="RW" width="2" name="BB_CHDET" comment="Channel Type Detection"/>
    <register addr="a31200e0" rw_flags="RW" width="4" name="BB_CHVAR_THRES_INIT" comment="Channel variance threshold for L-LTF"/>
    <register addr="a31200e4" rw_flags="RW" width="4" name="BB_CHVAR_THRES_UPDATE_NONHE_SISO" comment="Channel variance threshold for (V)HT-LTF SISO"/>
    <register addr="a31200e8" rw_flags="RW" width="4" name="BB_CHVAR_THRES_UPDATE_NONHE_STBC" comment="Channel variance threshold for (V)HT-LTF STBC"/>
    <register addr="a31200ec" rw_flags="RW" width="4" name="BB_CHVAR_THRES_UPDATE_HE_SISO" comment="Channel variance threshold for HE-LTF SISO"/>
    <register addr="a31200f0" rw_flags="RW" width="4" name="BB_CHVAR_THRES_UPDATE_HE_STBC" comment="Channel variance threshold for HE-LTF STBC"/>
    <register addr="a31200f4" rw_flags="RW" width="2" name="BB_CHDELAY_INIT" comment="Channel delay for L-LTF"/>
    <register addr="a31200f8" rw_flags="RW" width="2" name="BB_CHDELAY_UPDATE_NONHE_SISO" comment="Channel delay for (V)HT-LTF SISO"/>
    <register addr="a31200fc" rw_flags="RW" width="2" name="BB_CHDELAY_UPDATE_NONHE_STBC" comment="Channel delay for (V)HT-LTF STBC"/>
    <register addr="a3120100" rw_flags="RW" width="2" name="BB_CHDELAY_UPDATE_HE_SISO" comment="Channel delay for HE-LTF SISO"/>
    <register addr="a3120104" rw_flags="RW" width="2" name="BB_CHDELAY_UPDATE_HE_STBC" comment="Channel delay for HE-LTF STBC"/>
    <register addr="a3120108" rw_flags="RW" width="2" name="BB_RX_CONFIG" comment="Receiver configuration"/>
    <register addr="a312010c" rw_flags="RW" width="1" name="BB_RX_PPUNC_CONFIG" comment="Preamble puncturing configuration"/>
    <register addr="a3120110" rw_flags="RW" width="4" name="BB_FTTRACK_CONFIG" comment="Frequnecy and time offset configuration"/>
    <register addr="a3120114" rw_flags="RW" width="2" name="BB_DEMAP_NOISE_VARIANCE" comment="DEMAP NOISE VARIANCE Forcing"/>
    <register addr="a3120118" rw_flags="RW" width="1" name="BB_DEMAP_NUDGE_GAIN_ADAPT" comment="When set, apply Radio nudge again"/>
    <register addr="a312011c" rw_flags="RW" width="4" name="BB_SAMP_OFFSET_CONFIG" comment="Sampling offset. Data symbols are sampled at a position -BB_SAMP_OFFSET with respect to                  the                 beginning of the data part of the symbol."/>
    <register addr="a3120120" rw_flags="RW" width="2" name="BB_VHT_SS1_RATE_MASK" comment="Control rejection of VHT 80MHz single spatial stream (or STBC) packets with certain rates"/>
    <register addr="a3120124" rw_flags="RW" width="1" name="BB_MRC_CONFIG_BASIC" comment="Control register to configure OFDM Maximum Ratio Combining and Basic MRC block"/>
    <register addr="a3120128" rw_flags="RW" width="2" name="BB_PTW70_CONFIG" comment="Setup to allow detection and control relating to packets with strong phase wobble such                  as                 those from PTW70 test equipment"/>
    <register addr="a3120134" rw_flags="RW" width="1" name="BB_QAM1024_ENABLE" comment="QAM1024 Support Enable"/>
    <register addr="a3120138" rw_flags="RW" width="1" name="BB_VHTBW20MCS9_SUPPORT" comment="VHT 20MHz MCS9 Support Enable"/>
    <register addr="a312013c" rw_flags="RW" width="4" name="BB_IW_CONFIG" comment="IW Configuration registers"/>
    <register addr="a3120140" rw_flags="RW" width="1" name="BB_VLTF_SNR_FORCING" comment="Update VHT/HE LTF SNR"/>
    <register addr="a3120144" rw_flags="RW" width="1" name="BB_EN_NUDGEAGAIN" comment="Nudges AGC to calculate gain again at HT-STF, VHT-STF, HE-STF symbols"/>
    <register addr="a3120148" rw_flags="RW" width="4" name="BB_LTF_POS_REF" comment="LTF position reference"/>
    <register addr="a312014c" rw_flags="RW" width="2" name="BB_LPE_CONFIG" comment="Linear phase estimation configuration"/>
    <register addr="a3120150" rw_flags="RW" width="1" name="BB_FFT_SCALE_CONFIG" comment="FFT scale configuration"/>
    <register addr="a3120154" rw_flags="RW" width="2" name="BB_DEMAP_Q_ADJ_EVM" comment="adjust LLRQ using the difference between EVM and SNR"/>
    <register addr="a3120158" rw_flags="RW" width="4" name="BB_DEMAP_QFAC_OFFSET" comment="Offset for range extension of Qfactor in AWGN/FADING"/>
    <register addr="a312015c" rw_flags="RW" width="4" name="BB_DEMAP_QFAC_SISO_BCC_AWGN" comment="DEMAP SISO BCC AWGN QFAC configuration"/>
    <register addr="a3120160" rw_flags="RW" width="2" name="BB_DEMAP_QFAC_SISO_BCC_FADING" comment="DEMAP SISO BCC FADING QFAC configuration"/>
    <register addr="a3120164" rw_flags="RW" width="4" name="BB_DEMAP_QFAC_SISO_BCC_FADING_MCS7" comment="DEMAP SISO BCC FADING MCS7 QFAC configuration"/>
    <register addr="a3120168" rw_flags="RW" width="4" name="BB_DEMAP_QFAC_SISO_BCC_FADING_MCS8" comment="DEMAP SISO BCC FADING MCS8 QFAC configuration"/>
    <register addr="a312016c" rw_flags="RW" width="4" name="BB_DEMAP_QFAC_SISO_BCC_FADING_MCS9" comment="DEMAP SISO BCC FADING MCS9 QFAC configuration"/>
    <register addr="a31201b4" rw_flags="RW" width="1" name="BB_DEMAP_QFAC_MUMIMO" comment="Q-factor LUT for MU-MIMO"/>
    <register addr="a3120224" rw_flags="RW" width="2" name="BB_BBA_FREQ_OFFSET_MASK_CFG_MA_SC_20M" comment="Reduce the reliability of soft decision on the most affected subcarriers for 20/40MHz                  bandwidth (1 2 3 or -1 -2 -3, when offset frequency is positive,, it corresponds to -1 -2 and -3"/>
    <register addr="a3120228" rw_flags="RW" width="2" name="BB_BBA_FREQ_OFFSET_MASK_CFG_LA_SC_20M" comment="Reduce the reliability of soft decision on the less affected subcarriers for 20/40MHz                  bandwidth (1 2 3 or -1 -2 -3, when offset frequency is positive,, it corresponds to 1 2 and 3"/>
    <register addr="a312022c" rw_flags="RW" width="2" name="BB_SOFT_WEIGH_FREQ_OFFSET_HIGH_THRESH_20M_40M" comment="the high threshold value for frequency offset in soft weigh for 20/40MHz bandwidth, it                  is derived by 122 KHz/20 MHz * 2^16"/>
    <register addr="a3120230" rw_flags="RW" width="2" name="BB_SOFT_WEIGH_FREQ_OFFSET_LOW_THRESH_20M_40M" comment="the low threshold value for frequency offset in soft weigh for 20/40MHz bandwidth, it                  is derived by 50 KHz/20 MHz * 2^16"/>
    <register addr="a3120234" rw_flags="RW" width="2" name="BB_DEMAP_LLR_DOWN" comment="DEMAP LLR DOWN configuration"/>
    <register addr="a3120238" rw_flags="RW" width="4" name="BB_CTRACK_CONFIG" comment="Receiver configuration"/>
    <register addr="a312023c" rw_flags="RW" width="2" name="BB_CTRACK_MODE_CONFIG" comment="Receiver configuration"/>
    <register addr="a3120240" rw_flags="RW" width="1" name="BB_IW_EN_CONFIG" comment="IW Enable Config"/>
    <register addr="a3120244" rw_flags="RW" width="1" name="BB_SUB_IW_CONFIG" comment="SubBand interfere Whitening Config"/>
    <register addr="a3120248" rw_flags="RW" width="1" name="BBA_RX_TYPE_DET_THRES" comment="Frame type detection weight"/>
    <register addr="a3120254" rw_flags="RW" width="1" name="BB_HE_MU_MIMO_SUPPORT" comment="HE MU-MIMO support enabled in receiver"/>
    <register addr="a3120258" rw_flags="RW" width="2" name="BB_HE_SINGLE_BSS_BRC_STA_ID" comment="Single BSS Broadcasting STA ID"/>
    <register addr="a312025c" rw_flags="RW" width="2" name="BB_HE_UNASSOCIATED_BRC_STA_ID" comment="Unassociated Broadcasting STA ID"/>
    <register addr="a3120260" rw_flags="RW" width="2" name="BB_HE_MULTI_BSS_BRC_STA_ID" comment="Multi-BSS Broadcasting STA ID"/>
    <register addr="a3120264" rw_flags="RW" width="2" name="BB_HE_MU_STA_ID" comment="HE MU MY STA ID"/>
    <register addr="a3120268" rw_flags="RW" width="2" name="BB_HE_UNASSIGNED_RU_STA_ID" comment="Unassigned RU STA ID"/>
    <register addr="a312026c" rw_flags="RW" width="1" name="BB_HE_MY_STA_ID_PRIORITY" comment="HE My Sta Id Priority"/>
    <register addr="a3120270" rw_flags="RW" width="1" name="BB_HE_SINGLE_BSS_BRC_PRIORITY" comment="HE Single BSS Broadcasting Priority"/>
    <register addr="a3120274" rw_flags="RW" width="1" name="BB_HE_MULTI_BSS_BRC_PRIORITY" comment="HE Multi-BSS Broadcasting Priority"/>
    <register addr="a3120278" rw_flags="RW" width="1" name="BB_HE_UNASSOCIATED_BRC_PRIORITY" comment="HE unassociated Broadcasting Priority"/>
    <register addr="a312027c" rw_flags="RW" width="1" name="BB_HE_TB_BANDWIDTH_SEL" comment="HE TB Vector BW or packet BW selection"/>
    <register addr="a3120280" rw_flags="RW" width="1" name="BB_HE_TB_FORCING" comment="HE TB FORCING"/>
    <register addr="a3120284" rw_flags="RW" width="1" name="BB_RX_HE_SIGA_DUAL_DECODING" comment="Change the packet type to HE-ER and continues signal field decoding                if HE-SIGA sanity check fails for HE-MU packet"/>
    <register addr="a3120288" rw_flags="RW" width="1" name="BB_VHT_SIGB_COMB_EN" comment="VHT SIGB combine enabled in receiver"/>
    <register addr="a312028c" rw_flags="RW" width="4" name="BB_RX_CRC_ABORT_CONFIG" comment="Receiver configuration for sig crc aborting"/>
    <register addr="a3120290" rw_flags="RW" width="1" name="BBA_RX_DEBUG" comment="Rx path debug controls"/>
    <register addr="a3120294" rw_flags="RW" width="1" name="BB_SYNC_LSIG_CHECK_EN" comment="L-SIG Validation Check En"/>
    <register addr="a3120298" rw_flags="RW" width="1" name="BB_SYNC_LSIG_CHECK_THR" comment="L-SIG Validation Check Threshold"/>
    <register addr="a312029c" rw_flags="RW" width="4" name="BB_NON_HE_ERR_MASK" comment="Control rejection of Non-He Error"/>
    <register addr="a31202a0" rw_flags="RW" width="4" name="BB_HE_ERR_MASK" comment="Control rejection of He Error"/>
    <register addr="a31202a4" rw_flags="R" width="4" name="BB_IEEE_ERR_STATUS0" comment="ieee decoder error status0"/>
    <register addr="a31202a8" rw_flags="R" width="4" name="BB_IEEE_ERR_STATUS1" comment="ieee decoder error status1"/>
    <register addr="a31202ac" rw_flags="R" width="4" name="BB_IEEE_ERR_STATUS2" comment="ieee decoder error status2"/>
    <register addr="a31202b0" rw_flags="RW" width="1" name="BB_RX_CONV_BRANCH_METRIC_FORCING" comment="Forcing branch metric to max value if certain bit field is invalid             according to each signal field configuration(LSIG and HE-SIGA)"/>
    <register addr="a31202b4" rw_flags="R" width="2" name="BB_PACK_CTRL_STATES" comment="Value of Rx Packet Controller State Machines"/>
    <register addr="a31202b8" rw_flags="RW" width="1" name="BB_SIGB_SEGPARS" comment="Enable VHTSIGB Segment parsing and deparsing in Transmitter and Receiver"/>
    <register addr="a31202bc" rw_flags="RW" width="1" name="BB_LTF_SNR_CONFIG" comment="LTF SNR calculation configuration"/>
    <register addr="a31202c0" rw_flags="RW" width="2" name="BB_LTF_UPDATE_BAND_MAP" comment="Update BandMap in Sig_Quality for HE preamble puncturing"/>
    <register addr="a31202c4" rw_flags="RW" width="2" name="BB_EVM_CONFIG" comment="Sig-quality configuration"/>
    <register addr="a31202c8" rw_flags="RW" width="1" name="BB_DISABLE_NUDGE_GAIN" comment="Nudge Gain Disable"/>
    <register addr="a31202cc" rw_flags="RW" width="2" name="BB_RX_MISC_CONFIG" comment="Receiver config bits"/>
    <register addr="a31202d0" rw_flags="RW" width="2" name="BB_MIMO_RATE_MASK" comment="Control rejection of HT and VHT 40MHz packets with certain MIMO rates"/>
    <register addr="a31202d4" rw_flags="RW" width="2" name="BB_VHT_SS2_RATE_MASK" comment="Control rejection of VHT two spatial stream packets with certain rates"/>
    <register addr="a31202d8" rw_flags="RW" width="1" name="BB_CPE_PHASE_REG_EN" comment="Enables the phase reg calculations in RTL"/>
    <register addr="a31202dc" rw_flags="RW" width="2" name="BB_FREQ_TRACK_REG_EN" comment="Enables the frequency reg calculations in RTL, used only for diagnostic purposes"/>
    <register addr="a31202e0" rw_flags="RW" width="2" name="BB_RX_SIG_DET_THRES_SNR0" comment="if sig quality snr sum is smaller than rl sig det snr0, scale value0 will set second priority"/>
    <register addr="a31202e4" rw_flags="RW" width="2" name="BB_RX_SIG_DET_THRES_SNR1" comment="if sig quality snr sum is smaller than rl sig det snr1, scale value1 will set second priority"/>
    <register addr="a31202e8" rw_flags="RW" width="2" name="BB_RX_SIG_DET_THRES_SNR2" comment="if sig quality snr sum is larger than rl sig det snr2, scale value3 will set third priority"/>
    <register addr="a31202ec" rw_flags="RW" width="1" name="BB_RX_SIG_DET_THRES_SCALE0" comment="if sig quality snr sum is smaller than rl sig det snr0, scale value0 will set second priority"/>
    <register addr="a31202f0" rw_flags="RW" width="1" name="BB_RX_SIG_DET_THRES_SCALE1" comment="if sig quality snr sum is smaller than rl sig det snr1, scale value1 will set second priority"/>
    <register addr="a31202f4" rw_flags="RW" width="1" name="BB_RX_SIG_DET_THRES_SCALE2" comment="else, scale value2 will set"/>
    <register addr="a31202f8" rw_flags="RW" width="1" name="BB_RX_SIG_DET_THRES_SCALE3" comment="if sig quality snr sum is larger than rl sig det snr2, scale value3 will set third priority"/>
    <register addr="a31202fc" rw_flags="RW" width="1" name="BB_RX_SIG_DET_BAND_EDGE_WEIGHT_EN" comment="Weight Enable for band edge sub carriers"/>
    <register addr="a3120300" rw_flags="RW" width="2" name="BB_RX_SIG_DET_RESERVED" comment="Reserved register"/>
    <register addr="a3120304" rw_flags="RW" width="1" name="BB_RX_SIG_DET_NON_HT_CONFIRM_OFF" comment="0: if clear non ht, rl sig det will be stop 1: rl sig det will always operate when the fft is valid "/>
    <register addr="a3120308" rw_flags="RW" width="4" name="BB_GID_MEMBERSHIP_L" comment="Membership status array"/>
    <register addr="a312030c" rw_flags="RW" width="4" name="BB_GID_MEMBERSHIP_H" comment="Membership status array"/>
    <register addr="a3120310" rw_flags="RW" width="4" name="BB_GID_USERPOSITION_LL" comment="User Position Array 2 bits"/>
    <register addr="a3120314" rw_flags="RW" width="4" name="BB_GID_USERPOSITION_LH" comment="User Position Array 2 bits"/>
    <register addr="a3120318" rw_flags="RW" width="4" name="BB_GID_USERPOSITION_HL" comment="User Position Array 2 bits"/>
    <register addr="a312031c" rw_flags="RW" width="4" name="BB_GID_USERPOSITION_HH" comment="User Position Array 2 bits"/>
    <register addr="a3120320" rw_flags="RW" width="1" name="BB_IEEE_NDP_CTRL" comment="NDP Decision Method Control"/>
    <register addr="a3120340" rw_flags="RW" width="4" name="BB_RX_POWER_SAVE_MODE" comment="For applying power save mode"/>
    <register addr="a3120344" rw_flags="R" width="4" name="BB_CEST_SMOOTH_CH_DELAY_SPREAD[0]" comment="This register is used to write estimated channel delay spread value of nsec"/>
    <register addr="a3120348" rw_flags="R" width="2" name="BB_CPE_PHASE_MAX[0]" comment="Maximum CPE phase of a frame over all symbols"/>
    <register addr="a312034c" rw_flags="R" width="2" name="BB_CPE_PHASE_MIN[0]" comment="Minimum CPE phase of a frame over all symbols"/>
    <register addr="a3120350" rw_flags="R" width="2" name="BB_CPE_PHASE_ACCUM[0]" comment="Phase accumulation of all symbol phase of the frame"/>
    <register addr="a3120354" rw_flags="R" width="2" name="BB_CPE_PHASE_SQR_ACCUM[0]" comment="Accumulation of phase square over all symbols of the frame"/>
    <register addr="a3120358" rw_flags="R" width="2" name="BB_CPE_PHASE_DIFF_ACCUM[0]" comment="Accumulation of phase difference over all symbols of the frame"/>
    <register addr="a312035c" rw_flags="R" width="2" name="BB_CPE_NUM_ACCUM[0]" comment="Number of phases accumulated in the accumulation registers"/>
    <register addr="a3120360" rw_flags="R" width="2" name="BB_FREQ_TRACK_MAX[0]" comment="Maximum fine frequency of a frame over all symbols"/>
    <register addr="a3120364" rw_flags="R" width="2" name="BB_FREQ_TRACK_MIN[0]" comment="Minimum fine frequency of a frame over all symbols"/>
    <register addr="a3120368" rw_flags="R" width="4" name="BB_FREQ_TRACK_ACCUM[0]" comment="Fine frequency accumulation of all symbol phase of the frame"/>
    <register addr="a312036c" rw_flags="R" width="4" name="BB_FREQ_TRACK_SQR_ACCUM[0]" comment="Accumulation of fine frequency square over all symbols of the frame"/>
    <register addr="a3120370" rw_flags="R" width="2" name="BB_FREQ_TRACK_NUM_ACCUM[0]" comment="Number of fine frequency accumulated in the accumulation registers"/>
    <register addr="a3120374" rw_flags="R" width="2" name="BB_FREQ_TRACK_NUM_SAT[0]" comment="Number of fine frequency saturated (signed 11bits) in the accumulation registers"/>
    <register addr="a3120378" rw_flags="R" width="2" name="BB_FREQ_TRACK_FREQ_AVG[0]" comment="Number of fine frequency error averaged based on Symbol-by symbol"/>
    <register addr="a312037c" rw_flags="R" width="1" name="BBA_RX_FIFO_OFLOW[0]" comment="Buffer overflows. Unexpected, but not fatal. Should be investigated"/>
    <register addr="a3120380" rw_flags="R" width="4" name="BBA_RX_DC_OFFSET[0]" comment="DC Offset removed at input to BBA RX"/>
    <register addr="a3120384" rw_flags="R" width="4" name="BBA_RX_BAND_DC_OFFSET[0][0]" comment="DC Offset removed at from band in BBA RX"/>
    <register addr="a3120388" rw_flags="R" width="1" name="BB_EVM_DB_SUB_20M[0][0]" comment="SUBIW log scale EVM value"/>
    <register addr="a31203c4" rw_flags="RW" width="4" name="BB_RX_PAYLOAD_DET_CONFIG[0]" comment="Payload detection filter configurations"/>
    <register addr="a31203c8" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG1[0]" comment="synchronizer configuration"/>
    <register addr="a31203cc" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG2[0]" comment="synchronizer configuration"/>
    <register addr="a31203d0" rw_flags="RW" width="4" name="BB_RX_SYNC_STF_THRESH_NRX[0]" comment="Threshold for STF detection for 1st 20MHz subband, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203d4" rw_flags="RW" width="4" name="BB_RX_SYNC_STF_THRESH2_NRX[0]" comment="Threshold for STF detection for 2nd 20MHz subband, STF correlation is compared to STF_THRESH + 300,                 Default value depends on combining mode."/>
    <register addr="a31203d8" rw_flags="RW" width="4" name="BB_RX_SYNC_STF_THRESH3_NRX[0]" comment="Threshold for STF detection for 3rd 20MHz subband, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203dc" rw_flags="RW" width="4" name="BB_RX_SYNC_STF_THRESH4_NRX[0]" comment="Threshold for STF detection for 4th 20MHz subband, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203e0" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_STF_THRESH_NRX[0]" comment="Threshold for STF detection, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203e4" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_STF_THRESH2_NRX[0]" comment="Threshold for STF detection, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203e8" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_STF_THRESH3_NRX[0]" comment="Threshold for STF detection, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203ec" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_STF_THRESH4_NRX[0]" comment="Threshold for STF detection, STF correlation is compared to STF_THRESH + 300,                Default value depends on combining mode."/>
    <register addr="a31203f0" rw_flags="RW" width="2" name="BB_RX_SYNC_LTF_THRESH[0]" comment="Threshold for LTF detection, LTF matched filter output is compared to it."/>
    <register addr="a31203f4" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG3[0]" comment="synchronizer configuration"/>
    <register addr="a31203f8" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG4[0]" comment="synchronizer configuration in PoP"/>
    <register addr="a31203fc" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_CCA_THRESH_NRX[0]" comment="STF autocorrelation amplitude threshold for CCA detection"/>
    <register addr="a3120400" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_AGC_LOCK_THRESH_NRX[0]" comment="STF autocorrelation amplitude threshold for AGC LOCK detection"/>
    <register addr="a3120404" rw_flags="RW" width="4" name="BB_RX_SYNC_CCA_THRESH_NRX[0]" comment="Threshold for CCA-CS. It is compared to partial STF correlation"/>
    <register addr="a3120408" rw_flags="RW" width="4" name="BB_RX_SYNC_AGC_LOCK_THRESH_NRX[0]" comment="Threshold for AGC lock when AGC_LOCK_SEL is set to 1. It is compared to partial STF correlation"/>
    <register addr="a312040c" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG8[0]" comment="Lower limit on quantization to avoid excessive AGC action"/>
    <register addr="a3120410" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG9[0]" comment="High limit on quantization to avoid excessive AGC action"/>
    <register addr="a3120414" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG10[0]" comment="Number of samples to advance the start the LTF search window"/>
    <register addr="a3120418" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG11[0]" comment="synchronizer configuration"/>
    <register addr="a312041c" rw_flags="RW" width="2" name="BB_RX_SYNC_NONPRIM_BAND_THR[0]" comment="the minimum threshold, above which a local peak is considered as possible peak                 if maximum peak exceeds another threshold"/>
    <register addr="a3120420" rw_flags="RW" width="2" name="BB_RX_SYNC_PRIM_BAND_THR[0]" comment="Band detection threshold for primary band"/>
    <register addr="a3120424" rw_flags="RW" width="2" name="BB_RX_SYNC_SEC80_BAND_THR[0]" comment="Band detection threshold for primary band"/>
    <register addr="a3120428" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG12[0]" comment="synchronizer configuration for new new STBC sync"/>
    <register addr="a312042c" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG13[0]" comment="synchronizer configuration for new new STBC sync"/>
    <register addr="a3120430" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG15[0]" comment="Threshold for comparing the combined STF correlation"/>
    <register addr="a3120434" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG16[0]" comment=" Threshold for comparing the combined STF correlation"/>
    <register addr="a3120438" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG17[0]" comment=" 40MHz sync split filter"/>
    <register addr="a312043c" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG18[0]" comment=" 80MHz sync split filter"/>
    <register addr="a3120440" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG19[0]" comment="Configuration for detection logic for CCA primary and secondary"/>
    <register addr="a3120444" rw_flags="RW" width="1" name="BB_RX_SYNC_CONFIG20[0]" comment="STF sync detector configuration"/>
    <register addr="a3120448" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG21[0]" comment="STF sync configuration with spare bits"/>
    <register addr="a312044c" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG22[0]" comment=" 160MHz sync split filter"/>
    <register addr="a3120450" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG23[0]" comment=" 160MHz sync split filter"/>
    <register addr="a3120454" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG24[0]" comment=" 160MHz sync split filter"/>
    <register addr="a3120458" rw_flags="RW" width="4" name="BB_RX_SYNC_CONFIG25[0]" comment=" 160MHz sync split filter"/>
    <register addr="a312045c" rw_flags="RW" width="2" name="BB_RX_SYNC_CONFIG26[0]" comment=" 160MHz sync split filter"/>
    <register addr="a3120460" rw_flags="RW" width="4" name="BB_RX_SYNC_THR_CORR_STF_P20_NRX1[0]" comment="Threshold for coherent integration of Primary Band STF autocorr."/>
    <register addr="a3120464" rw_flags="RW" width="4" name="BB_RX_SYNC_THR_CORR_STF_P20_NRX2[0]" comment="Threshold for coherent integration of Primary Band STF autocorr."/>
    <register addr="a3120468" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_THR_CORR_STF_P20_NRX1[0]" comment="Threshold for coherent integration of Primary Band STF autocorr and PoP"/>
    <register addr="a312046c" rw_flags="RW" width="4" name="BB_RX_SYNC_POP_THR_CORR_STF_P20_NRX2[0]" comment="Threshold for coherent integration of Primary Band STF autocorr and PoP"/>
    <register addr="a3120470" rw_flags="RW" width="1" name="BB_RX_SYNC_CONFIG29[0]" comment="Some options for SYNC"/>
    <register addr="a3120474" rw_flags="RW" width="4" name="BB_RX_SYNC_NOTCH1[0]" comment="Tone notch configuration"/>
    <register addr="a3120478" rw_flags="RW" width="4" name="BB_RX_SYNC_NOTCH2[0]" comment="Tone notch configuration"/>
    <register addr="a312047c" rw_flags="RW" width="4" name="BB_RX_SYNC_NOTCH3[0]" comment="Tone notch configuration"/>
    <register addr="a3120480" rw_flags="RW" width="4" name="BB_RX_SYNC_NOTCH4[0]" comment="Tone notch configuration"/>
    <register addr="a3120484" rw_flags="RW" width="1" name="BB_SYNC_LTF_WEIGHT_COMBINE_MODE[0]" comment="LTF MF weighted combine mode 0: no weight, 1:Bc0+0.75xBc0, 2:Bc0+0.625Bc0, 3:Bc0+0.5Bc0"/>
    <register addr="a3120488" rw_flags="RW" width="2" name="BB_RX_SYNC_LTF_SEL_DIV_OFFSET[0]" comment="Adaptive Rx combine of LTF matched filter based on STF correlation value"/>
    <register addr="a312048c" rw_flags="RW" width="4" name="BB_RX_SYNC_FORCING_BANDS_USED_OUT[0]" comment="Forcing BANDS_USED_OUT value"/>
    <register addr="a3120490" rw_flags="RW" width="1" name="BB_RX_SYNC_PHY_TEST_ONLY[0]" comment="For checking SyncLockFail error log"/>
    <register addr="a3120494" rw_flags="RW" width="1" name="BB_RX_SYNC_LTF_THR_COEFFI[0]" comment="For adjusting ltf_detect threshold (p2Threshold)"/>
    <register addr="a3120498" rw_flags="RW" width="1" name="BB_RX_SYNC_TWEAK[0]" comment="For adjusting ltf_autocorr tweak in BW8080"/>
    <register addr="a312049c" rw_flags="RW" width="4" name="BB_RX_SYNC_RESOLVED[0]" comment="For exception handling"/>
    <register addr="a31204a0" rw_flags="RW" width="4" name="BB_RX_ENERGY_DET_THRESHOLD[0][0]" comment="RX energy detection threshold for each 20MHz band"/>
    <register addr="a31204c0" rw_flags="RW" width="2" name="BB_RX_DESENSE_THRESHOLD[0]" comment="RX desensitization threshold"/>
    <register addr="a31204c4" rw_flags="RW" width="4" name="BB_CCA_CFG[0]" comment="Energy detection configuration bits"/>
    <register addr="a31204c8" rw_flags="RW" width="2" name="BB_CCA_ENERGY_LEAKAGE[0]" comment="Used to compensate the ammount of energy leakage in each 20MHz band"/>
    <register addr="a31204cc" rw_flags="RW" width="1" name="BB_CCA_AGC_DELAY_SEL[0]" comment="Applies AGC gain to CCA after a delay of 0: no delay; 1-12: from 1 to 12 20MHz clock cycles"/>
    <register addr="a31204d0" rw_flags="RW" width="2" name="BB_CCA_AGC_OFFSET[0]" comment="Signed offset added to the AGC input to the Energy Detect to compensate for             different AGC gain ranges in S61X, S620"/>
    <register addr="a31204d4" rw_flags="RW" width="1" name="BB_RX_RADIO_CS_CONFIG[0]" comment="RX Radio CS detection configuration for 80MHz bandwidth"/>
    <register addr="a31204d8" rw_flags="RW" width="2" name="BB_CCA_SENSE_CONTROL[0]" comment="Used to igonre signal power when signal power is not enough high to reduce false alarm"/>
    <register addr="a31204dc" rw_flags="RW" width="2" name="BB_CCA_JUMP_DETECTION_CONFIG[0]" comment="configuration registers used for OFDM jump detection"/>
    <register addr="a31204e0" rw_flags="RW" width="4" name="BB_RX_JUMP_DET_RSSI_LIMIT[0]" comment="The Jump Detection should be valid only when the RSSI value is within a particular range"/>
    <register addr="a31204e4" rw_flags="RW" width="2" name="BB_CCA_LOW_ENERGY_DETECTION_CONFIG[0]" comment="configuration register to monitor the Prim20 band and see if the energy falls below a threshold"/>
    <register addr="a31204e8" rw_flags="RW" width="2" name="BB_RX_BT_COEX_RX_TRACKING_CONFIG[0]" comment="RX BT coex traking configuration"/>
    <register addr="a31204ec" rw_flags="R" width="4" name="BBA_RX_FTM_INFO_0[0]" comment="Capture Rx FTM Information"/>
    <register addr="a31204f0" rw_flags="R" width="2" name="BBA_RX_FTM_INFO_1[0]" comment="Capture Rx FTM Information"/>
    <register addr="a31204f4" rw_flags="R" width="4" name="BBA_RX_FTM_INFO_2[0]" comment="Capture Rx FTM Information"/>
    <register addr="a31204f8" rw_flags="R" width="4" name="BB_CEST_NDP_EST[0]" comment="Data for NDP channel estimation"/>
    <register addr="a31204fc" rw_flags="R" width="4" name="BB_EVM_SYM_MONITOR[0]" comment="EVM value of the current Data Symbol for monitoring"/>
    <register addr="a3120500" rw_flags="R" width="4" name="BB_EVM_MAX_SYM_MONITOR[0]" comment="The Maximum EVM value to the current Data Symbol in a Packet for monitoring"/>
    <register addr="a3120504" rw_flags="R" width="4" name="BB_EVM_MIN_SYM_MONITOR[0]" comment="The Minimum EVM value to the current Data Symbol in a Packet for monitoring"/>
    <register addr="a31206d8" rw_flags="RW" width="4" name="BBA_BF_TX_CONFIG" comment="TX beamforming configuration. For most fields, only teh Tx Path 0 register is used"/>
    <register addr="a31206ec" rw_flags="RW" width="1" name="BBA_TX_CONFIG" comment="Config for Tx filtering stages"/>
    <register addr="a31206f0" rw_flags="R" width="4" name="BBA_TX_CTRL_STATES[0]" comment="Tx control state machines"/>
    <register addr="a31206f8" rw_flags="RW" width="4" name="BBA_TX_DEBUG" comment="Tx path debug controls"/>
    <register addr="a31206fc" rw_flags="RW" width="4" name="BBA_TX_DPD_TRAINING" comment="Config for Tx filtering stages"/>
  </block>
  <block name="wl_bbb" comment="Wireless LAN CCK modem registers">
    <register addr="a3130000" rw_flags="RW" width="1" name="BBB_TX_PKT_CONFIG" comment="Configuration to disable standards-required features. Do not change this register."/>
    <register addr="a3130004" rw_flags="RW" width="2" name="BBB_TX_MOD_CONFIG" comment=""/>
    <register addr="a3130008" rw_flags="RW" width="4" name="BBB_TX_FILTER_CONFIG" comment="Transmit 40-to-44 MHz filter"/>
    <register addr="a313000c" rw_flags="RW" width="4" name="BBB_TX_FILTER_SRRC[0]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130010" rw_flags="RW" width="4" name="BBB_TX_FILTER_SRRC[1]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130014" rw_flags="RW" width="4" name="BBB_TX_FILTER_SRRC[2]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130018" rw_flags="RW" width="4" name="BBB_TX_FILTER_SRRC[3]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130024" rw_flags="R" width="1" name="BBB_TX_PKT_STATUS" comment="CCK transmitter state machine current state"/>
    <register addr="a3130028" rw_flags="RW" width="4" name="BBB_TX_DEBUG" comment="Tx path debug controls"/>
    <register addr="a313002c" rw_flags="RW" width="1" name="BBB_RX_PKT_CONFIG" comment=""/>
    <register addr="a3130030" rw_flags="RW" width="4" name="BBB_RX_FILTER_CONFIG" comment="40 to 44MHz resampling filter configurations"/>
    <register addr="a3130034" rw_flags="RW" width="4" name="BBB_RX_FILTER_SRRC[0]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130038" rw_flags="RW" width="4" name="BBB_RX_FILTER_SRRC[1]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a313003c" rw_flags="RW" width="4" name="BBB_RX_FILTER_SRRC[2]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130040" rw_flags="RW" width="4" name="BBB_RX_FILTER_SRRC[3]" comment="Signed 9-bit SRRC filter coefficients 0 to 11"/>
    <register addr="a3130044" rw_flags="RW" width="2" name="BBB_RX_AGC_CONFIG" comment=""/>
    <register addr="a3130048" rw_flags="RW" width="1" name="BBB_RX_AGC_GAIN_INIT" comment="Digital AGC initial gain, valid range: 0 (-2 dB) to 28 (16 dB), step size 0.5 dB"/>
    <register addr="a313004c" rw_flags="RW" width="2" name="BBB_RX_AGC_GAIN_LIMITS" comment=""/>
    <register addr="a3130050" rw_flags="RW" width="2" name="BBB_RX_AGC_TARGETS" comment=""/>
    <register addr="a3130058" rw_flags="RW" width="4" name="BBB_RX_SYNC_SYM_CONFIG" comment=""/>
    <register addr="a313005c" rw_flags="RW" width="4" name="BBB_RX_SYNC_SYM_CONFIG2" comment=""/>
    <register addr="a3130060" rw_flags="RW" width="1" name="BBB_RX_SYNC_SYM_CONFIG4" comment="More configuration related to CCK symbol synchronizer"/>
    <register addr="a3130084" rw_flags="RW" width="2" name="BBB_RX_SYNC_PKT_CONFIG" comment="Configures detection of SFD (Start Frame Delimiter), aka Packet Sync"/>
    <register addr="a3130088" rw_flags="RW" width="1" name="BBB_RX_SLICER_CONFIG" comment=""/>
    <register addr="a313008c" rw_flags="RW" width="2" name="BBB_RX_DESPREAD_CONFIG" comment=""/>
    <register addr="a3130090" rw_flags="RW" width="4" name="BBB_RX_DESPREAD_CONFIG2" comment=""/>
    <register addr="a3130094" rw_flags="RW" width="2" name="BBB_RX_FREQ_EST_CONFIG" comment=""/>
    <register addr="a3130098" rw_flags="RW" width="1" name="BBB_RX_CLKTRACK_CONFIG" comment=""/>
    <register addr="a313009c" rw_flags="RW" width="2" name="BBB_RX_ENERGY_DETECT_AGC_OFFSET" comment="Signed offset added to the AGC input to the Energy Detect to compensate for different AGC gain ranges in S61X, S620"/>
    <register addr="a31300a0" rw_flags="RW" width="4" name="BBB_RX_DESENSE_THRESHOLD" comment="RX desensitization threshold"/>
    <register addr="a31300a4" rw_flags="RW" width="2" name="BBB_CCA_CONFIG" comment="configuration registers used for CCK jump and low energy detection"/>
    <register addr="a31300a8" rw_flags="RW" width="4" name="BBB_RX_JUMP_DET_RSSI_LIMIT" comment="The Jump Detection should be valid only when the RSSI value is within a particular range"/>
    <register addr="a31300ac" rw_flags="RW" width="1" name="BBB_CCA_LOW_ENERGY_DETECTION_CONFIG" comment="Configuration register to monitor the selected band and see if the energy falls below a threshold"/>
    <register addr="a31300b0" rw_flags="RW" width="4" name="BBB_RX_JUMP_DET_CONFIG" comment="B Modem signal legacy jump detector configuration"/>
    <register addr="a31300b4" rw_flags="R" width="2" name="BBB_RX_SIGNAL_QUALITY" comment="bit 15:14: 11b PSDU rate; bit 13:8: Worst despread margin clipped to 63;              bit 7:0: SNR report based on average phase error during packet header"/>
    <register addr="a31300b8" rw_flags="R" width="4" name="BBB_RX_FREQ_ERROR" comment=""/>
    <register addr="a31300bc" rw_flags="R" width="2" name="BBB_RX_DESPREAD_MARGIN" comment="Worst despread correlation margin compared to second highest possibility, recorded after SFD sync"/>
    <register addr="a31300c0" rw_flags="R" width="1" name="BBB_RX_SLICE_MARGIN" comment="Worst slice phase margin recorded after SFD sync. Invalid if DFEQ is activated."/>
    <register addr="a31300c4" rw_flags="R" width="1" name="BBB_RX_SYNC_SCORE" comment="SFD sync soft decision score, based on phase error. Available regardless of SFD decision method."/>
    <register addr="a31300c8" rw_flags="R" width="1" name="BBB_RX_PKT_STATUS" comment="CCK receiver state machine current state"/>
    <register addr="a31300cc" rw_flags="R" width="1" name="BBB_RX_AGC_GAIN" comment="Currently applied digital AGC gain"/>
    <register addr="a31300d0" rw_flags="RW" width="1" name="BBB_SPARE1" comment="Unused spare register."/>
    <register addr="a31300d4" rw_flags="RW" width="1" name="BBB_SPARE2" comment="Unused spare register."/>
    <register addr="a31300d8" rw_flags="RW" width="1" name="BBB_RX_SYNC_SYM_BLANK_TIME" comment="Obsolete. Interval at start of CCK symbol detection time to blank if needed to avoid transient            effects after rx antenna switch in CCK switched diversity chop mode. Each unit of time is 1 microsec"/>
    <register addr="a31300dc" rw_flags="RW" width="4" name="BBB_RX_DEBUG" comment="Rx path debug controls"/>
  </block>
  <block name="wl_enc_dma_0" comment="Wireless LAN Encryption accelerator DMA registers for RAM interface version">
    <register addr="a4000000" rw_flags="W" width="1" name="ENC_DMA_INT_CLEAR_I0" comment="Clear interrupt status events."/>
    <register addr="a4000004" rw_flags="RW" width="1" name="ENC_DMA_INT_MASK_I0" comment="Disable interrupt sources if a mask bit is set to '1'."/>
    <register addr="a4000008" rw_flags="R" width="1" name="ENC_DMA_INT_CAUSE_I0" comment="Interrupt events status."/>
    <register addr="a400000c" rw_flags="RW" width="1" name="ENC_DMA_INT_DMA_DONE_COUNT_I0" comment="Number of DMA_DONE events required to generate a DMA_DONE interrupt event. 0 = 1 event required to generate interrupt. 255 = 256 events required to generate interrupt."/>
    <register addr="a4000010" rw_flags="R" width="1" name="ENC_DMA_INT_DMA_DONE_COUNT_STATUS_I0" comment="Current status of the number of DMA_DONE events since the last reset or interrupt clear."/>
    <register addr="a4000014" rw_flags="W" width="1" name="ENC_DMA_INT_DST_COUNT_SENT_CLEAR_I0" comment="Write '1' to clear the DST_COUNT interrupt event sent flag and allow subsequent DST_COUNT interrupts for the current DMA operation."/>
    <register addr="a4000018" rw_flags="RW" width="1" name="ENC_DMA_INT_CONFIG_I0" comment="Interrupt generation configuration."/>
    <register addr="a400001c" rw_flags="RW" width="1" name="ENC_DMA_RAW_NONCE_LENGTH_I0" comment="Length in bytes of the raw mode IV/Nonce."/>
    <register addr="a4000020" rw_flags="RW" width="1" name="ENC_DMA_RAW_AAD_LENGTH_I0" comment="Length in bytes of the raw mode AAD."/>
    <register addr="a4000024" rw_flags="RW" width="1" name="ENC_DMA_RAW_MIC_LENGTH_I0" comment="Length in bytes of the raw mode MIC output."/>
    <register addr="a4000028" rw_flags="RW" width="1" name="ENC_DMA_ENCR_TYPE_I0" comment="Encryption operation, one of:"/>
    <register addr="a400002c" rw_flags="RW" width="1" name="ENC_DMA_KEY_LENGTH_I0" comment="Encryption key length 128 or 256"/>
    <register addr="a4000030" rw_flags="RW" width="2" name="ENC_DMA_FRAME_LENGTH_I0" comment="Frame body length in octets"/>
    <register addr="a4000034" rw_flags="RW" width="1" name="ENC_DMA_HDR_LENGTH_I0" comment="Frame header length in octets"/>
    <register addr="a4000038" rw_flags="RW" width="1" name="ENC_DMA_ENC_CONFIG_I0" comment="Contains the following configuration bits:"/>
    <register addr="a400003c" rw_flags="RW" width="1" name="ENC_DMA_PRIORITY_OCTET_I0" comment="Priority octet used in TKIP MIC calculation. Set to zero in this case. For CCMP operation, bits set to 1 in this octet will be set to one in the Nonce Flags Octet. It should be set to 0x10 for Management frames but should be set to 0xFF for Cisco CCX S67 compatibility; it must be set to 0x0 otherwise. (Refer to 802.11w section 8.3.3.3.3)"/>
    <register addr="a4000040" rw_flags="RW" width="2" name="ENC_DMA_FC_MASK_I0" comment="Frame Control Mask. Determines which Frame Control bits are masked (i.e. included in the AAD calculation) in CCMP mode. Its default value is 0xC78F. (Refer to 802.11n section 8.3.3.3.2)"/>
    <register addr="a4000044" rw_flags="RW" width="1" name="ENC_DMA_AAD_QC_MASK_I0" comment="Additional Authentication Data QoS Control field mask value for CCMP encryption. Set to 0x0F unless both the STA and its peer have their SPP A-MSDU Capable fields set to 1. In that case, set to 0x8F.  (Refer to 802.11n section 8.3.3.3.2 g)"/>
    <register addr="a4000048" rw_flags="RW" width="2" name="ENC_DMA_CONFIG_I0" comment="Configuration settings for the DMA logic."/>
    <register addr="a400004c" rw_flags="RW" width="4" name="ENC_DMA_KEY_ADDRESS_I0" comment="Location in RAM address space of the encryption key to be used in single buffer mode."/>
    <register addr="a4000050" rw_flags="RW" width="4" name="ENC_DMA_SRC_BUFFER_START_ADDRESS_I0" comment="Start address of the source buffer in single buffer mode."/>
    <register addr="a4000054" rw_flags="RW" width="4" name="ENC_DMA_DST_BUFFER_START_ADDRESS_I0" comment="Start address of the destination buffer in single buffer mode."/>
    <register addr="a4000058" rw_flags="RW" width="4" name="ENC_DMA_SRC_BUFFER_LENGTH_I0" comment="Length of the source buffer in bytes in single buffer mode."/>
    <register addr="a400005c" rw_flags="RW" width="4" name="ENC_DMA_DST_BUFFER_LENGTH_I0" comment="Length of the destination buffer in bytes in single buffer mode."/>
    <register addr="a4000060" rw_flags="R" width="4" name="ENC_DMA_SRC_BUFFER_NEXT_I0" comment="Offset for the next operation. This is a result of (current operation start + length) % buffer end address."/>
    <register addr="a4000064" rw_flags="R" width="4" name="ENC_DMA_DST_BUFFER_NEXT_I0" comment="Offset for the next operation. This is a result of (current operation start + length) % buffer end address."/>
    <register addr="a4000068" rw_flags="RW" width="4" name="ENC_DMA_SET_SRC_BUFFER_NEXT_I0" comment="Set the offset for the next operation. This overrides the last hardware-calculated value."/>
    <register addr="a400006c" rw_flags="RW" width="4" name="ENC_DMA_SET_DST_BUFFER_NEXT_I0" comment="Set the offset for the next operation. This overrides the last hardware-calculated value."/>
    <register addr="a4000070" rw_flags="R" width="2" name="ENC_DMA_AUTO_DST_LENGTH_I0" comment="In auto length mode this shows the calculated length of the destination data written out."/>
    <register addr="a4000074" rw_flags="RW" width="2" name="ENC_DMA_FRAME_CONTROL_FIELD_I0" comment="In auto header length mode this is used to work out the length of the header."/>
    <register addr="a4000078" rw_flags="R" width="1" name="ENC_DMA_AUTO_HEADER_LENGTH_I0" comment="In auto header length mode this shows the calculated header length."/>
    <register addr="a400007c" rw_flags="RW" width="4" name="ENC_DMA_DESCRIPTOR_TABLE_START_ADDRESS_I0" comment="Start address of descriptor table. Write to update the external registers."/>
    <register addr="a4000080" rw_flags="RW" width="1" name="ENC_DMA_DESCRIPTOR_TABLE_LENGTH_I0" comment="Number of entries in the descriptor table. Each entry is 4 bytes long. This allows the table to be continuous and wrap around."/>
    <register addr="a4000084" rw_flags="RW" width="1" name="ENC_DMA_DESCRIPTOR_TABLE_ADD_I0" comment="Write a value to this register to indicate that more entries have been added to the descriptor table."/>
    <register addr="a4000088" rw_flags="R" width="4" name="ENC_DMA_DESCRIPTOR_TABLE_CURRENT_ADDRESS_I0" comment="Current address of the descriptor table."/>
    <register addr="a400008c" rw_flags="R" width="1" name="ENC_DMA_DESCRIPTOR_TABLE_ENTRY_COUNT_I0" comment="Count of entries currently in the descriptor table."/>
    <register addr="a4000090" rw_flags="RW" width="1" name="ENC_DMA_SKIP_OFFSET_SRC_I0" comment="The number of bytes to skip at the start of each descriptor table or single buffer mode operation. This is added to the current offset before beginning the operation. It applies to all operations, including straight DMA operations."/>
    <register addr="a4000094" rw_flags="RW" width="1" name="ENC_DMA_SKIP_OFFSET_DST_I0" comment="The number of bytes to skip at the start of each descriptor table or single buffer mode operation. This is added to the current offset before beginning the operation. It applies to all operations, including straight DMA operations."/>
    <register addr="a4000098" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[0]" comment="Scatter-gather list, Source block address."/>
    <register addr="a400009c" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[0]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a40000a0" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[0]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a40000a4" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[0]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a40000a8" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[1]" comment="Scatter-gather list, Source block address."/>
    <register addr="a40000ac" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[1]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a40000b0" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[1]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a40000b4" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[1]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a40000b8" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[2]" comment="Scatter-gather list, Source block address."/>
    <register addr="a40000bc" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[2]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a40000c0" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[2]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a40000c4" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[2]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a40000c8" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[3]" comment="Scatter-gather list, Source block address."/>
    <register addr="a40000cc" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[3]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a40000d0" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[3]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a40000d4" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[3]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a40000d8" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[4]" comment="Scatter-gather list, Source block address."/>
    <register addr="a40000dc" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[4]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a40000e0" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[4]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a40000e4" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[4]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a40000e8" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[5]" comment="Scatter-gather list, Source block address."/>
    <register addr="a40000ec" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[5]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a40000f0" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[5]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a40000f4" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[5]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a40000f8" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[6]" comment="Scatter-gather list, Source block address."/>
    <register addr="a40000fc" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[6]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a4000100" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[6]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a4000104" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[6]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a4000108" rw_flags="RW" width="4" name="ENC_DMA_SRC_START_ADDR_I0[7]" comment="Scatter-gather list, Source block address."/>
    <register addr="a400010c" rw_flags="RW" width="2" name="ENC_DMA_SRC_BLOCK_CONFIG_I0[7]" comment="Scatter-gather list, Source block configuration."/>
    <register addr="a4000110" rw_flags="RW" width="4" name="ENC_DMA_DST_START_ADDR_I0[7]" comment="Scatter-gather list, Destination block address low"/>
    <register addr="a4000114" rw_flags="RW" width="2" name="ENC_DMA_DST_BLOCK_CONFIG_I0[7]" comment="Scatter-gather list, Destination block configuration."/>
    <register addr="a4000118" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[0]" comment="Source list status - address."/>
    <register addr="a400011c" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[0]" comment="Source list status - length."/>
    <register addr="a4000120" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[0]" comment="Source list status - bypass."/>
    <register addr="a4000124" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[0]" comment="Source list status - wrappable."/>
    <register addr="a4000128" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[0]" comment="Source list status - address."/>
    <register addr="a400012c" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[0]" comment="Source list status - length."/>
    <register addr="a4000130" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[0]" comment="Source list status - bypass."/>
    <register addr="a4000134" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[0]" comment="Source list status - wrappable."/>
    <register addr="a4000138" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[1]" comment="Source list status - address."/>
    <register addr="a400013c" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[1]" comment="Source list status - length."/>
    <register addr="a4000140" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[1]" comment="Source list status - bypass."/>
    <register addr="a4000144" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[1]" comment="Source list status - wrappable."/>
    <register addr="a4000148" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[1]" comment="Source list status - address."/>
    <register addr="a400014c" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[1]" comment="Source list status - length."/>
    <register addr="a4000150" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[1]" comment="Source list status - bypass."/>
    <register addr="a4000154" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[1]" comment="Source list status - wrappable."/>
    <register addr="a4000158" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[2]" comment="Source list status - address."/>
    <register addr="a400015c" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[2]" comment="Source list status - length."/>
    <register addr="a4000160" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[2]" comment="Source list status - bypass."/>
    <register addr="a4000164" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[2]" comment="Source list status - wrappable."/>
    <register addr="a4000168" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[2]" comment="Source list status - address."/>
    <register addr="a400016c" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[2]" comment="Source list status - length."/>
    <register addr="a4000170" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[2]" comment="Source list status - bypass."/>
    <register addr="a4000174" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[2]" comment="Source list status - wrappable."/>
    <register addr="a4000178" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[3]" comment="Source list status - address."/>
    <register addr="a400017c" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[3]" comment="Source list status - length."/>
    <register addr="a4000180" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[3]" comment="Source list status - bypass."/>
    <register addr="a4000184" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[3]" comment="Source list status - wrappable."/>
    <register addr="a4000188" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[3]" comment="Source list status - address."/>
    <register addr="a400018c" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[3]" comment="Source list status - length."/>
    <register addr="a4000190" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[3]" comment="Source list status - bypass."/>
    <register addr="a4000194" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[3]" comment="Source list status - wrappable."/>
    <register addr="a4000198" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[4]" comment="Source list status - address."/>
    <register addr="a400019c" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[4]" comment="Source list status - length."/>
    <register addr="a40001a0" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[4]" comment="Source list status - bypass."/>
    <register addr="a40001a4" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[4]" comment="Source list status - wrappable."/>
    <register addr="a40001a8" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[4]" comment="Source list status - address."/>
    <register addr="a40001ac" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[4]" comment="Source list status - length."/>
    <register addr="a40001b0" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[4]" comment="Source list status - bypass."/>
    <register addr="a40001b4" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[4]" comment="Source list status - wrappable."/>
    <register addr="a40001b8" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[5]" comment="Source list status - address."/>
    <register addr="a40001bc" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[5]" comment="Source list status - length."/>
    <register addr="a40001c0" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[5]" comment="Source list status - bypass."/>
    <register addr="a40001c4" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[5]" comment="Source list status - wrappable."/>
    <register addr="a40001c8" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[5]" comment="Source list status - address."/>
    <register addr="a40001cc" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[5]" comment="Source list status - length."/>
    <register addr="a40001d0" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[5]" comment="Source list status - bypass."/>
    <register addr="a40001d4" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[5]" comment="Source list status - wrappable."/>
    <register addr="a40001d8" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[6]" comment="Source list status - address."/>
    <register addr="a40001dc" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[6]" comment="Source list status - length."/>
    <register addr="a40001e0" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[6]" comment="Source list status - bypass."/>
    <register addr="a40001e4" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[6]" comment="Source list status - wrappable."/>
    <register addr="a40001e8" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[6]" comment="Source list status - address."/>
    <register addr="a40001ec" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[6]" comment="Source list status - length."/>
    <register addr="a40001f0" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[6]" comment="Source list status - bypass."/>
    <register addr="a40001f4" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[6]" comment="Source list status - wrappable."/>
    <register addr="a40001f8" rw_flags="R" width="4" name="ENC_DMA_SRC_ADDR_STATUS_I0[7]" comment="Source list status - address."/>
    <register addr="a40001fc" rw_flags="R" width="2" name="ENC_DMA_SRC_LENGTH_STATUS_I0[7]" comment="Source list status - length."/>
    <register addr="a4000200" rw_flags="R" width="1" name="ENC_DMA_SRC_BYPASS_STATUS_I0[7]" comment="Source list status - bypass."/>
    <register addr="a4000204" rw_flags="R" width="1" name="ENC_DMA_SRC_WRAPPABLE_STATUS_I0[7]" comment="Source list status - wrappable."/>
    <register addr="a4000208" rw_flags="R" width="4" name="ENC_DMA_DST_ADDR_STATUS_I0[7]" comment="Source list status - address."/>
    <register addr="a400020c" rw_flags="R" width="2" name="ENC_DMA_DST_LENGTH_STATUS_I0[7]" comment="Source list status - length."/>
    <register addr="a4000210" rw_flags="R" width="1" name="ENC_DMA_DST_BYPASS_STATUS_I0[7]" comment="Source list status - bypass."/>
    <register addr="a4000214" rw_flags="R" width="1" name="ENC_DMA_DST_WRAPPABLE_STATUS_I0[7]" comment="Source list status - wrappable."/>
    <register addr="a4000218" rw_flags="RW" width="4" name="ENC_DMA_SG_SRC_PAUSE_BYTE_COUNT_I0" comment="Scatter-gather per-operation setting. The number of bytes to read from the source before halting and generating an interrupt (ENC_DMA_INT_SRC_PAUSE). This is the initial value captured when loading the SG registers on an ENC DMA start operation. This feature is disabled when this register is set to 0. "/>
    <register addr="a400021c" rw_flags="RW" width="1" name="ENC_DMA_SG_DST_COUNT_INT_EN_I0" comment="Scatter-gather per-operation setting. Set this to 1 to cause an interrupt when the bytes written to memory passes the threshold set in ENC_DMA_DST_COUNT_BYTE_COUNT. This is set once per DMA operation, not per scatter-gather list entry."/>
    <register addr="a4000220" rw_flags="RW" width="4" name="ENC_DMA_SRC_PAUSE_BYTE_COUNT_I0" comment="This is the override for the currently-active set in the SG operation queue. Writing to this *overwrites* the currently-active value inside the ENC DMA block. The value can be increased as required or set to 0. This feature is disabled when this register is set to 0. "/>
    <register addr="a4000224" rw_flags="R" width="4" name="ENC_DMA_SRC_PAUSE_BYTE_COUNT_ACTIVE_STATUS_I0" comment="The currently-active byte count at which the source reading will be paused."/>
    <register addr="a4000228" rw_flags="RW" width="4" name="ENC_DMA_DST_COUNT_BYTE_COUNT_I0" comment="The number of bytes to write to the destination before generating an interrupt (ENC_DMA_INT_DST_COUNT). The value can be increased as required. This feature is disabled when this register is set to 0. "/>
    <register addr="a400022c" rw_flags="R" width="4" name="ENC_DMA_SRC_BYTE_COUNT_STATUS_I0" comment="Count of the number of bytes read from RAM for the currently-active operation."/>
    <register addr="a4000230" rw_flags="R" width="4" name="ENC_DMA_DST_BYTE_COUNT_STATUS_I0" comment="Count of the number of bytes written to RAM for the currently-active operation."/>
    <register addr="a4000234" rw_flags="RW" width="1" name="ENC_DMA_STROBE_I0" comment="Write to individual bits in thie register to perform various operations. Only one bit whould be set at a time."/>
    <register addr="a4000238" rw_flags="R" width="1" name="ENC_DMA_QUEUE_STATUS_I0" comment="Indicates the number of operations completed. Software must read this number before programming any configuration registers, and may write configuration registers only when this number is less than 2 (in SG mode)."/>
    <register addr="a400023c" rw_flags="R" width="2" name="ENC_DMA_OPERATION_STATUS_I0" comment="Indicates the outcome of the corresponding encryption operation."/>
    <register addr="a4000240" rw_flags="R" width="2" name="ENC_DMA_STATE_I0" comment="DMA current state for debug purposes"/>
    <register addr="a4000244" rw_flags="R" width="1" name="ENC_DMA_RAM_CTRL_STATE_I0" comment="DMA current state for debug purposes"/>
    <register addr="a4000248" rw_flags="R" width="2" name="ENC_DMA_STATE_FIFOS_I0" comment="DMA current state for debug purposes"/>
    <register addr="a400024c" rw_flags="R" width="1" name="ENC_CORE_STATUS_I0" comment="Encryption accelerator state for debug purposes"/>
    <register addr="a4000250" rw_flags="RW" width="1" name="ENC_DMA_AHB_REG_CLK_REQ_EXTEND_CYCLES_I0" comment="Number of cycles to extend the AHB clock request for after the register access has completed."/>
    <register addr="a4000254" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[0]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a4000258" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[0]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a400025c" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[0]" comment="Additional bytes to attempt to match."/>
    <register addr="a4000260" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[0]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a4000264" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[1]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a4000268" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[1]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a400026c" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[1]" comment="Additional bytes to attempt to match."/>
    <register addr="a4000270" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[1]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a4000274" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[2]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a4000278" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[2]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a400027c" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[2]" comment="Additional bytes to attempt to match."/>
    <register addr="a4000280" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[2]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a4000284" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[3]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a4000288" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[3]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a400028c" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[3]" comment="Additional bytes to attempt to match."/>
    <register addr="a4000290" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[3]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a4000294" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[4]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a4000298" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[4]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a400029c" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[4]" comment="Additional bytes to attempt to match."/>
    <register addr="a40002a0" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[4]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a40002a4" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[5]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a40002a8" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[5]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a40002ac" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[5]" comment="Additional bytes to attempt to match."/>
    <register addr="a40002b0" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[5]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a40002b4" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[6]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a40002b8" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[6]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a40002bc" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[6]" comment="Additional bytes to attempt to match."/>
    <register addr="a40002c0" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[6]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a40002c4" rw_flags="RW" width="1" name="ENC_DMA_MSDU_FILTER_EN_I0[7]" comment="Enable MSDU filtering on decryption."/>
    <register addr="a40002c8" rw_flags="RW" width="2" name="ENC_DMA_MSDU_FILTER_ETHERTYPE_I0[7]" comment="Configuration for MSDU filters. Ethertype to match."/>
    <register addr="a40002cc" rw_flags="RW" width="4" name="ENC_DMA_MSDU_FILTER_BYTES_I0[7]" comment="Additional bytes to attempt to match."/>
    <register addr="a40002d0" rw_flags="R" width="1" name="ENC_DMA_MSDU_FILTER_MATCH_I0[7]" comment="Filter match flag. Ethertype has matched and (byte one and/or byte two)."/>
    <register addr="a40002d4" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_START_I0[0]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a40002d8" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_START_I0[1]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a40002dc" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_START_I0[2]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a40002e0" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_START_I0[3]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a40002e4" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_START_I0[4]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a40002e8" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_START_I0[5]" comment="Start 4k page number for address checking. The logic checks for the address being greater than or equal to this number."/>
    <register addr="a40002ec" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_END_I0[0]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a40002f0" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_END_I0[1]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a40002f4" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_END_I0[2]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a40002f8" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_END_I0[3]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a40002fc" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_END_I0[4]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a4000300" rw_flags="RW" width="4" name="ENC_DMA_ADDR_CHECK_END_I0[5]" comment="End 4k page number for address checking. The logic checks for the address being lower than this number."/>
    <register addr="a4000304" rw_flags="RW" width="1" name="ENC_DMA_ADDR_CHECK_EN_I0" comment="Set a bit to 1 to enable the corresponding address check region."/>
    <register addr="a4000308" rw_flags="R" width="1" name="ENC_DMA_ADDR_CHECK_STATUS_I0" comment="Interrupt status of read address AXI channel."/>
    <register addr="a400030c" rw_flags="W" width="1" name="ENC_DMA_ADDR_CHECK_CLEAR_I0" comment="Write a 1 to clear the interrupt status."/>
    <register addr="a4000310" rw_flags="R" width="4" name="ENC_DMA_ADDR_CHECK_ERROR_ADDR_I0" comment="The address which caused the error."/>
  </block>
  <block name="wl_longhops" comment="Wireless LAN longhop config and status registers. These are not present on the Diet WLMACPHY.">
    <register addr="a9000000" rw_flags="RW" width="2" name="WLAN_NIC_TO_RAMS_LH_CONFIG" comment="Configuration for NIC-400 to RAMS AXI LHASB destination block."/>
    <register addr="a9000004" rw_flags="R" width="1" name="WLAN_NIC_TO_RAMS_LH_STATUS" comment="Status for NIC-400 to RAMS AXI LHASB destination block."/>
    <register addr="a9000008" rw_flags="RW" width="2" name="WLAN_NIC_TO_FMAC_LH_CONFIG" comment="Configuration for NIC-400 to FMAC AXI LHASB destination block."/>
    <register addr="a900000c" rw_flags="R" width="1" name="WLAN_NIC_TO_FMAC_LH_STATUS" comment="Status for NIC-400 to FMAC AXI LHASB destination block."/>
    <register addr="a9000010" rw_flags="RW" width="2" name="WLAN_FMAC_TO_NIC_LH_CONFIG" comment="Configuration for FMAC to NIC-400 AXI LHASB source block."/>
    <register addr="a9000014" rw_flags="R" width="1" name="WLAN_FMAC_TO_NIC_LH_STATUS" comment="Status for FMAC to NIC-400 AXI LHASB source block."/>
  </block>
  <block name="wl_mac" comment="WLan MAC top level registers and enumerations for 802.11 protocol, Commands and Indications">
    <register addr="a8000000" rw_flags="RW" width="1" name="CLKGEN_MAC_ENABLES" comment="This register enables clocks for MAC"/>
    <register addr="a8000004" rw_flags="RW" width="1" name="MAC_DEBUG_SEL" comment="Select MAC debug port output (this is in addition to MAC IF and MAC ACC ports)"/>
    <register addr="a8000008" rw_flags="R" width="2" name="MAC_DEBUG_STATUS" comment="Read MAC debug {MAC_ACC, MAC_IF}"/>
  </block>
  <block name="wl_mac_acc" comment="Wireless LAN FlexiMAC MAC Accelerator registers">
    <register addr="a2000000" rw_flags="RW" width="1" name="MAC_ACC_CONTROL" comment="General control register"/>
    <register addr="a2000004" rw_flags="RW" width="1" name="MAC_ACC_TX_RX_CONFIG" comment="TX and RX options"/>
    <register addr="a2000008" rw_flags="RW" width="1" name="MAC_ACC_SCHEDULED_EVENT1" comment="Event that goes off at MAC_ACC_SCHEDULED_EVENT1_TIME"/>
    <register addr="a200000c" rw_flags="RW" width="1" name="MAC_ACC_SCHEDULED_EVENT2" comment="Event that goes off at MAC_ACC_SCHEDULED_EVENT2_TIME"/>
    <register addr="a2000010" rw_flags="RW" width="1" name="MAC_ACC_SCHEDULED_EVENT3" comment="Event that goes off at MAC_ACC_SCHEDULED_EVENT3_TIME"/>
    <register addr="a2000014" rw_flags="RW" width="1" name="MAC_ACC_SCHEDULED_EVENT4" comment="Event that goes off at MAC_ACC_SCHEDULED_EVENT4_TIME"/>
    <register addr="a2000018" rw_flags="RW" width="1" name="MAC_ACC_SCHEDULED_EVENT5" comment="Event that goes off at MAC_ACC_SCHEDULED_EVENT5_TIME"/>
    <register addr="a200001c" rw_flags="RW" width="1" name="MAC_ACC_SCHEDULED_EVENT6" comment="Event that goes off at MAC_ACC_SCHEDULED_EVENT6_TIME"/>
    <register addr="a2000020" rw_flags="RW" width="4" name="MAC_ACC_SCHEDULED_EVENT1_TIME" comment="Time of MAC_ACC_SCHEUDLED_EVENT1"/>
    <register addr="a2000024" rw_flags="RW" width="4" name="MAC_ACC_SCHEDULED_EVENT2_TIME" comment="Time of MAC_ACC_SCHEUDLED_EVENT2"/>
    <register addr="a2000028" rw_flags="RW" width="4" name="MAC_ACC_SCHEDULED_EVENT3_TIME" comment="Time of MAC_ACC_SCHEUDLED_EVENT3"/>
    <register addr="a200002c" rw_flags="RW" width="4" name="MAC_ACC_SCHEDULED_EVENT4_TIME" comment="Time of MAC_ACC_SCHEUDLED_EVENT4"/>
    <register addr="a2000030" rw_flags="RW" width="4" name="MAC_ACC_SCHEDULED_EVENT5_TIME" comment="Time of MAC_ACC_SCHEUDLED_EVENT5"/>
    <register addr="a2000034" rw_flags="RW" width="4" name="MAC_ACC_SCHEDULED_EVENT6_TIME" comment="Time of MAC_ACC_SCHEUDLED_EVENT6"/>
    <register addr="a2000038" rw_flags="RW" width="1" name="MAC_ACC_TX_RX_CONTROL" comment="TX/RX immediate control"/>
    <register addr="a200003c" rw_flags="RW" width="4" name="MAC_ACC_TX_PARAMETERS" comment=""/>
    <register addr="a2000040" rw_flags="RW" width="4" name="MAC_ACC_PSDU_LENGTH" comment="PSDU length used to pad Zero-Length delimiters for an A-MPDU"/>
    <register addr="a2000044" rw_flags="R" width="4" name="MAC_ACC_TIMER" comment="Current value of MAC ACC's 32-bit Timer"/>
    <register addr="a2000048" rw_flags="R" width="2" name="MAC_ACC_STATUS" comment="General status register"/>
    <register addr="a200004c" rw_flags="R" width="4" name="MAC_ACC_INTERRUPT_STATUS" comment="Interrupt status. See MAC_ACC_INTERRUPT_ENUMS for bit fields"/>
    <register addr="a2000050" rw_flags="RW" width="4" name="MAC_ACC_INTERRUPT_ENABLE" comment="Interrupt enable. See MAC_ACC_INTERRUPT_ENUMS for bit fields"/>
    <register addr="a2000054" rw_flags="W" width="4" name="MAC_ACC_INTERRUPT_CLEAR" comment="Interrupt clear. See MAC_ACC_INTERRUPT_ENUMS for bit fields"/>
    <register addr="a2000058" rw_flags="R" width="4" name="MAC_ACC_RX_PPDU_START_TIME" comment=""/>
    <register addr="a200005c" rw_flags="R" width="4" name="MAC_ACC_RX_PPDU_END_TIME" comment=""/>
    <register addr="a2000060" rw_flags="R" width="4" name="MAC_ACC_TX_DATA_AVAILABLE_TIME" comment=""/>
    <register addr="a2000064" rw_flags="R" width="4" name="MAC_ACC_TX_DATA_REQUIRED_TIME" comment=""/>
    <register addr="a2000068" rw_flags="R" width="4" name="MAC_ACC_TX_DATA_LAST_REQUIRED_TIME" comment=""/>
    <register addr="a200006c" rw_flags="R" width="4" name="MAC_ACC_TX_DATA_LAST_WORD_COUNT" comment=""/>
    <register addr="a2000070" rw_flags="R" width="4" name="MAC_ACC_RX_PSDU_END_TIME" comment=""/>
    <register addr="a2000074" rw_flags="R" width="4" name="MAC_ACC_TX_ENABLE_START_TIME" comment=""/>
    <register addr="a2000078" rw_flags="R" width="4" name="MAC_ACC_TX_ENABLE_END_TIME" comment=""/>
    <register addr="a200007c" rw_flags="R" width="4" name="MAC_ACC_TX_PPDU_START_TIME" comment=""/>
    <register addr="a2000080" rw_flags="R" width="4" name="MAC_ACC_TX_PPDU_END_TIME" comment=""/>
    <register addr="a2000084" rw_flags="R" width="4" name="MAC_ACC_PPDU_END_TIME" comment=""/>
    <register addr="a2000088" rw_flags="R" width="4" name="MAC_ACC_TX_ABORT_TIME" comment=""/>
    <register addr="a200008c" rw_flags="R" width="4" name="MAC_ACC_RX_ABORT_TIME" comment=""/>
    <register addr="a2000090" rw_flags="R" width="4" name="MAC_ACC_RX_OFF_TIME" comment=""/>
    <register addr="a2000094" rw_flags="R" width="4" name="MAC_ACC_PROG_SCHEDULED_EVENT1_TIME" comment=""/>
    <register addr="a2000098" rw_flags="R" width="4" name="MAC_ACC_PROG_SCHEDULED_EVENT2_TIME" comment=""/>
    <register addr="a200009c" rw_flags="R" width="4" name="MAC_ACC_PROG_SCHEDULED_EVENT3_TIME" comment=""/>
    <register addr="a20000a0" rw_flags="R" width="4" name="MAC_ACC_PROG_SCHEDULED_EVENT4_TIME" comment=""/>
    <register addr="a20000a4" rw_flags="R" width="4" name="MAC_ACC_PROG_SCHEDULED_EVENT5_TIME" comment=""/>
    <register addr="a20000a8" rw_flags="R" width="4" name="MAC_ACC_PROG_SCHEDULED_EVENT6_TIME" comment=""/>
    <register addr="a20000ac" rw_flags="R" width="4" name="MAC_ACC_SCHEDULED_EVENT1_UPDATE_TIME" comment=""/>
    <register addr="a20000b0" rw_flags="R" width="4" name="MAC_ACC_SCHEDULED_EVENT2_UPDATE_TIME" comment=""/>
    <register addr="a20000b4" rw_flags="R" width="4" name="MAC_ACC_SCHEDULED_EVENT3_UPDATE_TIME" comment=""/>
    <register addr="a20000b8" rw_flags="R" width="4" name="MAC_ACC_SCHEDULED_EVENT4_UPDATE_TIME" comment=""/>
    <register addr="a20000bc" rw_flags="R" width="4" name="MAC_ACC_SCHEDULED_EVENT5_UPDATE_TIME" comment=""/>
    <register addr="a20000c0" rw_flags="R" width="4" name="MAC_ACC_SCHEDULED_EVENT6_UPDATE_TIME" comment=""/>
    <register addr="a20000c4" rw_flags="R" width="1" name="MAC_ACC_SCHEDULED_EVENT1_UPDATE" comment=""/>
    <register addr="a20000c8" rw_flags="R" width="1" name="MAC_ACC_SCHEDULED_EVENT2_UPDATE" comment=""/>
    <register addr="a20000cc" rw_flags="R" width="1" name="MAC_ACC_SCHEDULED_EVENT3_UPDATE" comment=""/>
    <register addr="a20000d0" rw_flags="R" width="1" name="MAC_ACC_SCHEDULED_EVENT4_UPDATE" comment=""/>
    <register addr="a20000d4" rw_flags="R" width="1" name="MAC_ACC_SCHEDULED_EVENT5_UPDATE" comment=""/>
    <register addr="a20000d8" rw_flags="R" width="1" name="MAC_ACC_SCHEDULED_EVENT6_UPDATE" comment=""/>
    <register addr="a20000dc" rw_flags="R" width="4" name="MAC_ACC_RX_DWARF_MPDU_COUNT" comment="Count of MPDUs that were ignored because the length indicated was less than 4 bytes. This includes standalone MPDUs and MPDUs sent as part of an AMPDU."/>
    <register addr="a20000e0" rw_flags="R" width="4" name="MAC_ACC_RX_GOOD_MPDU_COUNT" comment="Count of MPDUs that passed FCS"/>
    <register addr="a20000e4" rw_flags="R" width="4" name="MAC_ACC_RX_BAD_MPDU_COUNT" comment="Count of MPDUs that fails FCS"/>
    <register addr="a20000e8" rw_flags="R" width="4" name="MAC_ACC_RX_PSDU_COUNT" comment="Count of IDLE=&amp;gt;MACPHY_RX_VALID transitions"/>
    <register addr="a20000ec" rw_flags="R" width="4" name="MAC_ACC_RX_ZERO_LEN_MPDU_COUNT" comment="Count of standalone MPDUs that were ignored because the length indicated was null."/>
    <register addr="a20000f0" rw_flags="R" width="4" name="MAC_ACC_TX_STARVATION_COUNT" comment="Count of PSDU bytes going to the PHY upto the first starvation byte"/>
    <register addr="a20000f4" rw_flags="R" width="4" name="MAC_ACC_TX_STARVATION_LENGTH" comment="Length of MPDU that contained TX starvation"/>
    <register addr="a20000f8" rw_flags="R" width="4" name="MAC_ACC_RX_ON_REQUEST_ERROR_STATUS" comment="Status of the cause(s) that triggered MAC_ACC_INTERRUPT_RX_ON_REQUEST_ERROR"/>
    <register addr="a20000fc" rw_flags="R" width="4" name="MAC_ACC_RX_OFF_REQUEST_ERROR_STATUS" comment="Status of the cause(s) that triggered MAC_ACC_INTERRUPT_RX_OFF_REQUEST_ERROR"/>
    <register addr="a2000100" rw_flags="R" width="4" name="MAC_ACC_TX_START_REQUEST_ERROR_STATUS" comment="Status of the cause(s) that triggered MAC_ACC_INTERRUPT_TX_START_REQUEST_ERROR"/>
    <register addr="a2000104" rw_flags="R" width="4" name="MAC_ACC_TX_STOP_REQUEST_ERROR_STATUS" comment="Status of the cause(s) that triggered MAC_ACC_INTERRUPT_TX_STOP_REQUEST_ERROR"/>
    <register addr="a2000108" rw_flags="RW" width="1" name="MAC_ACC_DEBUG_SELECT" comment="Debug select"/>
    <register addr="a200010c" rw_flags="R" width="4" name="MAC_ACC_TX_DEBUG_STATUS" comment="TX Debug Status"/>
    <register addr="a2000110" rw_flags="R" width="4" name="MAC_ACC_RX_DEBUG_STATUS" comment="RX Debug Status"/>
    <register addr="a2000114" rw_flags="RW" width="4" name="MAC_ACC_TIMESTAMP_CTRL" comment="Control of timestamping"/>
    <register addr="a2000118" rw_flags="R" width="4" name="MAC_ACC_TIMESTAMP_VAL[0]" comment="Timestamp block 480MHz cycle count"/>
    <register addr="a200011c" rw_flags="R" width="4" name="MAC_ACC_TIMESTAMP_VAL[1]" comment="Timestamp block 480MHz cycle count"/>
    <register addr="a2000120" rw_flags="R" width="4" name="MAC_ACC_TIMESTAMP_VAL[2]" comment="Timestamp block 480MHz cycle count"/>
    <register addr="a2000124" rw_flags="R" width="4" name="MAC_ACC_TIMESTAMP_VAL[3]" comment="Timestamp block 480MHz cycle count"/>
    <register addr="a2000128" rw_flags="R" width="1" name="MAC_ACC_TIMESTAMP_OCCURRED" comment="Timestamp edge has happened (one bit for each block)"/>
    <register addr="a200012c" rw_flags="W" width="1" name="MAC_ACC_TIMESTAMP_OCCURRED_CLEAR" comment="Clears corresponding TIMESTAMP_OCCURRED flag"/>
  </block>
  <block name="wl_mac_if" comment="Wireless LAN FlexiMAC MAC Interface registers">
    <register addr="a1000000" rw_flags="RW" width="1" name="MAC_IF_CONTROL" comment="General control register (state is persistant)"/>
    <register addr="a1000004" rw_flags="W" width="1" name="MAC_IF_CONTROL_AMNESIC" comment="General control register (state is transitory). Writing a 0 to a bit has no effect. Returns zero if read (not last value written)"/>
    <register addr="a1000008" rw_flags="R" width="1" name="MAC_IF_STATUS" comment="General status register"/>
    <register addr="a100000c" rw_flags="RW" width="2" name="MAC_IF_RX_BUFFER_START" comment="Address of start of Receive Buffer. Offset from start of RAMS. Units of 1k bytes. Address = MAC_IF_RX_BUFFER_START*1024"/>
    <register addr="a1000010" rw_flags="RW" width="1" name="MAC_IF_RX_BUFFER_SIZE" comment="Size of Receive Buffer. Units of 1k bytes. Offset of 1k bytes. 0 =&amp;gt; 1k bytes,  1 =&amp;gt; 2k bytes,  255 =&amp;gt; 256k bytes"/>
    <register addr="a1000014" rw_flags="R" width="4" name="MAC_IF_RX_GIVE" comment="Receive Buffer Write Pointer. Updated 'live' as each quadword is written to RAMS"/>
    <register addr="a1000018" rw_flags="RW" width="4" name="MAC_IF_RX_GIVE_EMEND" comment="Allows firmware to modify Receive Buffer Write Pointer. Must only be written when Receive Buffer Write Pointer is not in active use. Entire register must be written atomically. If read, this register will return the last value written (not zero)"/>
    <register addr="a100001c" rw_flags="RW" width="4" name="MAC_IF_RX_TAKE" comment="Receive Buffer Read Pointer. Entire register must be written atomically"/>
    <register addr="a1000020" rw_flags="RW" width="4" name="MAC_IF_RX_TRIGGER" comment="Controls the generation of the Receive Give Interrupt. Entire register must be written atomically"/>
    <register addr="a1000024" rw_flags="RW" width="2" name="MAC_IF_TX_BUFFER_START" comment="Address of start of Transmit Buffer. Offset from start of RAMS. Units of 1k bytes. Address = MAC_IF_TX_BUFFER_START*1024"/>
    <register addr="a1000028" rw_flags="RW" width="1" name="MAC_IF_TX_BUFFER_SIZE" comment="Size of Transmit Buffer 0. Units of 1k bytes. Offset of 1k bytes. 0 =&amp;gt; 1k bytes,  1 =&amp;gt; 2k bytes,  255 =&amp;gt; 256k bytes"/>
    <register addr="a100002c" rw_flags="R" width="4" name="MAC_IF_TX_STRUCTURE" comment="Transmit Structure Table Read Pointer. Address of next entry in Transmit Structure Table that hardware will read. Offset from start of RAMS. Updated 'live' as each entry is read. Two lsb always 0. (Debug aid)"/>
    <register addr="a1000030" rw_flags="RW" width="4" name="MAC_IF_TX_STRUCTURE_EMEND" comment="Allows firmware to modify Transmit Structure Table Read Pointer. Two lsb ignored and treated as 0. If read, this register will return last value written (not zero)"/>
    <register addr="a1000034" rw_flags="RW" width="4" name="MAC_IF_TX_BASE" comment="Transmit Buffer Base Pointer. Defines the start of valid data in the Transmit Buffer. May be (temporarily) set 'above' MAC_IF_TX_GIVE to indicate an area of the Transmit Buffer (give -&amp;gt; base) which does not and will not contain valid data. If firmware falls behind schedule creating the Transmit Buffer's data, it can abandon the creation of some data, with the aim of meeting the schedule for later data"/>
    <register addr="a1000038" rw_flags="RW" width="4" name="MAC_IF_TX_GIVE" comment="Transmit Buffer Write Pointer. Defines the end of valid data in the Transmit Buffer. Entire register must be written atomically"/>
    <register addr="a100003c" rw_flags="R" width="4" name="MAC_IF_TX_TAKE" comment="Transmit Buffer Read Pointer. Updated 'live' as each quadword is read from Transmit Buffer"/>
    <register addr="a1000040" rw_flags="RW" width="4" name="MAC_IF_TX_TAKE_EMEND" comment="Allows firmware to modify Transmit Buffer Read Pointer. Must only be written when Transmit Buffer Read Pointer is not in active use. Entire register must be written atomically. If read, this register will return the last value written (not zero)"/>
    <register addr="a1000044" rw_flags="RW" width="4" name="MAC_IF_TX_TRIGGER" comment="Controls the generation of the Transmit Take Interrupt. Entire register must be written atomically"/>
    <register addr="a1000048" rw_flags="R" width="1" name="MAC_IF_INTERRUPT_RAW_STATUS" comment="Interrupt Raw Status register. This is a 'sticky' register. The (transient) interrupt sources can (only) set the bits to 1. Bits may be cleared to 0 by writing to MAC_IF_INTERRUPT_CLEAR.  When the MAC IF is Disabled, the interrupt sources are prevented from updating INTERRUPT_RAW_STATUS"/>
    <register addr="a100004c" rw_flags="R" width="1" name="MAC_IF_INTERRUPT_STATUS" comment="Interrupt Status register. Value in this register is MAC_IF_INTERRUPT_RAW_STATUS ANDed with MAC_IF_INTERRUPT_ENABLE. If one or more of the bits in this register are 1, then the interrupt output signal from the MAC IF will be asserted"/>
    <register addr="a1000050" rw_flags="RW" width="1" name="MAC_IF_INTERRUPT_ENABLE" comment="Interrupt Enable register. Allows the various interrupt sources to be enabled / masked. If masked (i.e. a bit is a 0), then the interrupt source will not cause an interrupt, but the source may still be polled via MAC_IF_INTERRUPT_RAW_STATUS"/>
    <register addr="a1000054" rw_flags="W" width="1" name="MAC_IF_INTERRUPT_CLEAR" comment="Interrupt Clear register. Writing a 1 to a bit will (typically) clear (set to 0) the corresponding bit in MAC_IF_INTERRUPT_RAW_STATUS. Writing a 0 has no effect. Returns zero if read (not last value written)"/>
    <register addr="a1000058" rw_flags="RW" width="2" name="MAC_IF_DEBUG_SELECT" comment="Debug Select"/>
    <register addr="a100005c" rw_flags="R" width="2" name="MAC_IF_DEBUG_STATUS" comment="Debug Status"/>
    <register addr="a1000060" rw_flags="R" width="4" name="MAC_IF_DEBUG_RX1" comment="Debug Receive 1. Various state from Receive Controller. (Debug aid)"/>
    <register addr="a1000064" rw_flags="R" width="4" name="MAC_IF_DEBUG_RX2" comment="Debug Receive 2. Various state from Receive Controller. (Debug aid)"/>
    <register addr="a1000068" rw_flags="R" width="4" name="MAC_IF_DEBUG_TX1" comment="Debug Transmit 1. Various state from Transmit Controller. (Debug aid)"/>
    <register addr="a100006c" rw_flags="R" width="4" name="MAC_IF_DEBUG_TX2" comment="Debug Transmit 2. Various state from Transmit Controller. (Debug aid)"/>
    <register addr="a1000070" rw_flags="R" width="4" name="MAC_IF_DEBUG_TX3" comment="Debug Transmit 3. Various state from Transmit Controller. (Debug aid)"/>
  </block>
  <block name="wl_mac_pp" comment="FlexiMAC processor platform registers.">
    <register addr="a0000000" rw_flags="R" width="4" name="MACPP_VERSION" comment="Dummy version string. LSbit is used in simulations for chip id (0 or 1)."/>
    <register addr="a0000004" rw_flags="R" width="2" name="MACPP_PERW_REGISTER_HASH" comment="Contains a 16-bit hash of all the PERW register tree source used in the IP."/>
    <register addr="a0000008" rw_flags="RW" width="2" name="MACPP_PIO_DRIVE" comment="PIO drive."/>
    <register addr="a000000c" rw_flags="RW" width="2" name="MACPP_PIO_DRIVE_EN" comment="PIO drive enables."/>
    <register addr="a0000010" rw_flags="R" width="2" name="MACPP_PIO_STATUS" comment="PIO status."/>
    <register addr="a0000014" rw_flags="RW" width="4" name="MACPP_LOCAL" comment="Scratch register."/>
    <register addr="a0000018" rw_flags="RW" width="1" name="MACPP_IRQ_MAC2WLBT_SET" comment="Write 1 in the corresponding bit to raise an IRQ line to main WLBT PP. Writing 0 has no effect."/>
    <register addr="a000001c" rw_flags="RW" width="1" name="MACPP_IRQ_MAC2WLBT_CLR" comment="Write 1 in the corresponding bit to clear an IRQ line to main WLBT PP. Writing 0 has no effect."/>
    <register addr="a0000020" rw_flags="R" width="1" name="MACPP_IRQ_MAC2WLBT" comment="Status of the IRQ lines to main WLBT PP"/>
    <register addr="a0000024" rw_flags="RW" width="1" name="MACPP_IRQ_WLBT2MAC_SET" comment="Write 1 in the corresponding bit to raise an IRQ line from main WLBT PP. Writing 0 has no effect."/>
    <register addr="a0000028" rw_flags="RW" width="1" name="MACPP_IRQ_WLBT2MAC_CLR" comment="Write 1 in the corresponding bit to clear an IRQ line from main WLBT PP. Writing 0 has no effect."/>
    <register addr="a000002c" rw_flags="R" width="1" name="MACPP_IRQ_WLBT2MAC" comment="Status of the IRQ lines from main WLBT PP"/>
    <register addr="a0000030" rw_flags="R" width="4" name="MACPP_TIMER_TIME" comment="Read-only Timer Time from WLBT PP"/>
    <register addr="a0000034" rw_flags="R" width="4" name="MACPP_REGS_FAILED_ADDRESS" comment="Address of last register access that failed to complete successfully, usually resulting in a CPU abort of some sort."/>
    <register addr="a0000038" rw_flags="RW" width="1" name="MACPP_REGS_STATUS" comment="Observe the APB bus failure status. Write to a field to clear it."/>
    <register addr="a000003c" rw_flags="RW" width="2" name="MACPP_COEX_ALLOWED" comment="Coex control for the various BT and WLAN activities"/>
    <register addr="a0000040" rw_flags="RW" width="4" name="MACPP_CAM_COMP_DATA0" comment="Lower 32 bits of CAM comparator data"/>
    <register addr="a0000044" rw_flags="RW" width="4" name="MACPP_CAM_COMP_DATA1" comment="Upper 17 bits of CAM comparator data"/>
    <register addr="a0000048" rw_flags="R" width="4" name="MACPP_CAM_MATCH" comment="Index into array of first data match, 0xFFFF_FFFF for no match. There is an extra cycle of latency before this register is valid. i.e. After writing a CAM_COMP_DATA or CAM_ARRAY register, one clock cycle of delay must be inserted before this register is read."/>
    <register addr="a000004c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[0]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000050" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[0]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000054" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[1]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000058" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[1]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000005c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[2]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000060" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[2]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000064" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[3]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000068" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[3]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000006c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[4]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000070" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[4]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000074" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[5]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000078" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[5]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000007c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[6]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000080" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[6]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000084" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[7]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000088" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[7]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000008c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[8]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000090" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[8]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000094" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[9]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000098" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[9]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000009c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[10]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000a0" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[10]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000a4" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[11]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000a8" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[11]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000ac" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[12]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000b0" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[12]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000b4" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[13]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000b8" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[13]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000bc" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[14]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000c0" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[14]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000c4" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[15]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000c8" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[15]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000cc" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[16]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000d0" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[16]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000d4" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[17]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000d8" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[17]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000dc" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[18]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000e0" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[18]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000e4" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[19]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000e8" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[19]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000ec" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[20]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000f0" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[20]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000f4" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[21]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a00000f8" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[21]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a00000fc" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[22]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000100" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[22]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000104" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[23]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000108" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[23]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000010c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[24]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000110" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[24]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000114" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[25]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000118" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[25]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000011c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[26]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000120" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[26]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000124" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[27]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000128" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[27]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000012c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[28]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000130" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[28]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000134" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[29]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000138" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[29]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000013c" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[30]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000140" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[30]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a0000144" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA0[31]" comment="Lower 32 bits of CAM Array data"/>
    <register addr="a0000148" rw_flags="RW" width="4" name="MACPP_CAM_ARRAY_DATA1[31]" comment="Upper 17 bits of CAM Array data"/>
    <register addr="a000014c" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][0]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000150" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][1]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000154" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][2]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000158" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][3]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a000015c" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][4]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000160" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][5]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000164" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][6]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000168" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[0][7]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a000016c" rw_flags="RW" width="2" name="BIT_SHIFTER_SHIFT_VAL[0]" comment="Amount to shift data as a 2's compliment number. Range is -255 to 255. Positive values shift left. Zero extension is used. Shift occurs once on writing this register. Shifts less than or equal to 63 bits take one cycle. Larger shifts take up to 5 clock cycles. Accesses to any BitShifter registers when the shifter is active results in the bus being waited until the shifter has completed"/>
    <register addr="a0000170" rw_flags="RW" width="1" name="BIT_SHIFTER_MODE[0]" comment="Action on writing to Bit Shifter Data array. "/>
    <register addr="a0000174" rw_flags="RW" width="1" name="BIT_SHIFTER_CLEAR[0]" comment="Write anything to this register to clear the Bit Shifter Data array. "/>
    <register addr="a0000178" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][0]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a000017c" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][1]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000180" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][2]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000184" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][3]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000188" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][4]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a000018c" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][5]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000190" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][6]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000194" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[1][7]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a0000198" rw_flags="RW" width="2" name="BIT_SHIFTER_SHIFT_VAL[1]" comment="Amount to shift data as a 2's compliment number. Range is -255 to 255. Positive values shift left. Zero extension is used. Shift occurs once on writing this register. Shifts less than or equal to 63 bits take one cycle. Larger shifts take up to 5 clock cycles. Accesses to any BitShifter registers when the shifter is active results in the bus being waited until the shifter has completed"/>
    <register addr="a000019c" rw_flags="RW" width="1" name="BIT_SHIFTER_MODE[1]" comment="Action on writing to Bit Shifter Data array. "/>
    <register addr="a00001a0" rw_flags="RW" width="1" name="BIT_SHIFTER_CLEAR[1]" comment="Write anything to this register to clear the Bit Shifter Data array. "/>
    <register addr="a00001a4" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][0]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001a8" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][1]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001ac" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][2]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001b0" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][3]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001b4" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][4]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001b8" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][5]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001bc" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][6]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001c0" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[2][7]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001c4" rw_flags="RW" width="2" name="BIT_SHIFTER_SHIFT_VAL[2]" comment="Amount to shift data as a 2's compliment number. Range is -255 to 255. Positive values shift left. Zero extension is used. Shift occurs once on writing this register. Shifts less than or equal to 63 bits take one cycle. Larger shifts take up to 5 clock cycles. Accesses to any BitShifter registers when the shifter is active results in the bus being waited until the shifter has completed"/>
    <register addr="a00001c8" rw_flags="RW" width="1" name="BIT_SHIFTER_MODE[2]" comment="Action on writing to Bit Shifter Data array. "/>
    <register addr="a00001cc" rw_flags="RW" width="1" name="BIT_SHIFTER_CLEAR[2]" comment="Write anything to this register to clear the Bit Shifter Data array. "/>
    <register addr="a00001d0" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][0]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001d4" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][1]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001d8" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][2]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001dc" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][3]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001e0" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][4]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001e4" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][5]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001e8" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][6]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001ec" rw_flags="RW" width="4" name="BIT_SHIFTER_DATA[3][7]" comment="32-bit word of Bit Shifter Data array"/>
    <register addr="a00001f0" rw_flags="RW" width="2" name="BIT_SHIFTER_SHIFT_VAL[3]" comment="Amount to shift data as a 2's compliment number. Range is -255 to 255. Positive values shift left. Zero extension is used. Shift occurs once on writing this register. Shifts less than or equal to 63 bits take one cycle. Larger shifts take up to 5 clock cycles. Accesses to any BitShifter registers when the shifter is active results in the bus being waited until the shifter has completed"/>
    <register addr="a00001f4" rw_flags="RW" width="1" name="BIT_SHIFTER_MODE[3]" comment="Action on writing to Bit Shifter Data array. "/>
    <register addr="a00001f8" rw_flags="RW" width="1" name="BIT_SHIFTER_CLEAR[3]" comment="Write anything to this register to clear the Bit Shifter Data array. "/>
    <register addr="a00001fc" rw_flags="RW" width="1" name="MACPP_IPC_SEMAPHORE[0]" comment="IPC semaphore register to allow atomic semaphore access for shared IPC registers."/>
    <register addr="a0000200" rw_flags="RW" width="1" name="MACPP_IPC_SEMAPHORE[1]" comment="IPC semaphore register to allow atomic semaphore access for shared IPC registers."/>
    <register addr="a0000204" rw_flags="RW" width="2" name="MACPP_CLK_REQ_EXTEND_CYCLES" comment="The number of clock cycles to extend the request for the various clock gates after the activity is complete."/>
  </block>
  <block name="wl_radio" comment="Wireless LAN radio control registers">
    <register addr="a3140000" rw_flags="RW" width="1" name="WL_RADIO_CONFIG" comment="Miscellaneous config bits"/>
    <register addr="a3140004" rw_flags="RW" width="2" name="WL_RADIO_CLOCK_CONTROL" comment="Enable/disable Radio Clocks"/>
    <register addr="a314000c" rw_flags="RW" width="1" name="WL_RADIO_IF_CTRL_MISC" comment="Some controls and spares"/>
    <register addr="a3140010" rw_flags="RW" width="4" name="WL_RADIO_ZIPPY_RESV_COUNT[0]" comment="ZIPPY reservation timer count values- units of 480MHz"/>
    <register addr="a3140014" rw_flags="RW" width="4" name="WL_RADIO_ZIPPY_RESV_COUNT[1]" comment="ZIPPY reservation timer count values- units of 480MHz"/>
    <register addr="a3140018" rw_flags="RW" width="4" name="WL_RADIO_ZIPPY_RESV_COUNT[2]" comment="ZIPPY reservation timer count values- units of 480MHz"/>
    <register addr="a314001c" rw_flags="RW" width="2" name="WL_RADIO_ZIPPY_RESV_CTRL" comment="Control of ZIPPY reservation timers"/>
    <register addr="a3140020" rw_flags="RW" width="1" name="WL_RADIO_ZIPPY_FLAG_ENABLES" comment="Enable bits for ZIPPY WLan Flags channels, one for each channel, set to zero to disable a given channel Req to ZIPPY_BB_TOP"/>
    <register addr="a3140024" rw_flags="RW" width="2" name="WL_RADIO_ZIPPY_LH_COMB_QCH_CTRL" comment="Control bits for the WL Combiner longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="a3140028" rw_flags="R" width="4" name="WL_RADIO_ZIPPY_LH_COMB_QCH_STATUS" comment="WL Combiner longhop (zippy_top side) Q-channel manager status."/>
    <register addr="a314002c" rw_flags="RW" width="1" name="WL_RADIO_ZIPPY_LH_COMB_PCH_CTRL" comment="Control bits for the WL Combiner longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="a3140030" rw_flags="R" width="4" name="WL_RADIO_ZIPPY_LH_COMB_PCH_STATUS" comment="WL Combiner longhop (zippy_top side) P-channel manager status."/>
    <register addr="a3140034" rw_flags="RW" width="2" name="WL_RADIO_ZIPPY_LH_DIST_QCH_CTRL" comment="Control bits for the WL Distributer longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="a3140038" rw_flags="R" width="4" name="WL_RADIO_ZIPPY_LH_DIST_QCH_STATUS" comment="WL Distributer longhop (zippy_top side) Q-channel manager status."/>
    <register addr="a314003c" rw_flags="RW" width="1" name="WL_RADIO_ZIPPY_LH_DIST_PCH_CTRL" comment="Control bits for the WL Distributer longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="a3140040" rw_flags="R" width="4" name="WL_RADIO_ZIPPY_LH_DIST_PCH_STATUS" comment="WL Distributer longhop (zippy_top side) P-channel manager status."/>
    <register addr="a3140044" rw_flags="RW" width="2" name="WL_RADIO_ZIPPY_LH_EVTS_QCH_CTRL" comment="Control bits for the WL Events longhop (zippy_top side) PCH and QCH managers."/>
    <register addr="a3140048" rw_flags="R" width="4" name="WL_RADIO_ZIPPY_LH_EVTS_QCH_STATUS" comment="WL Events longhop (zippy_top side) Q-channel manager status."/>
    <register addr="a314004c" rw_flags="RW" width="1" name="WL_RADIO_ZIPPY_LH_EVTS_PCH_CTRL" comment="Control bits for the WL Events longhop (ZippyTop side) PCH and QCH managers."/>
    <register addr="a3140050" rw_flags="R" width="4" name="WL_RADIO_ZIPPY_LH_EVTS_PCH_STATUS" comment="WL Events longhop (zippy_top side) P-channel manager status."/>
    <register addr="a3140054" rw_flags="R" width="2" name="WL_RADIO_DIG_GAIN_STATUS[0]" comment="This register contains the current gain settings to all digital blocks in the receive chain"/>
    <register addr="a3140058" rw_flags="R" width="4" name="WL_RADIO_CHANNEL_STATUS[0]" comment="This register contains the instantaneous value of the RSSI, CCA and CS of this receive chain"/>
    <register addr="a314005c" rw_flags="RW" width="2" name="WL_RADIO_INTERRUPT_DISABLE[0]" comment="Interrupt enable/disable and pending events clear - Disable interrupt/read enable status"/>
    <register addr="a3140060" rw_flags="RW" width="2" name="WL_RADIO_INTERRUPT_ENABLE[0]" comment="Interrupt enable/disable and pending events clear - Enable interrupt/read enable status"/>
    <register addr="a3140064" rw_flags="RWS" width="2" name="WL_RADIO_INTERRUPT_CLEAR[0]" comment="Interrupt enable/disable and pending events clear - Clear interrupt/read pending interrupt status"/>
    <register addr="a3140068" rw_flags="R" width="2" name="WL_RADIO_INTERRUPT_RAW[0]" comment="Interrupt enable/disable and pending events clear - Read incoming interrupt status"/>
    <register addr="a314006c" rw_flags="R" width="2" name="WL_RADIO_TEMP_STATUS[0]" comment="This register contains the temperature measurements from the RF chip via speedy"/>
    <register addr="a3140070" rw_flags="RW" width="4" name="WL_RADIO_AGC_CONFIG1[0]" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="a3140074" rw_flags="RW" width="4" name="WL_RADIO_AGC_CONFIG2[0]" comment="Configuration bits for the AGC: initial gain settings before first update comes from RF chip"/>
    <register addr="a3140078" rw_flags="RW" width="4" name="WL_RADIO_AGC_CONFIG3[0]" comment="Configuration bits for the AGC: digital gain range definition. Also initial baseband               gain until first update arrives from RF chip"/>
    <register addr="a314007c" rw_flags="RW" width="4" name="WL_RADIO_AGC_CONFIG4[0]" comment="Further configuration bits for the AGC: digital gain settings"/>
    <register addr="a3140080" rw_flags="RW" width="4" name="WL_RADIO_AGC_CONFIG5[0]" comment="Further configuration bits for the AGC: clipping detection behaviour"/>
    <register addr="a3140084" rw_flags="RW" width="4" name="WL_RADIO_AGC_STEPS_0[0]" comment="Further configuration bits for the AGC: ADC signal size nudge up thresholds"/>
    <register addr="a3140088" rw_flags="RW" width="4" name="WL_RADIO_AGC_STEPS_1[0]" comment="Further configuration bits for the AGC: ADC signal size nudge up thresholds"/>
    <register addr="a314008c" rw_flags="RW" width="4" name="WL_RADIO_AGC_STEPS_2[0]" comment="Further configuration bits for the AGC: ADC signal size nudge up thresholds"/>
    <register addr="a3140090" rw_flags="RW" width="4" name="WL_RADIO_AGC_STEPS_3[0]" comment="Further configuration bits for the AGC: ADC signal size nudge up thresholds"/>
    <register addr="a3140094" rw_flags="RW" width="4" name="WL_RADIO_AGC_STEPS_4[0]" comment="Further configuration bits for the AGC: ADC signal size nudge up thresholds"/>
    <register addr="a3140098" rw_flags="RW" width="4" name="WL_RADIO_AGC_TIMEOUT[0]" comment="This register specifies programmable timeouts for the AGC"/>
    <register addr="a314009c" rw_flags="RW" width="4" name="WL_RADIO_AGC_DIG_RSSI_TIME[0]" comment="This register specifies programmable configurations to measure digital RSSI for different purposes"/>
    <register addr="a31400a0" rw_flags="RW" width="4" name="WL_RADIO_AGC_DIG_RSSI_TIME2[0]" comment="This register specifies programmable configurations to measure digital RSSI for different purposes"/>
    <register addr="a31400a4" rw_flags="RW" width="4" name="WL_RADIO_AGC_DIG_RSSI_TIME3[0]" comment="This register specifies programmable configurations to measure digital RSSI for different purposes"/>
    <register addr="a31400a8" rw_flags="RW" width="4" name="WL_RADIO_AGC_OFDM_RSSI_TARGET[0]" comment="This register specifies the RSSI target for an OFDM receive burst after decimation."/>
    <register addr="a31400ac" rw_flags="RW" width="4" name="WL_RADIO_AGC_CCK_RSSI_TARGET[0]" comment="This register specifies the RSSI target for a CCK receive burst after decimation."/>
    <register addr="a31400b0" rw_flags="RW" width="4" name="WL_RADIO_AGC_OFDM_HE_SU_ER_RSSI_TARGET[0]" comment="This register specifies the RSSI target for an OFDM HE-SUER receive burst after decimation. Note this target value             only takes affect for Nudge Again operation for Nudge WL_RADIO_AGC_OFDM_RSSI_TARGET is used."/>
    <register addr="a31400b4" rw_flags="RW" width="4" name="WL_RADIO_AGC_OFDM_RSSI_TARGET_DELTA[0]" comment="This register specifies the RSSI steps of (Maximum target + 2X dB) and (Minimum target               - 2X dB) for a OFDM receive. Where X can be 1.5 dB or 2 dB depending on WL_RADIO_AGC_MIN_GAIN_STEP_SIZE."/>
    <register addr="a31400b8" rw_flags="RW" width="4" name="WL_RADIO_AGC_CCK_RSSI_TARGET_DELTA[0]" comment="This register specifies the RSSI steps of (Maximum target + 2X dB) and (Minimum target               - 2X dB) for a CCK receive. Where X can be 1.5 dB or 2 dB depending on WL_RADIO_AGC_MIN_GAIN_STEP_SIZE."/>
    <register addr="a31400bc" rw_flags="RW" width="4" name="WL_RADIO_AGC_OFDM_HE_SU_ER_RSSI_TARGET_DELTA[0]" comment="This register specifies the RSSI steps of (Maximum target + 2X dB) and (Minimum target               - 2X dB) for a OFDM receive. Where X can be 1.5 dB or 2 dB depending on WL_RADIO_AGC_MIN_GAIN_STEP_SIZE."/>
    <register addr="a31400c0" rw_flags="RW" width="4" name="WL_RADIO_AGC_CS_CONFIG[0]" comment="This register configures the carrier sense. It is asserted when                      analogue gain is less than a threshold and digital RSSI is greater than a threshold.                      The thresholds are set in this register"/>
    <register addr="a31400c4" rw_flags="RW" width="4" name="WL_RADIO_AGC_FE_INDEX_LUT0[0]" comment="LUT for conversion of FE gain to LNA and Mixer gain and vice versa."/>
    <register addr="a31400c8" rw_flags="RW" width="4" name="WL_RADIO_AGC_FE_INDEX_LUT1[0]" comment="LUT for conversion of FE gain to LNA and Mixer gain and vice versa."/>
    <register addr="a31400cc" rw_flags="RW" width="4" name="WL_RADIO_AGC_FE_GAIN_LUT0[0]" comment="LUT for calculating the gain applied by each FE gain index in unsigned 0.25 db for format."/>
    <register addr="a31400d0" rw_flags="RW" width="4" name="WL_RADIO_AGC_FE_GAIN_LUT1[0]" comment="LUT for calculating the gain applied by each FE gain index in unsigned 0.25 db for format."/>
    <register addr="a31400d4" rw_flags="RW" width="1" name="WL_RADIO_AGC_FE_GAIN_LUT2[0]" comment="LUT for calculating the gain applied by each FE gain index in unsigned 0.25 db for format."/>
    <register addr="a31400d8" rw_flags="RW" width="4" name="WL_RADIO_AGC_BB_GAIN_LUT0[0]" comment="LUT for calculating the gain applied by each analogue baseband gain index in unsigned 0.25 db for format."/>
    <register addr="a31400dc" rw_flags="RW" width="4" name="WL_RADIO_AGC_BB_GAIN_LUT1[0]" comment="LUT for calculating the gain applied by each analogue baseband gain index in unsigned 0.25 db for format."/>
    <register addr="a31400e0" rw_flags="RW" width="2" name="WL_RADIO_AGC_BB_GAIN_LUT2[0]" comment="LUT for calculating the gain applied by each analogue baseband gain index in unsigned 0.25 db for format."/>
    <register addr="a31400e4" rw_flags="RW" width="2" name="WL_RADIO_AGC_EXT_LNA_GAIN_LUT[0]" comment="LUT for calculating the gain applied by each external LNA gain index in unsigned 0.25 db for format."/>
    <register addr="a31400e8" rw_flags="RW" width="1" name="WL_RADIO_COADJ_ENABLES[0]" comment="Coadj general config register"/>
    <register addr="a31400ec" rw_flags="RW" width="4" name="WL_RADIO_COADJ_CONFIG[0]" comment="Coadj general config register"/>
    <register addr="a31400f0" rw_flags="RW" width="4" name="WL_RADIO_COADJ_CONFIG2[0]" comment="Coadj general config register 2"/>
    <register addr="a31400f4" rw_flags="R" width="4" name="WL_RADIO_COADJ_STATUS[0]" comment="Coadj general status register"/>
    <register addr="a31400f8" rw_flags="R" width="4" name="WL_RADIO_COADJ_BRACKEN_STATUS[0]" comment="Status of Bracken core - 8 LS bits of PC for last 4 clock cycles (LS is most recent)"/>
    <register addr="a31400fc" rw_flags="RW" width="4" name="WL_RADIO_COADJ_COMMS[0]" comment="General Communication register. Bracken gets an interrupt event when this is writtem"/>
    <register addr="a3140100" rw_flags="RW" width="2" name="WL_RADIO_COADJ_TIMER[0]" comment="Timer initial value, downcount at core clk rate starts on write"/>
    <register addr="a3140104" rw_flags="RW" width="2" name="WL_RADIO_COADJ_MEM_ADDR[0]" comment="Coadj Code/Data Mem Address. MSBs=2'b00: DataStore, 2'b10: Core internal regs, 2'b11: Local regs"/>
    <register addr="a3140108" rw_flags="RW" width="4" name="WL_RADIO_COADJ_MEM_WDATA[0]" comment="Coadj Code/Data Mem Write Data - auto increments address on write"/>
    <register addr="a314010c" rw_flags="R" width="4" name="WL_RADIO_COADJ_MEM_RDATA[0]" comment="Coadj Code/Data Mem Read Data - auto increments address on read"/>
    <register addr="a3140110" rw_flags="RW" width="2" name="WL_RADIO_ZIPPY_TO_RF_FLAGS[0]" comment="Zippy flag data (info and channel) to be sent to RFIC"/>
    <register addr="a3140114" rw_flags="RW" width="1" name="WL_RADIO_ZIPPY_TO_BB_FILTER[0]" comment="Filter bitmap for Zippy channels that cause an interrupt to be raised on traffic to the BBIC"/>
    <register addr="a3140118" rw_flags="RW" width="2" name="WL_RADIO_ZIPPY_TO_RF_CFG[0]" comment="Zippy channel configuration for SW data to the BBIC"/>
    <register addr="a314011c" rw_flags="R" width="2" name="WL_RADIO_ZIPPY_TO_BB_FLAGS[0]" comment="Zippy flag data to the BBIC, plus latched Valid and Ack"/>
  </block>
  <block name="wl_shared" comment="Wireless LAN shared registers">
    <register addr="a7000000" rw_flags="RW" width="1" name="WL_DEBUG_SEL" comment="Select for WLan_pd level debug mux"/>
    <register addr="a7000004" rw_flags="R" width="2" name="WL_DEBUG_STATUS" comment="Debug data at WLan_pd level"/>
    <register addr="a7000008" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_3_0" comment="Select for WLan_pd level debug mux"/>
    <register addr="a700000c" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_7_4" comment="Select for WLan_pd level debug mux"/>
    <register addr="a7000010" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_11_8" comment="Select for WLan_pd level debug mux"/>
    <register addr="a7000014" rw_flags="RW" width="4" name="WL_DEBUG_COMB_POSN_15_12" comment="Select for WLan_pd level debug mux"/>
    <register addr="a7000018" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_0_SEL" comment="Source bus select for intermediate bus 0 (select one of up to 32 busses)"/>
    <register addr="a700001c" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_1_SEL" comment="Source bus select for intermediate bus 1 (select one of up to 32 busses)"/>
    <register addr="a7000020" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_2_SEL" comment="Source bus select for intermediate bus 2 (select one of up to 32 busses)"/>
    <register addr="a7000024" rw_flags="RW" width="1" name="WL_DEBUG_COMB_BUS_3_SEL" comment="Source bus select for intermediate bus 3 (select one of up to 32 busses)"/>
  </block>
</subsystem>

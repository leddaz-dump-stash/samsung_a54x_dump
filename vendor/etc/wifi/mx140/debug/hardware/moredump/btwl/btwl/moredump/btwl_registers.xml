<?xml version="1.0" encoding="utf-8"?>

<!--
(c) SCSC 2015-2016 autogenerated by moredump.py as part of 'drun prep'.
  Changes made to this file may cause incorrect behaviour and will be lost if it is regenerated.

  XML file defining registers for btwl subsystem moredump
  Chip hash: 3be8


-->

<subsystem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.samsung.com ../Registers.xsd"
  name="btwl">
  <block name="bt_rf" comment="Bluetooth modem registers for BLE only device">
    <register addr="00002000" rw_flags="RW" width="1" name="BT_RF_CONFIG" comment=""/>
    <register addr="00002004" rw_flags="RW" width="1" name="BT_RF_DEBUG_SEL[0]" comment=""/>
    <register addr="00002008" rw_flags="RW" width="1" name="BT_RF_DEBUG_SEL[1]" comment=""/>
    <register addr="0000200c" rw_flags="RW" width="1" name="BT_RF_ZIPPY_CONFIG" comment=""/>
    <register addr="00002010" rw_flags="RW" width="1" name="BT_TX_DEBUG_SEL[0]" comment="Bluetooth Transmit debug mux select"/>
    <register addr="00002014" rw_flags="RW" width="1" name="BT_TX_DEBUG_SEL[1]" comment="Bluetooth Transmit debug mux select"/>
    <register addr="00002018" rw_flags="RW" width="1" name="BT_TX_INTERFACE_CTRL" comment=""/>
    <register addr="0000201c" rw_flags="RW" width="4" name="BT_TX_MOD_TEST" comment=""/>
    <register addr="00002020" rw_flags="RW" width="1" name="BT_TX_PATTERN_GEN_CFG" comment=""/>
    <register addr="00002024" rw_flags="RW" width="1" name="BT_TX_CTRL_DEBUG_SEL" comment="Bluetooth Transmit Control debug mux select."/>
    <register addr="00002028" rw_flags="RW" width="4" name="BT_TX_CTRL_CFG" comment="Bluetooth Transmit Control configuration."/>
    <register addr="0000202c" rw_flags="R" width="1" name="BT_TX_CTRL_STATUS" comment="The current Bluetooth Tx radio mode"/>
    <register addr="00002030" rw_flags="RW" width="4" name="BT_TX_CONFIG" comment=""/>
    <register addr="00002034" rw_flags="RW" width="1" name="BT_TX_BB_RAMP_CONFIG" comment=""/>
    <register addr="00002038" rw_flags="RW" width="4" name="BT_TX_SCALE_CONFIG" comment=""/>
    <register addr="0000203c" rw_flags="RW" width="1" name="BT_TX_MAX_ATT_CONFIG" comment=""/>
    <register addr="00002040" rw_flags="RW" width="4" name="BT_TX_GAIN_CONFIG" comment=""/>
    <register addr="00002044" rw_flags="R" width="1" name="BT_TX_GAIN" comment=""/>
    <register addr="00002048" rw_flags="RW" width="4" name="BT_TX_MR_CONFIG" comment=""/>
    <register addr="0000204c" rw_flags="RW" width="1" name="BT_TX_MR_MOD_DELAY" comment=""/>
    <register addr="00002050" rw_flags="RW" width="2" name="BT_POLAR_CTRL" comment="General control register"/>
    <register addr="00002054" rw_flags="RW" width="4" name="BT_POLAR_DATA" comment=""/>
    <register addr="00002058" rw_flags="RW" width="4" name="BT_POLAR_MUX" comment="Mux control register"/>
    <register addr="0000205c" rw_flags="RW" width="4" name="BT_POLAR_QUAD_POLAR_DATA" comment=""/>
    <register addr="00002060" rw_flags="RW" width="2" name="BT_POLAR_AA_FIR_CONTROL" comment="FIR filter control for AntiAliasing"/>
    <register addr="00002064" rw_flags="RW" width="4" name="BT_POLAR_AA_FIR_TAPS" comment="Upper AntiAliasing FIR filter taps"/>
    <register addr="00002068" rw_flags="R" width="2" name="BT_POLAR_DEBUG_STATUS" comment="Connected to sig gen Tone."/>
    <register addr="0000206c" rw_flags="RW" width="4" name="BT_POLAR_QUAD_POLAR_CONSTS" comment=""/>
    <register addr="00002070" rw_flags="RW" width="2" name="BT_POLAR_COMPENSATION_DATA_WRITE" comment="Compensation Y LUT write register"/>
    <register addr="00002074" rw_flags="R" width="2" name="BT_POLAR_COMPENSATION_DATA_READ" comment="Compensation Y LUT read register"/>
    <register addr="00002078" rw_flags="RW" width="2" name="BT_POLAR_COMPENSATION_ADDR" comment="Compensation Y LUT address register"/>
    <register addr="0000207c" rw_flags="RW" width="4" name="BT_POLAR_TEST_STIM" comment="Polar Test stimulus"/>
    <register addr="00002080" rw_flags="RW" width="4" name="BT_POLAR_IIR_COEFF1_LSW" comment="TX POLAR IIR filter coefficients (Biquad 1)"/>
    <register addr="00002084" rw_flags="RW" width="1" name="BT_POLAR_IIR_COEFF1_MSB" comment="TX POLAR IIR filter coefficients (Biquad 1)"/>
    <register addr="00002088" rw_flags="RW" width="4" name="BT_POLAR_IIR_COEFF2_LSW" comment="TX POLAR IIR filter coefficients (Biquad 2)"/>
    <register addr="0000208c" rw_flags="RW" width="1" name="BT_POLAR_IIR_COEFF2_MSB" comment="TX POLAR IIR filter coefficients (Biquad 2)"/>
    <register addr="00002090" rw_flags="RW" width="2" name="BT_POLAR_IIR_FILTER_CFG" comment="TX POLAR IIR filter configuration"/>
    <register addr="00002094" rw_flags="RW" width="4" name="BT_POLAR_POLAR_QUAD_CORR" comment=""/>
    <register addr="00002098" rw_flags="RW" width="2" name="BT_POLAR_POLAR_QUAD_OFFSET" comment="I and Q offset adjustments for Polar to IQ conversion"/>
    <register addr="0000209c" rw_flags="RW" width="4" name="BT_POLAR_POLAR_QUAD_CONSTS" comment=""/>
    <register addr="000020a0" rw_flags="RW" width="4" name="BT_POLAR_SIGGEN_CTRL" comment="Cal Siggen sine wave Ctrl"/>
    <register addr="000020a4" rw_flags="RW" width="1" name="BT_POLAR_INVERT_CTRL" comment="Fallback IQ Inversion control"/>
    <register addr="000020a8" rw_flags="RW" width="4" name="BT_TX_IQ_RESAMPLE_CTRL" comment="Bluetooth Transmit IQ resampling control."/>
    <register addr="000020ac" rw_flags="RW" width="1" name="BT_TX_FREQ_RESAMPLE_EN" comment="Bluetooth Transmit Freq resampling enables"/>
    <register addr="000020b0" rw_flags="RW" width="4" name="BT_TX_FREQ_RESAMPLE_CTRL[0]" comment="Bluetooth Transmit Freq resampling control, default index 0 is 1M, index 1 is for settings muxed for 2M. "/>
    <register addr="000020b4" rw_flags="RW" width="4" name="BT_TX_FREQ_RESAMPLE_CTRL[1]" comment="Bluetooth Transmit Freq resampling control, default index 0 is 1M, index 1 is for settings muxed for 2M. "/>
    <register addr="000020b8" rw_flags="RW" width="4" name="BT_TX_FREQ_RESAMPLE_TINC" comment="Bluetooth Transmit Freq resampling Tinc  16.16 format (xx.xxxxxxx) signed so 00.1000000 = 0.5, 00.0100000 = 0.25,."/>
    <register addr="000020bc" rw_flags="RW" width="1" name="BT_TX_ANTENNA_ID" comment="Control the default antenna ID selected for BT Tx"/>
    <register addr="000020c0" rw_flags="RW" width="4" name="BT_TX_SUPP_CTRL" comment="Control BT Tx supplemental antenna switching"/>
    <register addr="000020c4" rw_flags="RW" width="4" name="BT_TX_SUPP_CTRL2" comment="Control BT Tx supplemental antenna switching overrides"/>
    <register addr="000020c8" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[0]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020cc" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[1]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020d0" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[2]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020d4" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[3]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020d8" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[4]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020dc" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[5]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020e0" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[6]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020e4" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[7]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020e8" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[8]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020ec" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[9]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020f0" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[10]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020f4" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[11]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020f8" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[12]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000020fc" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[13]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002100" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[14]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002104" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[15]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002108" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[16]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000210c" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[17]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002110" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[18]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002114" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[19]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002118" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[20]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000211c" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[21]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002120" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[22]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002124" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[23]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002128" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[24]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000212c" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[25]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002130" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[26]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002134" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[27]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002138" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[28]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000213c" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[29]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002140" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[30]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002144" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[31]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002148" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[32]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000214c" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[33]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002150" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[34]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002154" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[35]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002158" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[36]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000215c" rw_flags="RW" width="1" name="BT_TX_SUPP_ANTENNA_SEQ[37]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002160" rw_flags="RW" width="1" name="ZGB_TX_CONFIG1" comment="Configuration of Buffer in the ZigBee Tx Modulator"/>
    <register addr="00002164" rw_flags="RW" width="4" name="ZGB_TX_CONFIG2" comment="Configuration of Frequency output value the ZigBee Tx Modulator"/>
    <register addr="00002168" rw_flags="RW" width="1" name="ZGB_TX_CONFIG3" comment="Configuration of Debug in the ZigBee Tx Modulator"/>
    <register addr="0000216c" rw_flags="RW" width="1" name="BT_TX_CLOCK_GATE_ORIDES" comment="Bluetooth Transmit clock gate overrides"/>
    <register addr="00002170" rw_flags="RW" width="1" name="BT_RF_RX_CFG" comment="Bluetooth Rx configuration."/>
    <register addr="00002174" rw_flags="RW" width="4" name="BT_RX_SUPP_CFG" comment="Bluetooth Rx CTE configuration."/>
    <register addr="00002178" rw_flags="RW" width="4" name="BT_RX_SUPP_CFG2" comment="Bluetooth Rx CTE configuration."/>
    <register addr="0000217c" rw_flags="R" width="1" name="BT_RX_SUPP_STATUS" comment="Bluetooth Rx CTE status information."/>
    <register addr="00002180" rw_flags="RW" width="1" name="BT_RX_INTERFACE_CTRL" comment="Bluetooth Rx Interface control."/>
    <register addr="00002184" rw_flags="RW" width="1" name="BT_RX_DEBUG_SEL[0]" comment="Bluetooth Rx debug mux select."/>
    <register addr="00002188" rw_flags="RW" width="1" name="BT_RX_DEBUG_SEL[1]" comment="Bluetooth Rx debug mux select."/>
    <register addr="0000218c" rw_flags="R" width="1" name="BT_RX_LR_CI" comment="Bluetooth Rx Long Range coding indicator."/>
    <register addr="00002190" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[0]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002194" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[1]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002198" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[2]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000219c" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[3]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021a0" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[4]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021a4" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[5]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021a8" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[6]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021ac" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[7]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021b0" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[8]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021b4" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[9]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021b8" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[10]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021bc" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[11]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021c0" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[12]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021c4" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[13]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021c8" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[14]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021cc" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[15]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021d0" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[16]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021d4" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[17]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021d8" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[18]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021dc" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[19]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021e0" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[20]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021e4" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[21]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021e8" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[22]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021ec" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[23]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021f0" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[24]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021f4" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[25]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021f8" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[26]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="000021fc" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[27]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002200" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[28]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002204" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[29]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002208" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[30]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000220c" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[31]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002210" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[32]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002214" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[33]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002218" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[34]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="0000221c" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[35]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002220" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[36]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002224" rw_flags="RW" width="1" name="BT_RX_SUPP_ANTENNA_SEQ[37]" comment="Sequence of Antenna IDs; each ID must be between 0x0 and 0xf; a maximum of 16 antenna IDs are supported in this implementation. A maximum of 75 Antenna ID in a sequence are supported."/>
    <register addr="00002228" rw_flags="RW" width="1" name="BT_RX_CTRL_DEBUG_SEL" comment="Bluetooth Rx Control debug mux select."/>
    <register addr="0000222c" rw_flags="R" width="4" name="BT_RX_BDR_SYNC_TIME" comment="The time we found BDR Sync (in relation to RFIC System Time) - uS"/>
    <register addr="00002230" rw_flags="R" width="1" name="BT_RX_BDR_SYNC_FINE_TIME" comment="The fine time we found BDR Sync (in relation to RFIC System Time) - sub uS  (runs at 80Mhz) "/>
    <register addr="00002234" rw_flags="RW" width="4" name="BT_RX_BDR_SYNC_TIMEOUT_OFFSET" comment="The number of microseconds before the BDR sync timeout is asserted from the point the Rx Digital enable is set (in reference to the RFIC system time)"/>
    <register addr="00002238" rw_flags="RW" width="4" name="BT_RX_LR_SYNC_TIMEOUT_OFFSET" comment="The number of microseconds before the LR sync timeout is asserted from the point the Rx Digital enable is set (in reference to the RFIC system time)"/>
    <register addr="0000223c" rw_flags="RW" width="4" name="BT_RX_CTRL_CFG" comment="Bluetooth Rx Control configuration."/>
    <register addr="00002240" rw_flags="RW" width="4" name="BT_RX_MLE_ESCO_OFFSET" comment="Set to enable EDR3 symbol alignment workaround logic for Java EVT0."/>
    <register addr="00002244" rw_flags="RW" width="4" name="BT_RX_MLE_ACL_OFFSET" comment="Set to enable EDR3 symbol alignment workaround logic for Java EVT0."/>
    <register addr="00002248" rw_flags="RW" width="4" name="BT_RX_MR_SYNC_TIMING" comment="BT DPSK synchronization timing configuration. Time unit un 16Mhz clock cycles"/>
    <register addr="0000224c" rw_flags="R" width="1" name="BT_RX_DUAL_SYNC" comment="If dual sync enabled this reg flags what packet we synced to (and continued to decode), cleared on start of RX"/>
    <register addr="00002250" rw_flags="RW" width="4" name="BT_RX_MR_FREQ_CONFIG" comment="BT DPSK demodulator frequency offset in bits [12:0] - Bit 15 when *** cleared *** enables spectrum inversion (change sign of Q channel *** after *** SDDCRS mixer)"/>
    <register addr="00002254" rw_flags="RW" width="4" name="BT_CAL_ANALYSER_CFG" comment="This register configures the signal analyser"/>
    <register addr="00002258" rw_flags="R" width="4" name="BT_CAL_ANALYSER_RESULT" comment="This register contains the values generated by the signal analyser, Real = [7:0], Imag = [15:8]"/>
    <register addr="0000225c" rw_flags="RW" width="2" name="BT_SIG_ANALYSER_CFG" comment="This register configures the signal analyser"/>
    <register addr="00002260" rw_flags="RW" width="1" name="BT_SIG_ANALYSER_ADC_RATE_CFG" comment="ADC Sample rate configuration bits, multiply increment by 1,2,4,8 respectively for values 0-3"/>
    <register addr="00002264" rw_flags="RW" width="2" name="BT_SIG_ANALYSER_FREQ[0]" comment="This signed value sets the frequencies of the tones used by the signal analyser. The value for a                                                                                                             given frequency can be found by multiplying by 65_536 and dividing by 16_000_000.                                                                                                             This sets the frequency of the tone used by the signal analyser.  Set any unused ones to 0"/>
    <register addr="00002268" rw_flags="RW" width="2" name="BT_SIG_ANALYSER_FREQ[1]" comment="This signed value sets the frequencies of the tones used by the signal analyser. The value for a                                                                                                             given frequency can be found by multiplying by 65_536 and dividing by 16_000_000.                                                                                                             This sets the frequency of the tone used by the signal analyser.  Set any unused ones to 0"/>
    <register addr="0000226c" rw_flags="R" width="4" name="BT_SIG_ANALYSER_I_RESULT[0]" comment="This contains the signed I values generated by the signal analyser"/>
    <register addr="00002270" rw_flags="R" width="4" name="BT_SIG_ANALYSER_I_RESULT[1]" comment="This contains the signed I values generated by the signal analyser"/>
    <register addr="00002274" rw_flags="R" width="4" name="BT_SIG_ANALYSER_Q_RESULT[0]" comment="This contains the signed Q values generated by the signal analyser"/>
    <register addr="00002278" rw_flags="R" width="4" name="BT_SIG_ANALYSER_Q_RESULT[1]" comment="This contains the signed Q values generated by the signal analyser"/>
    <register addr="0000227c" rw_flags="R" width="1" name="BT_SIG_ANALYSER_STATUS" comment="Signal analyser status bits."/>
    <register addr="00002280" rw_flags="RW" width="2" name="BT_SIG_TIMESTAMP_CFG" comment="This register configures the sig/cal analyser timestamp and scheduling block "/>
    <register addr="00002284" rw_flags="R" width="4" name="BT_SIG_TIMESTAMP_RESULT" comment="Signal or cal analyser uS timestamp bits."/>
    <register addr="00002288" rw_flags="R" width="1" name="BT_SIG_TIMESTAMP_FINE_RESULT" comment="Signal or cal analyser fine timestamp bits."/>
    <register addr="0000228c" rw_flags="RW" width="4" name="BT_RX_DEMOD_CONFIG[0]" comment="BT GFSK demodulator configuration - index 0 for BDR, 1 for BLE"/>
    <register addr="00002290" rw_flags="RW" width="4" name="BT_RX_DEMOD_CONFIG[1]" comment="BT GFSK demodulator configuration - index 0 for BDR, 1 for BLE"/>
    <register addr="00002294" rw_flags="RW" width="2" name="BT_BDR_FREQ_DISC_CONFIG" comment="Configures GFSK frequency discriminator"/>
    <register addr="00002298" rw_flags="RW" width="4" name="BT_BDR_FREQEST_ARRAY_CONFIG" comment="Configures the High Offset Frequency Estimator"/>
    <register addr="0000229c" rw_flags="RW" width="2" name="BT_BDR_FREQEST_ARRAY_CONFIG2" comment="Configures the High Offset Frequecy Estimator"/>
    <register addr="000022a0" rw_flags="RW" width="2" name="BT_RX_DEMOD_BDR_DECISION_EQ_CONFIG" comment="Configures the decision-directed BDR equaliser"/>
    <register addr="000022a4" rw_flags="RW" width="1" name="BT_PHASESQUELCH_CONFIG" comment="'Squelch' functionality for frequency discriminator"/>
    <register addr="000022a8" rw_flags="RW" width="1" name="BT_RX_DEMOD_MLSE_SOFT_BIT_WINDOW_SHIFT" comment="Selects the number of LSBs to drop from the soft bits generated."/>
    <register addr="000022ac" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_CONFIG" comment="Config for and enable for the new RX BDR enhancements provided by MLSE block"/>
    <register addr="000022b0" rw_flags="RW" width="2" name="BT_RX_DEMOD_MLSE_CONFIG2" comment="Config MLSE block, 2 sets one for LR and one for all other modes"/>
    <register addr="000022b4" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_LR_EXP_FREQ_CONFIG" comment="Config for MLSE expected FREQ, used for all BLE/BR - ignore LR in name"/>
    <register addr="000022b8" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_SYNC_CONFIG" comment="MLSE config for the LR FFT sync block"/>
    <register addr="000022bc" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_SYNC_POWER" comment="New setting for the LR FFT sync block, false sync optimisations"/>
    <register addr="000022c0" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_LR_SYNC_MIN_POWER" comment="Replace LR synchroniser ECO, create MIN_POWER reg "/>
    <register addr="000022c4" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLSE_DEBUG" comment="Debug Sel"/>
    <register addr="000022c8" rw_flags="RW" width="2" name="BT_RX_SYNC_CONFIG" comment="Additional Synchroniser config"/>
    <register addr="000022cc" rw_flags="RW" width="4" name="BT_RF_ACCESS_CODE_LAP" comment="Lower address part of BT address to generate access code"/>
    <register addr="000022d0" rw_flags="RW" width="4" name="BT_RX_WBREE_ACCESS_ADDR" comment="BLE Access Address. Sync word to search for in received packets, Bit 31 1st on air."/>
    <register addr="000022d4" rw_flags="RW" width="4" name="BT_RX_BLR_ACCESS_ADDR" comment="BLR Access Address. Sync word to search for in received packets, Bit 31 1st on air.  Seperate LR access code to make dual sync useful."/>
    <register addr="000022d8" rw_flags="RW" width="4" name="BT_RX_WBREE_ACCESS_ADDR_EXT" comment="Extended BLE (not BLR) Access Address.  2nd word on air, bit 0 last on air - experimental feature."/>
    <register addr="000022dc" rw_flags="RW" width="2" name="BT_RX_ANT_NET_ADDR" comment="ANT Network Address for Rx Synchroniser"/>
    <register addr="000022e0" rw_flags="R" width="2" name="BT_RX_SYNC_NUM_ERRORS" comment="Number of bit errors in access code"/>
    <register addr="000022e4" rw_flags="R" width="2" name="BT_RX_FREQ_DISCRIM" comment="BT GFSK frequency discriminator output"/>
    <register addr="000022e8" rw_flags="R" width="2" name="BT_RX_FREQ_ERROR" comment="BT GFSK actual frequency offset output"/>
    <register addr="000022ec" rw_flags="R" width="4" name="BT_RX_LR_FREQ_OFFSET" comment="BT LR frequency offset outputs"/>
    <register addr="000022f0" rw_flags="RW" width="2" name="BT_RX_DEMOD_MLE_CONFIG" comment="Config for and enable for the new RX EDR enhancements provided by MLE block"/>
    <register addr="000022f4" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM00" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000022f8" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM04" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="000022fc" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM08" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="00002300" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_THCOM12" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="00002304" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE00" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="00002308" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE04" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="0000230c" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE08" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="00002310" rw_flags="RW" width="4" name="BT_RX_DEMOD_MLE_HBASE12" comment="Config for EDR enhancements provided by MLE block"/>
    <register addr="00002314" rw_flags="RW" width="4" name="BT_RX_MR_SYNC_CONFIG" comment="BT DPSK demodulator synchronization configuration"/>
    <register addr="00002318" rw_flags="RW" width="2" name="BT_RX_MR_SAMP_CONFIG" comment="BT DPSK demodulator slicer configuration"/>
    <register addr="0000231c" rw_flags="RW" width="4" name="BT_RX_MR_EQ_TAPS_LSW" comment="BT DPSK RRC-filter coefficients LSW"/>
    <register addr="00002320" rw_flags="RW" width="4" name="BT_RX_MR_EQ_TAPS_MSW" comment="BT DPSK RRC-filter coefficients MSW"/>
    <register addr="00002324" rw_flags="R" width="2" name="BT_RX_MR_FREQ" comment=""/>
    <register addr="00002328" rw_flags="R" width="1" name="BT_DCRS_ADC_MON_STATUS" comment="ADC power detect output register: Note: BT_DCRS_ADC_MON_SINGLE_SHOT_EN should be set if this register is being used for scanning purposes."/>
    <register addr="0000232c" rw_flags="RW" width="1" name="BT_DCRS_ADC_MON_CS_ENABLE" comment="Conditional scan enable (turns on just sincfir and adcproc)"/>
    <register addr="00002330" rw_flags="RW" width="2" name="BT_DCRS_ADC_RSSI_CFG[0]" comment="ADC RSSI configuration (0=I, 1=Q)."/>
    <register addr="00002334" rw_flags="RW" width="2" name="BT_DCRS_ADC_RSSI_CFG[1]" comment="ADC RSSI configuration (0=I, 1=Q)."/>
    <register addr="00002338" rw_flags="RW" width="2" name="BT_DCRS_ADC_DIG_RSSI_CFG" comment="ADC RSSI configuration (0=I, 1=Q)."/>
    <register addr="0000233c" rw_flags="RW" width="1" name="BT_DCRS_CIC_CFG" comment="BT CIC decimator configuration"/>
    <register addr="00002340" rw_flags="RW" width="1" name="BT_DCRS_ADC_MON_ENABLE" comment="Enables optional ADC domain processing"/>
    <register addr="00002344" rw_flags="RW" width="2" name="BT_DCRS_ADC_MON_CONFIG[0]" comment="Optional ADC domain processing configuration, index 0 is default, 1 is BLE version"/>
    <register addr="00002348" rw_flags="RW" width="2" name="BT_DCRS_ADC_MON_CONFIG[1]" comment="Optional ADC domain processing configuration, index 0 is default, 1 is BLE version"/>
    <register addr="0000234c" rw_flags="RW" width="1" name="BT_DCRS_ADC_MON_CONFIG2" comment="Optional ADC domain processing configuration 2"/>
    <register addr="00002350" rw_flags="RW" width="1" name="BT_DCRS_ADC_MON_CS_RESET" comment="Rising edge on this signal resets ADC RMS accumulator"/>
    <register addr="00002354" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG" comment="BT AGC configuration"/>
    <register addr="00002358" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG1" comment="AGC configuration register 1"/>
    <register addr="0000235c" rw_flags="RW" width="4" name="BT_DCRS_AGC_CFG2" comment="AGC configuration register 3"/>
    <register addr="00002360" rw_flags="RW" width="2" name="BT_DCRS_AGC_LNA_RSSI_CFG" comment="LNA RSSI thresholding logic configuration"/>
    <register addr="00002364" rw_flags="RW" width="2" name="BT_DCRS_AGC_MIX_RSSI_CFG" comment="MIX RSSI thresholding logic configuration"/>
    <register addr="00002368" rw_flags="RW" width="2" name="BT_DCRS_AGC_ABB_RSSI_CFG" comment="ABB RSSI thresholding logic configuration"/>
    <register addr="0000236c" rw_flags="RW" width="2" name="BT_DCRS_AGC_ADC_ANA_RSSI_CFG" comment="ADC_ANA RSSI thresholding logic configuration"/>
    <register addr="00002370" rw_flags="RW" width="2" name="BT_DCRS_AGC_SW_CTRL" comment="SW override enables"/>
    <register addr="00002374" rw_flags="R" width="1" name="BT_DCRS_AGC_STATUS_COMMON" comment="AGC status."/>
    <register addr="00002378" rw_flags="R" width="4" name="BT_DCRS_AGC_STATUS_SAT" comment="AGC status."/>
    <register addr="0000237c" rw_flags="R" width="4" name="BT_DCRS_AGC_STATUS_GAIN" comment="AGC status."/>
    <register addr="00002380" rw_flags="RW" width="1" name="BT_DCRS_AGC_EN_SRC" comment="Configures AGC enable criteria"/>
    <register addr="00002384" rw_flags="RW" width="4" name="BT_DCRS_AGC_GAIN_STEPS" comment="AGC step values for each saturation indicator"/>
    <register addr="00002388" rw_flags="RW" width="2" name="BT_DCRS_AGC_SATRST" comment="Configurable AGC Saturation Indicator resets"/>
    <register addr="0000238c" rw_flags="RW" width="2" name="BT_DCRS_AGC_EQ_PWR_THR" comment="(Post digital gain) power threshold register for digital gain control"/>
    <register addr="00002390" rw_flags="RW" width="4" name="BT_DCRS_AGC_BB_PWR_THR[0]" comment="(Pre and  post digital gain) power threshold register for analog gain control, index 0 is default, 1 is BLE version"/>
    <register addr="00002394" rw_flags="RW" width="4" name="BT_DCRS_AGC_BB_PWR_THR[1]" comment="(Pre and  post digital gain) power threshold register for analog gain control, index 0 is default, 1 is BLE version"/>
    <register addr="00002398" rw_flags="RW" width="1" name="BT_DCRS_AGC_FAST_DIG_CTRL_CFG" comment="(Pre digital gain) power threshold register for fast digital control of the analogue gains"/>
    <register addr="0000239c" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG0[0]" comment="BT baseband equalizer filter coefficients, index 0 is default, 1 is BLE version"/>
    <register addr="000023a0" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG0[1]" comment="BT baseband equalizer filter coefficients, index 0 is default, 1 is BLE version"/>
    <register addr="000023a4" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG1[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023a8" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG1[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023ac" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG2[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023b0" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG2[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023b4" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG3[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023b8" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG3[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023bc" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG4[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023c0" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG4[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023c4" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG5[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023c8" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG5[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023cc" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG6[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023d0" rw_flags="RW" width="4" name="BT_DCRS_BB_EQ_CFG6[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023d4" rw_flags="RW" width="2" name="BT_DCRS_BB_EQ_CFG7[0]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023d8" rw_flags="RW" width="2" name="BT_DCRS_BB_EQ_CFG7[1]" comment="BT baseband equalizer filter coefficients"/>
    <register addr="000023dc" rw_flags="RW" width="1" name="BT_DCRS_EQ_CONFIG" comment="BT baseband equalizer configuration"/>
    <register addr="000023e0" rw_flags="RW" width="2" name="BT_DCRS_DBG_CFG" comment="BT debug mux configuration"/>
    <register addr="000023e4" rw_flags="RW" width="2" name="BT_DCRS_IF_EQ_CFG" comment="BT IF equalizer filter coefficients"/>
    <register addr="000023e8" rw_flags="RW" width="1" name="BT_DCRS_IIR_CONFIG[0]" comment="IIR decimation configuration, index 0 is default, 1 is BLE version"/>
    <register addr="000023ec" rw_flags="RW" width="1" name="BT_DCRS_IIR_CONFIG[1]" comment="IIR decimation configuration, index 0 is default, 1 is BLE version"/>
    <register addr="000023f0" rw_flags="RW" width="4" name="BT_DCRS_TINC_CFG" comment="BT resampling ratio configuration - Must be calculated as round((1 - 16*(BT_DCRS_CIC_DEC+1)/fAdc_MHz) * 2^26) - Use floor instead of round if BT_DCRS_PHASE_LOCK is set"/>
    <register addr="000023f4" rw_flags="RW" width="1" name="BT_DCRS_LINT_CFG" comment="BT linear interpolator configuration"/>
    <register addr="000023f8" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_SHIFTS_LNA0" comment=""/>
    <register addr="000023fc" rw_flags="RW" width="2" name="BT_DCRS_PHASECOMP_SHIFTS_LNA1" comment=""/>
    <register addr="00002400" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_SHIFTS_MIX0" comment=""/>
    <register addr="00002404" rw_flags="RW" width="2" name="BT_DCRS_PHASECOMP_SHIFTS_ADC" comment=""/>
    <register addr="00002408" rw_flags="RW" width="4" name="BT_DCRS_PHASECOMP_DELAYS" comment="Phase compensator delay values"/>
    <register addr="0000240c" rw_flags="RW" width="2" name="BT_DCRS_NOM_IF_BT_CFG" comment="BT nominal IF"/>
    <register addr="00002410" rw_flags="R" width="2" name="BT_DCRS_FREQ_OFFSET_STATUS" comment=""/>
    <register addr="00002414" rw_flags="R" width="4" name="BT_DCRS_BB_PWR_STATUS" comment="Measured baseband power (pre-digital gain)"/>
    <register addr="00002418" rw_flags="R" width="2" name="BT_DCRS_EQ_PWR_STATUS_AT_SYNC" comment="This is not exactly EqPwr registered at Sync. It is the post-digital gain signal power averaged over the longer period of time used for BbPwr. In order to measure this, we use BbPwr and compensate for the digital gain at Sync. This results in a stabilised RSSI value after digital gain. It also produces a 16-bit result which the XAP can more easily manage than the raw BBPwrAtSync (32 bit)Measured baseband power (post-digital gain) obtained at RxSync, averaged over the longer period of time used for pre-digital gain measurements."/>
    <register addr="0000241c" rw_flags="R" width="2" name="BT_DCRS_EQ_PWR_STATUS" comment="Raw EqPwr"/>
    <register addr="00002420" rw_flags="RW" width="2" name="BT_DCRS_AGC_PWR_MEAS" comment="AGC power measure configuration"/>
    <register addr="00002424" rw_flags="RW" width="1" name="BT_DCRS_SYNCPHASE_CONFIG" comment="Configures phase of clock synchronization buffer"/>
    <register addr="00002428" rw_flags="RW" width="4" name="ZGB_RX_CCA_CARRIER_SENSE_CFG" comment="Carrier Sense for detecting ZigBee signal"/>
    <register addr="0000242c" rw_flags="RW" width="4" name="ZGB_RX_INIT_ACQ_CFG" comment="Configuration for Initial Acquisition"/>
    <register addr="00002430" rw_flags="RW" width="4" name="ZGB_RX_INIT_ACQ2_CFG" comment="Configuration2 for Initial Acquisition"/>
    <register addr="00002434" rw_flags="RW" width="2" name="ZGB_RX_CTRL_DEBUG_SEL" comment="Rx Zigbee debug mux select."/>
    <register addr="00002438" rw_flags="RW" width="4" name="ZGB_RX_DISC_CFG" comment="Rx Zigbee Discriminator configuration."/>
    <register addr="0000243c" rw_flags="R" width="2" name="ZGB_RX_DISC_CFG2" comment="Rx Zigbee Discriminator configuration2."/>
    <register addr="00002440" rw_flags="RW" width="1" name="ZGB_RX_CFG" comment="General Configuration."/>
    <register addr="00002444" rw_flags="RW" width="2" name="ZGB_RX_LR_CFG" comment="General Long Range Configuration."/>
    <register addr="00002448" rw_flags="RW" width="2" name="BT_RX_CLOCK_GATE_ORIDES" comment="Bluetooth Receive clock gate overrides"/>
    <register addr="0000244c" rw_flags="RW" width="1" name="BT_TX_TIMER_CFG" comment="Bluetooth Transmit Radio Timer configuration."/>
    <register addr="00002450" rw_flags="R" width="1" name="BT_TX_TIMER_STATUS" comment="Bluetooth Transmit Radio Timer status."/>
    <register addr="00002454" rw_flags="W" width="1" name="BT_TX_TIMER_SW_TRIGGERS" comment="Bluetooth Transmit Radio Timer software triggers - write sensitive."/>
    <register addr="00002458" rw_flags="RW" width="4" name="BT_TX_TIMER_EVENT_TIME" comment="Set the required Tx event time. Used when timing to an event, not used when timing from an event."/>
    <register addr="0000245c" rw_flags="RW" width="1" name="BT_TX_TIMER_DIG_SW_ORIDE" comment="Bluetooth Transmit Radio Timer digital enable software overrides."/>
    <register addr="00002460" rw_flags="RW" width="1" name="BT_TX_TIMER_TRIGGER_START" comment="Bluetooth Tx Radio Timer - Start trigger configuration."/>
    <register addr="00002464" rw_flags="RW" width="1" name="BT_TX_TIMER_TRIGGER_SW_ABORT" comment="Bluetooth Tx Radio Timer - Software Abort trigger configuration."/>
    <register addr="00002468" rw_flags="RW" width="1" name="BT_TX_TIMER_TRIGGER_DONE" comment="Bluetooth Tx Radio Timer - Done trigger configuration."/>
    <register addr="0000246c" rw_flags="RW" width="1" name="BT_TX_TIMER_TRIGGER_COEX_ABORT" comment="Bluetooth Tx Radio Timer - Coex Abort trigger configuration."/>
    <register addr="00002470" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT0_ANA_EN" comment="Transmit slot  0 Analogue Enables"/>
    <register addr="00002474" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT1_ANA_EN" comment="Transmit slot  1 Analogue Enables"/>
    <register addr="00002478" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT2_ANA_EN" comment="Transmit slot  2 Analogue Enables"/>
    <register addr="0000247c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT3_ANA_EN" comment="Transmit slot  3 Analogue Enables"/>
    <register addr="00002480" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT4_ANA_EN" comment="Transmit slot  4 Analogue Enables"/>
    <register addr="00002484" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT5_ANA_EN" comment="Transmit slot  5 Analogue Enables"/>
    <register addr="00002488" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT6_ANA_EN" comment="Transmit slot  6 Analogue Enables"/>
    <register addr="0000248c" rw_flags="RW" width="4" name="BT_TX_TIMER_SLOT7_ANA_EN" comment="Transmit slot  7 Analogue Enables"/>
    <register addr="00002490" rw_flags="RW" width="4" name="BT_TX_TIMER_DIG0_EN" comment=""/>
    <register addr="00002494" rw_flags="RW" width="4" name="BT_TX_TIMER_DELAY0" comment=""/>
    <register addr="00002498" rw_flags="RW" width="4" name="BT_TX_TIMER_DELAY1" comment=""/>
    <register addr="0000249c" rw_flags="RW" width="1" name="BT_RX_TIMER_CFG" comment="Bluetooth Rx Radio Timer configuration."/>
    <register addr="000024a0" rw_flags="R" width="1" name="BT_RX_TIMER_STATUS" comment="Bluetooth Rx Radio Timer status."/>
    <register addr="000024a4" rw_flags="W" width="1" name="BT_RX_TIMER_SW_TRIGGERS" comment="Bluetooth Rx Radio Timer software triggers - write sensitive."/>
    <register addr="000024a8" rw_flags="RW" width="4" name="BT_RX_TIMER_EVENT_TIME" comment="Set the required Tx event time. Used when timing to an event, not used when timing from an event."/>
    <register addr="000024ac" rw_flags="RW" width="1" name="BT_RX_TIMER_DIG_SW_ORIDE" comment="Override timer digital outputs, when masked."/>
    <register addr="000024b0" rw_flags="RW" width="1" name="BT_RX_TIMER_TRIGGER_START" comment="Bluetooth Rx Radio Timer - Start trigger configuration."/>
    <register addr="000024b4" rw_flags="RW" width="1" name="BT_RX_TIMER_TRIGGER_SW_ABORT" comment="Bluetooth Rx Radio Timer - Softwre Abort trigger configuration."/>
    <register addr="000024b8" rw_flags="RW" width="1" name="BT_RX_TIMER_TRIGGER_DONE" comment="Bluetooth Rx Radio Timer - Done trigger configuration."/>
    <register addr="000024bc" rw_flags="RW" width="1" name="BT_RX_TIMER_TRIGGER_COEX_ABORT" comment="Bluetooth Rx Radio Timer - Coex Abort trigger configuration."/>
    <register addr="000024c0" rw_flags="RW" width="1" name="BT_RX_TIMER_TRIGGER_MLSE_EARLY" comment="Bluetooth Rx Radio Timer - MLSE Early trigger configuration."/>
    <register addr="000024c4" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT0_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024c8" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT1_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024cc" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT2_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024d0" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT3_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024d4" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT4_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024d8" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT5_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024dc" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT6_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024e0" rw_flags="RW" width="4" name="BT_RX_TIMER_SLOT7_ANA_EN" comment="Receive slot  0 Analogue Enables"/>
    <register addr="000024e4" rw_flags="RW" width="4" name="BT_RX_TIMER_DIG0_EN" comment=""/>
    <register addr="000024e8" rw_flags="RW" width="4" name="BT_RX_TIMER_DELAY0" comment=""/>
    <register addr="000024ec" rw_flags="RW" width="4" name="BT_RX_TIMER_DELAY1" comment=""/>
    <register addr="000024f0" rw_flags="RW" width="1" name="BT_IQ_CAP_CONTROL" comment="General control register (state is persistant)"/>
    <register addr="000024f4" rw_flags="RW" width="1" name="BT_IQ_CAP_SOURCE" comment="Selects the capture source from the BT_IQ_CAP_SOURCE_ENUMS enums."/>
    <register addr="000024f8" rw_flags="RW" width="1" name="BT_IQ_CAP_START_TRIGGER" comment="Selects the starting trigger from the BT_IQ_CAP_TRIGGER_ENUMS enums."/>
    <register addr="000024fc" rw_flags="RW" width="1" name="BT_IQ_CAP_STOP_TRIGGER" comment="Selects the stopping trigger from the BT_IQ_CAP_TRIGGER_ENUMS enums."/>
    <register addr="00002500" rw_flags="RW" width="4" name="BT_IQ_CAP_TRIGGER_AT_SYSTEM_TIME" comment="When SYSTEM_TIME=TRIGGER_AT_SYSTEM_TIME, and SYSTEM_FINE_TIME=TRIGGER_AT_SYSTEM_FINE_TIME, the timer trigger fires."/>
    <register addr="00002504" rw_flags="RW" width="1" name="BT_IQ_CAP_TRIGGER_AT_SYSTEM_FINE_TIME" comment="When SYSTEM_TIME=TRIGGER_AT_SYSTEM_TIME, and SYSTEM_FINE_TIME=TRIGGER_AT_SYSTEM_FINE_TIME, the timer trigger fires. Provides 80MHz, 12.5ns resolution."/>
    <register addr="00002508" rw_flags="R" width="1" name="BT_IQ_CAP_BUFFER_WRITE_POINTER" comment="The index into the sample buffer of the next sample to be written. This will be at bit number WRITE_POINTER x BT_IQ_CAP_SOURCE_SAMPLE_WIDTH in the buffer."/>
    <register addr="0000250c" rw_flags="R" width="1" name="BT_IQ_CAP_BUFFER_START_POINTER" comment="The index into the sample buffer of the earliest valid sample. This will be at bit number START_POINTER x BT_IQ_CAP_SOURCE_SAMPLE_WIDTH in the buffer."/>
    <register addr="00002510" rw_flags="R" width="1" name="BT_IQ_CAP_NUM_VALID_SAMPLES_IN_BUFFER" comment="How many valid samples are in the buffer"/>
    <register addr="00002514" rw_flags="R" width="4" name="BT_IQ_CAP_LAST_SAMPLE_SYSTEM_TIME" comment="the value of SYSTEM_TIME at the time the last IQ sample was captured. Resolution 1us."/>
    <register addr="00002518" rw_flags="R" width="1" name="BT_IQ_CAP_LAST_SAMPLE_SYSTEM_FINE_TIME" comment="the value of SYSTEM_FINE_TIME at the time the last IQ sample was captured. Subdivision of SYSTEM_TIME. Resolution 80MHz / 12.5ns"/>
    <register addr="0000251c" rw_flags="R" width="1" name="BT_IQ_CAP_STATUS" comment="General status register"/>
    <register addr="00002520" rw_flags="RW" width="2" name="BT_IQ_CAP_STROBE_GENERATOR" comment="Control register for generating a strobe for a data source that isn't running at the expected speed."/>
    <register addr="00002524" rw_flags="RW" width="1" name="BT_IQ_CAP_PRECAPTURE_SAMPLES" comment="Number of words to store before the starting trigger is fired. This allows samples to be read that were captured before the starting trigger. In addition, this mode can also be used to capture samples without an explicit trigger by setting it to the size of the capture buffer (in samples) so one full buffer's worth of data is captured after BT_IQ_CAP_ON_RFIC_CONTROL[ENABLE] = 1."/>
    <register addr="00002528" rw_flags="RW" width="1" name="BT_IQ_CAP_DEBUG_SELECT" comment="Debug Select"/>
    <register addr="0000252c" rw_flags="R" width="2" name="BT_IQ_CAP_DEBUG_STATUS" comment="Debug Status"/>
    <register addr="00002530" rw_flags="RW" width="1" name="BT_IQ_CAP_BUFFER_READ_ADDRESS" comment="The index to read values of the capture memory. Auto increments by 1 when BT_IQ_CAP_BUFFER_READ is read, and wraps at the end of the buffer. But can also be set directly."/>
    <register addr="00002534" rw_flags="R" width="4" name="BT_IQ_CAP_BUFFER_READ" comment="Read the value of the capture buffer at address BT_IQ_CAP_BUFFER_READ_ADDRESS. Returns 24-bits. BT_IQ_CAP_BUFFER_READ_ADDRESS autoincrements by 1 after the read. Note that samples may need to realigned by bitshifting etc according to their width if NO_PACKING=0."/>
    <register addr="00002538" rw_flags="R" width="1" name="BT_ANA_STATUS" comment="Miscellaneous readable analogue bits"/>
    <register addr="0000253c" rw_flags="R" width="2" name="BT_ANA_BT_STATUS_SPARE" comment=""/>
    <register addr="00002540" rw_flags="RW" width="4" name="BT_ANA_MISC" comment=""/>
    <register addr="00002544" rw_flags="RW" width="4" name="BT_ANA_STATIC_SPARE" comment="SPARE"/>
    <register addr="00002548" rw_flags="RW" width="4" name="BT_ANA_RXABB" comment=""/>
    <register addr="0000254c" rw_flags="RW" width="1" name="BT_ANA_RXABB_1" comment=""/>
    <register addr="00002550" rw_flags="RW" width="4" name="BT_ANA_RXRF" comment=""/>
    <register addr="00002554" rw_flags="RW" width="4" name="BT_ANA_RXRF_1" comment=""/>
    <register addr="00002558" rw_flags="RW" width="4" name="BT_ANA_TXBB_0" comment=""/>
    <register addr="0000255c" rw_flags="RW" width="4" name="BT_ANA_TXRF_0" comment=""/>
    <register addr="00002560" rw_flags="RW" width="4" name="BT_ANA_TXRF_1" comment=""/>
    <register addr="00002564" rw_flags="RW" width="4" name="BT_ANA_TXRF_2" comment=""/>
    <register addr="00002568" rw_flags="RW" width="4" name="BT_ANA_TXRF_3" comment=""/>
    <register addr="0000256c" rw_flags="RW" width="1" name="BT_ANA_TXRF_MIXER_RESERVE" comment="TODO for S621P"/>
    <register addr="00002570" rw_flags="RW" width="1" name="BT_ANA_TXRF_RESERVE" comment="TODO for S621P"/>
    <register addr="00002574" rw_flags="RW" width="4" name="BT_ANA_LO_CLKREF_ADC" comment="TDC control register"/>
    <register addr="00002578" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_OPEN1" comment="DCO control register for open-loop test"/>
    <register addr="0000257c" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_OPEN2" comment="Coarse-tune control code for open-loop test"/>
    <register addr="00002580" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_TEST" comment="DCO control register for test"/>
    <register addr="00002584" rw_flags="RW" width="4" name="BT_ANA_LO_LO_TEST" comment="LO control register for test"/>
    <register addr="00002588" rw_flags="RW" width="4" name="BT_ANA_LO_PU_DCO_CONF1" comment="DCO TOP block power control register"/>
    <register addr="0000258c" rw_flags="RW" width="4" name="BT_ANA_LO_PU_DCO_CONF2" comment="DCO BUF power control register"/>
    <register addr="00002590" rw_flags="RW" width="4" name="BT_ANA_LO_PU_TDC_CONF" comment="TDC block control register"/>
    <register addr="00002594" rw_flags="RW" width="4" name="BT_ANA_LO_REG_CONF" comment="LDO and BUF control register"/>
    <register addr="00002598" rw_flags="RW" width="4" name="BT_ANA_LO_TOP" comment="PLL power control register"/>
    <register addr="0000259c" rw_flags="RW" width="1" name="BT_ANA_LO_MISC" comment="This register is one of the LO configuration registers"/>
    <register addr="000025a0" rw_flags="RW" width="4" name="BT_ANA_DIV" comment="This register is one of the WLAN LO configuration registers"/>
    <register addr="000025a4" rw_flags="RW" width="2" name="BT_ANA_RXADC_TEST" comment="Test enables for lab testing."/>
    <register addr="000025a8" rw_flags="RW" width="4" name="BT_ANA_RXADC" comment=""/>
    <register addr="000025ac" rw_flags="RW" width="4" name="BT_ANA_RXADC_1" comment=""/>
    <register addr="000025b0" rw_flags="R" width="1" name="BT_ANA_RXADC_STATUS" comment=""/>
    <register addr="000025b4" rw_flags="RW" width="1" name="BT_ANA_DEBUG_SEL" comment=""/>
    <register addr="000025b8" rw_flags="RW" width="1" name="BT_ANA_LO_SW_START" comment="Write 1 to start the LO"/>
    <register addr="000025bc" rw_flags="RW" width="1" name="BT_ANA_LO_SW_STOP" comment="Write 1 to stop the LO"/>
    <register addr="000025c0" rw_flags="R" width="1" name="BT_ANA_LO_CTRL_STATE" comment="The state of the RFIC_DGT_LO_CTRL block, which controls the DPLL start/stop."/>
    <register addr="000025c4" rw_flags="RW" width="4" name="BT_ANA_SW_ENABLES" comment="Override value for timer outputs when not controlled by timer"/>
    <register addr="000025c8" rw_flags="RW" width="4" name="BT_ANA_SW_ENABLES_MASK" comment="Selects whether timer outputs or override bits are used for analogue"/>
    <register addr="000025cc" rw_flags="R" width="4" name="BT_ANA_ENABLES_STATUS" comment="Shows values being driven to analogue interface after timer and masking function is resolved"/>
    <register addr="000025d0" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[0]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025d4" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[1]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025d8" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[2]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025dc" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[3]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025e0" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[4]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025e4" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[5]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025e8" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[6]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025ec" rw_flags="RW" width="4" name="BT_ANA_LNA_LUT[7]" comment="Main LUT for decoding LNA gain from AGC into separate controls"/>
    <register addr="000025f0" rw_flags="R" width="4" name="BT_ANA_LO_DPLL_TEST_STATUS" comment="This register contains test outputs from the LO"/>
    <register addr="000025f4" rw_flags="R" width="2" name="BT_ANA_LO_DPLL_PM_STATUS" comment="This register contains PM outputs from the LO"/>
    <register addr="000025f8" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF1" comment="This register is one of the LO configuration registers"/>
    <register addr="000025fc" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF2[0]" comment="This register is one of the LO configuration registers, index 0 of the reg is default, index 1 is used in polar mode. "/>
    <register addr="00002600" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF2[1]" comment="This register is one of the LO configuration registers, index 0 of the reg is default, index 1 is used in polar mode. "/>
    <register addr="00002604" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_CONF3" comment="This register is one of the LO configuration registers"/>
    <register addr="00002608" rw_flags="RW" width="4" name="BT_ANA_LO_DPLL_TEST" comment="This register is one of the LO configuration registers"/>
    <register addr="0000260c" rw_flags="RW" width="4" name="BT_ANA_LO_D_FREQ1" comment="This register is one of the LO configuration registers"/>
    <register addr="00002610" rw_flags="RW" width="4" name="BT_ANA_LO_D_FREQ2" comment="This register is one of the LO configuration registers"/>
    <register addr="00002614" rw_flags="RW" width="2" name="BT_ANA_LO_PM_CONF[0]" comment="9-bits register, index 0 of the reg is default for, index 1 is used for 2M mode. "/>
    <register addr="00002618" rw_flags="RW" width="2" name="BT_ANA_LO_PM_CONF[1]" comment="9-bits register, index 0 of the reg is default for, index 1 is used for 2M mode. "/>
    <register addr="0000261c" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_CONF1" comment="This register is one of the LO configuration registers"/>
    <register addr="00002620" rw_flags="RW" width="4" name="BT_ANA_LO_DCO_CONF2" comment="This register is one of the LO configuration registers"/>
    <register addr="00002624" rw_flags="RW" width="4" name="BT_ANA_LO_PLL_RESV" comment="This register is one of the LO configuration registers"/>
    <register addr="00002628" rw_flags="RW" width="4" name="BT_ANA_LO_TDC_NLMEM" comment="This register is one of the LO configuration registers"/>
    <register addr="0000262c" rw_flags="R" width="1" name="BT_ANT_ID" comment="Currently selected BT antenna ID, a maximum of 16 antennae are supported in this implementation."/>
    <register addr="00002630" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[0]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002634" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[1]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002638" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[2]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="0000263c" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[3]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002640" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[4]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002644" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[5]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002648" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[6]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="0000264c" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[7]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002650" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[8]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002654" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[9]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002658" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[10]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="0000265c" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[11]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002660" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[12]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002664" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[13]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="00002668" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[14]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
    <register addr="0000266c" rw_flags="RW" width="2" name="BT_ANT_SEL_FEM_CTRL_ID[15]" comment="Antenna ID to FEM_CTRL pin mapping. LSB maps to FEM_CTRL0, MSB to FEM_CTRL10"/>
  </block>
  <block name="btwl_common" comment="Common BT/WLAN registers in RFIC.">
    <register addr="00001000" rw_flags="RW" width="2" name="AUX_BIST_ADC_CTRL" comment="Control register for auxiliary ADC"/>
    <register addr="00001004" rw_flags="RW" width="2" name="AUX_BIST_ADC_LEVEL" comment="DAC value driven to auxiliary ADC"/>
    <register addr="00001008" rw_flags="R" width="2" name="AUX_BIST_ADC_STATUS" comment="Returns the data from auxiliary ADC"/>
    <register addr="0000100c" rw_flags="RW" width="2" name="BTWL_BIST_ADC_CTRL" comment="Control register for auxiliary ADC"/>
    <register addr="00001010" rw_flags="RW" width="2" name="BTWL_BIST_ADC_LEVEL" comment="DAC value driven to auxiliary ADC"/>
    <register addr="00001014" rw_flags="R" width="2" name="BTWL_BIST_ADC_STATUS" comment="Returns the data from auxiliary ADC"/>
    <register addr="00001018" rw_flags="RW" width="4" name="RFIC_DEBUG_MUX_CFG" comment="BTWL Debug Mux Config"/>
    <register addr="0000101c" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG" comment="BTWL Debug Config"/>
    <register addr="00001020" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG2" comment="BTWL Debug Config register 2"/>
    <register addr="00001024" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG3" comment="BTWL Debug Config register 3"/>
    <register addr="00001028" rw_flags="RW" width="4" name="RFIC_DEBUG_CFG4" comment="BTWL Debug Config register 3"/>
    <register addr="0000102c" rw_flags="RW" width="4" name="RFIC_DEBUG_DDR_MUX" comment="DDR Debug Mux - select what source drives each DDR pin"/>
    <register addr="00001030" rw_flags="RW" width="2" name="RFIC_DEBUG_DDR_INPUT_MUX" comment="DDR Input Mux - select which DDR pin drives which TX IQ input"/>
    <register addr="00001034" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[0]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001038" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[1]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="0000103c" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[2]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001040" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[3]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001044" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[4]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001048" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[5]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="0000104c" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[6]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001050" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[7]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001054" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[8]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001058" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[9]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="0000105c" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[10]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001060" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[11]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001064" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[12]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001068" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[13]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="0000106c" rw_flags="RW" width="1" name="RFIC_DEBUG_MUX_PAD_CTRL[14]" comment="Debug Mux for pin. Indexes match the PAD_PARAMS_SDR_DBG_INDEXES enum."/>
    <register addr="00001070" rw_flags="RW" width="4" name="RFIC_DEBUG_MUX_SERIAL0" comment="Serialiser 0 control for Debug"/>
    <register addr="00001074" rw_flags="RW" width="4" name="RFIC_DEBUG_MUX_SERIAL1" comment="Serialiser 1 control for Debug"/>
    <register addr="00001078" rw_flags="RW" width="2" name="RFIC_DEBUG_SERIAL_CFG" comment="Serialiser input config"/>
    <register addr="0000107c" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE0" comment="Serialiser input config"/>
    <register addr="00001080" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE1" comment="Serialiser input config"/>
    <register addr="00001084" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE2" comment="Serialiser input config"/>
    <register addr="00001088" rw_flags="RW" width="4" name="RFIC_DEBUG_SERIAL_BIT_WISE3" comment="Serialiser input config"/>
    <register addr="0000108c" rw_flags="RW" width="4" name="RFIC_DEBUG_ZIPPY_CFG" comment="Zippy 18-bit Debug input config"/>
    <register addr="00001090" rw_flags="R" width="2" name="RFIC_DEBUG_PAD_SDR_STATUS" comment="Debug Pad Inputs"/>
    <register addr="00001094" rw_flags="R" width="2" name="RFIC_DEBUG_PAD_DDR_STATUS" comment="Debug Pad DDR Inputs"/>
    <register addr="00001098" rw_flags="RW" width="1" name="RFIC_BRACKEN_MEM_ADDR" comment="Bracken Code/Data Mem Address"/>
    <register addr="0000109c" rw_flags="RW" width="4" name="RFIC_BRACKEN_MEM_WDATA" comment="Bracken Code/Data Mem Write Data - auto increments address on write"/>
    <register addr="000010a0" rw_flags="R" width="4" name="RFIC_BRACKEN_MEM_RDATA" comment="Bracken Code/Data Mem Read Data - auto increments address on read"/>
    <register addr="000010a4" rw_flags="RW" width="4" name="RFIC_BRACKEN_CFG" comment="Confg register for RFIC Processor block"/>
    <register addr="000010a8" rw_flags="RW" width="4" name="RFIC_BRACKEN_ENABLES" comment="Confg register for RFIC Processor block"/>
    <register addr="000010ac" rw_flags="RW" width="4" name="RFIC_BRACKEN_IRQ_SOURCE_SEL" comment="Confg register for RFIC Processor block"/>
    <register addr="000010b0" rw_flags="RW" width="1" name="RFIC_BRACKEN_DTCP_MEM_ADDR" comment="Bracken DTCP Mem Address - Data mem is above Instr mem so address is wide enough for both"/>
    <register addr="000010b4" rw_flags="RW" width="4" name="RFIC_BRACKEN_DTCP_MEM_WDATA" comment="Bracken DTCP Mem Write Data"/>
    <register addr="000010b8" rw_flags="R" width="4" name="RFIC_BRACKEN_DTCP_MEM_RDATA" comment="Bracken DTCP Mem Read Data"/>
    <register addr="000010bc" rw_flags="RW" width="1" name="RFIC_BRACKEN_DTCP0_REG_ADDR" comment="Bracken DTCP0 Regs Address"/>
    <register addr="000010c0" rw_flags="RW" width="4" name="RFIC_BRACKEN_DTCP0_REG_WDATA" comment="Bracken DTCP0 Regs Write Data"/>
    <register addr="000010c4" rw_flags="R" width="4" name="RFIC_BRACKEN_DTCP0_REG_RDATA" comment="Bracken DTCP0 Regs Read Data"/>
    <register addr="000010c8" rw_flags="RW" width="1" name="RFIC_BRACKEN_DTCP1_REG_ADDR" comment="Bracken DTCP1 Regs Address"/>
    <register addr="000010cc" rw_flags="RW" width="4" name="RFIC_BRACKEN_DTCP1_REG_WDATA" comment="Bracken DTCP1 Regs Write Data"/>
    <register addr="000010d0" rw_flags="R" width="4" name="RFIC_BRACKEN_DTCP1_REG_RDATA" comment="Bracken DTCP1 Regs Read Data"/>
    <register addr="000010d4" rw_flags="R" width="4" name="RFIC_DEBUG_STATUS" comment="Main Debug Status register"/>
    <register addr="000010d8" rw_flags="RW" width="2" name="RFIC_SW_ZIPPY_TO_BB_FLAGS" comment="Zippy flag data (info and channel) to be sent to BBIC"/>
    <register addr="000010dc" rw_flags="RW" width="1" name="RFIC_SW_ZIPPY_TO_RF_FILTER" comment="Filter bitmap for Zippy channels that cause an interrupt to be raised on traffic to the RFIC, set to 1 to get an interrupt for that channel"/>
    <register addr="000010e0" rw_flags="RW" width="2" name="RFIC_SW_ZIPPY_TO_BB_CFG" comment="Zippy channel configuration for SW data to the BBIC"/>
    <register addr="000010e4" rw_flags="R" width="2" name="RFIC_SW_ZIPPY_TO_RF_FLAGS" comment="Zippy flag data to the RFIC, plus latched Valid and Ack"/>
    <register addr="000010e8" rw_flags="RW" width="2" name="RFIC_ZIPPY_ORIDE_CFG" comment="Zippy override config"/>
    <register addr="000010ec" rw_flags="RW" width="4" name="RFIC_ZIPPY_ORIDE_DATA" comment="Zippy override data for Zippy-to-BTWL Flags busses"/>
    <register addr="000010f0" rw_flags="R" width="2" name="RFIC_ZIPPY_FLAGS_MON" comment="Zippy monitor for BTWL-to-Zippy Flags, bus selected from RFIC_ZIPPY_ORIDE_CFG register"/>
    <register addr="000010f4" rw_flags="RW" width="2" name="RFIC_BRACKEN_TIMER" comment="Bracken Timer"/>
    <register addr="000010f8" rw_flags="R" width="4" name="RFIC_PROC_STATUS" comment="Status information for rfic_proc"/>
    <register addr="000010fc" rw_flags="RW" width="4" name="RFIC_PROC_COMMS[0]" comment="Comms register for rfic_proc - Bracken Interrupt on Write"/>
    <register addr="00001100" rw_flags="RW" width="4" name="RFIC_PROC_COMMS[1]" comment="Comms register for rfic_proc - Bracken Interrupt on Write"/>
    <register addr="00001104" rw_flags="R" width="4" name="RFIC_PROC_PC_HISTORY" comment="History of PC from last 4 clock cycles"/>
    <register addr="00001108" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[0]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000110c" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[1]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001110" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[2]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001114" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[3]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001118" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[4]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000111c" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[5]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001120" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[6]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001124" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[7]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001128" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[8]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000112c" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[9]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001130" rw_flags="RW" width="1" name="RFIC_MON_BT_INV[10]" comment="Optional invert for particular BT D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001134" rw_flags="R" width="4" name="RFIC_MON_BT_AD[0]" comment="Monitor BT AD signals right at the AD interface"/>
    <register addr="00001138" rw_flags="R" width="4" name="RFIC_MON_BT_AD[1]" comment="Monitor BT AD signals right at the AD interface"/>
    <register addr="0000113c" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[0]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001140" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[1]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001144" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[2]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001148" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[3]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000114c" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[4]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001150" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[5]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001154" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[6]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001158" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[7]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="0000115c" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[8]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001160" rw_flags="RW" width="2" name="RFIC_MON_WL_INV[9]" comment="Optional invert for particular WLAN D2A/A2D dynamic signals. Check RTL for bit positions."/>
    <register addr="00001164" rw_flags="R" width="4" name="RFIC_MON_WL_AD[0]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001168" rw_flags="R" width="4" name="RFIC_MON_WL_AD[1]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="0000116c" rw_flags="R" width="4" name="RFIC_MON_WL_AD[2]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001170" rw_flags="R" width="4" name="RFIC_MON_WL_AD[3]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001174" rw_flags="R" width="4" name="RFIC_MON_WL_AD[4]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="00001178" rw_flags="R" width="4" name="RFIC_MON_WL_AD[5]" comment="Monitor WL Path AD signals right at the AD interface."/>
    <register addr="0000117c" rw_flags="RW" width="1" name="RFIC_MON_COEX_INV[0]" comment="Optional invert for particular Coex D2A/A2D dynamic signals. Check RTL for bit positions."/>
  </block>
  <block name="coex_rf_btpath" comment="Coexistence RFIC Registers for a BT antenna path.">
    <register addr="00006000" rw_flags="RW" width="1" name="COEX_RF_BTP_CFG" comment="Coexistence RFIC configuration."/>
    <register addr="00006004" rw_flags="RW" width="1" name="COEX_RF_BTP_SW_RESET" comment="Placeholder"/>
    <register addr="00006008" rw_flags="R" width="2" name="COEX_RF_BTP_STATUS" comment="Coex BTP status"/>
    <register addr="0000600c" rw_flags="RW" width="2" name="COEX_RF_BTP_ARB_CFG" comment=""/>
    <register addr="00006010" rw_flags="RW" width="2" name="COEX_RF_BTP_TRAN_CTRL_CFG" comment="Coexistence Transition Control configuration."/>
    <register addr="00006014" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[0]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006018" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[1]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000601c" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[2]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006020" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[3]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006024" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[4]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006028" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[5]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000602c" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[6]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006030" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[7]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006034" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[8]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006038" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[9]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000603c" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[10]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006040" rw_flags="RW" width="1" name="COEX_RF_BTP_FEC_FEM_MODE[11]" comment="Set the mode for each FEM control pin."/>
    <register addr="00006044" rw_flags="RW" width="2" name="COEX_RF_BTP_FEC_IDLE_CFG" comment="Front-end configuration which is applied when BT is idle."/>
    <register addr="00006048" rw_flags="RW" width="2" name="COEX_RF_BTP_FEC_BT_TX_CFG" comment="Front-end configuration which is applied when BT is transmitting."/>
    <register addr="0000604c" rw_flags="R" width="1" name="COEX_RF_BTP_FEC_STATUS" comment="BTP Front-end control status."/>
    <register addr="00006050" rw_flags="RW" width="4" name="COEX_RF_BTP_PROT_CHANGE_MODE" comment="Set this to 0xDEADBEEF in order to change the analogue protection. Should clear back to 0 after changing mode."/>
    <register addr="00006054" rw_flags="RW" width="1" name="COEX_RF_BTP_PROT_CFG" comment="Analogue protection configuration register."/>
  </block>
  <block name="coex_rf_common" comment="Coexistence RFIC register which are common to all antenna paths.">
    <register addr="00003000" rw_flags="RW" width="1" name="COEX_RF_CMN_CFG" comment="Coexistence RFIC configuration."/>
    <register addr="00003004" rw_flags="RW" width="2" name="COEX_RF_CMN_FEM_COMBINE_CFG" comment="Coexistence RFIC configuration."/>
  </block>
  <block name="coex_rf_wlpath_0" comment="Coexistence RFIC Registers for a WLAN antenna path.">
    <register addr="00004000" rw_flags="RW" width="1" name="COEX_RF_WLP_CFG_I0" comment="Coexistence RFIC configuration."/>
    <register addr="00004004" rw_flags="RW" width="1" name="COEX_RF_WLP_SW_RESET_I0" comment="Placeholder"/>
    <register addr="00004008" rw_flags="R" width="4" name="COEX_RF_WLP_STATUS_I0" comment="Coex WLP status"/>
    <register addr="0000400c" rw_flags="RW" width="2" name="COEX_RF_WLP_ARB_CFG_I0" comment=""/>
    <register addr="00004010" rw_flags="RW" width="4" name="COEX_RF_WLP_TRAN_CTRL_CFG_I0" comment="Coexistence Transition Control configuration."/>
    <register addr="00004014" rw_flags="RW" width="2" name="COEX_RF_WLP_SHRX_CFG_I0" comment=""/>
    <register addr="00004018" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[0]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000401c" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[1]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004020" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[2]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004024" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[3]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004028" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[4]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000402c" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[5]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004030" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[6]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004034" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[7]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004038" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[8]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000403c" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[9]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004040" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[10]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004044" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I0[11]" comment="Set the mode for each FEM control pin."/>
    <register addr="00004048" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_IDLE_2G_CFG_I0" comment="Front-end configuration which is applied when WLAN 2G is idle."/>
    <register addr="0000404c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I0[0]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00004050" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I0[1]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00004054" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I0[2]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00004058" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I0[3]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="0000405c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I0[4]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00004060" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_RX_CFG_I0" comment="Front-end configuration which is applied when WLAN 2G is receiving, or during simultaneous Rx, when eLNA is disabled"/>
    <register addr="00004064" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_RX_ELNA_CFG_I0" comment="Front-end configuration which is applied when WLAN 2G is receiving, or during simultaneous Rx, when eLNA is enabled"/>
    <register addr="00004068" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_BT_RX_CFG_I0" comment="Front-end configuration which is applied when Bluetooth is receiving, when eLNA is disabled."/>
    <register addr="0000406c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_BT_RX_ELNA_CFG_I0" comment="Front-end configuration which is applied when Bluetooth is receiving, when eLNA is enabled."/>
    <register addr="00004070" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I0[0]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00004074" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I0[1]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00004078" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I0[2]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="0000407c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I0[3]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00004080" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I0[4]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00004084" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_IDLE_5G_CFG_I0" comment="Front-end configuration which is applied when WLAN 5G is idle."/>
    <register addr="00004088" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I0[0]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="0000408c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I0[1]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="00004090" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I0[2]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="00004094" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I0[3]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="00004098" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I0[4]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="0000409c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_RX_CFG_I0" comment="Front-end configuration which is applied when WLAN 5G is receiving when eLNA is disabled."/>
    <register addr="000040a0" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_RX_ELNA_CFG_I0" comment="Front-end configuration which is applied when WLAN 5G is receiving when eLNA is enabled."/>
    <register addr="000040a4" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I0[0]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000040a8" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I0[1]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000040ac" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I0[2]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000040b0" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I0[3]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000040b4" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I0[4]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000040b8" rw_flags="R" width="4" name="COEX_RF_WLP_FEC_STATUS_I0" comment="WLP Front-end control status."/>
    <register addr="000040bc" rw_flags="RW" width="4" name="COEX_RF_WLP_PROT_CHANGE_MODE_I0" comment="Set this to 0xDEADBEEF in order to change the analogue protection. Should clear back to 0 after changing mode."/>
    <register addr="000040c0" rw_flags="RW" width="1" name="COEX_RF_WLP_PROT_CFG_I0" comment="Analogue protection configuration register."/>
  </block>
  <block name="coex_rf_wlpath_1" comment="Coexistence RFIC Registers for a WLAN antenna path.">
    <register addr="00005000" rw_flags="RW" width="1" name="COEX_RF_WLP_CFG_I1" comment="Coexistence RFIC configuration."/>
    <register addr="00005004" rw_flags="RW" width="1" name="COEX_RF_WLP_SW_RESET_I1" comment="Placeholder"/>
    <register addr="00005008" rw_flags="R" width="4" name="COEX_RF_WLP_STATUS_I1" comment="Coex WLP status"/>
    <register addr="0000500c" rw_flags="RW" width="2" name="COEX_RF_WLP_ARB_CFG_I1" comment=""/>
    <register addr="00005010" rw_flags="RW" width="4" name="COEX_RF_WLP_TRAN_CTRL_CFG_I1" comment="Coexistence Transition Control configuration."/>
    <register addr="00005014" rw_flags="RW" width="2" name="COEX_RF_WLP_SHRX_CFG_I1" comment=""/>
    <register addr="00005018" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[0]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000501c" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[1]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005020" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[2]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005024" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[3]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005028" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[4]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000502c" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[5]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005030" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[6]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005034" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[7]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005038" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[8]" comment="Set the mode for each FEM control pin."/>
    <register addr="0000503c" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[9]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005040" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[10]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005044" rw_flags="RW" width="1" name="COEX_RF_WLP_FEC_FEM_MODE_I1[11]" comment="Set the mode for each FEM control pin."/>
    <register addr="00005048" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_IDLE_2G_CFG_I1" comment="Front-end configuration which is applied when WLAN 2G is idle."/>
    <register addr="0000504c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I1[0]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00005050" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I1[1]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00005054" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I1[2]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00005058" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I1[3]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="0000505c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_TX_CFG_I1[4]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD disabled."/>
    <register addr="00005060" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_RX_CFG_I1" comment="Front-end configuration which is applied when WLAN 2G is receiving, or during simultaneous Rx, when eLNA is disabled"/>
    <register addr="00005064" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_RX_ELNA_CFG_I1" comment="Front-end configuration which is applied when WLAN 2G is receiving, or during simultaneous Rx, when eLNA is enabled"/>
    <register addr="00005068" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_BT_RX_CFG_I1" comment="Front-end configuration which is applied when Bluetooth is receiving, when eLNA is disabled."/>
    <register addr="0000506c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_BT_RX_ELNA_CFG_I1" comment="Front-end configuration which is applied when Bluetooth is receiving, when eLNA is enabled."/>
    <register addr="00005070" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I1[0]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00005074" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I1[1]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00005078" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I1[2]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="0000507c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I1[3]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00005080" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_2G_DPD_CFG_I1[4]" comment="Front-end configuration which is applied when WLAN 2G is transmitting with DPD enabled."/>
    <register addr="00005084" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_IDLE_5G_CFG_I1" comment="Front-end configuration which is applied when WLAN 5G is idle."/>
    <register addr="00005088" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I1[0]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="0000508c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I1[1]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="00005090" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I1[2]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="00005094" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I1[3]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="00005098" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_TX_CFG_I1[4]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD disabled."/>
    <register addr="0000509c" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_RX_CFG_I1" comment="Front-end configuration which is applied when WLAN 5G is receiving when eLNA is disabled."/>
    <register addr="000050a0" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_RX_ELNA_CFG_I1" comment="Front-end configuration which is applied when WLAN 5G is receiving when eLNA is enabled."/>
    <register addr="000050a4" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I1[0]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000050a8" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I1[1]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000050ac" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I1[2]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000050b0" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I1[3]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000050b4" rw_flags="RW" width="2" name="COEX_RF_WLP_FEC_WL_5G_DPD_CFG_I1[4]" comment="Front-end configuration which is applied when WLAN 5G is transmitting with DPD enabled."/>
    <register addr="000050b8" rw_flags="R" width="4" name="COEX_RF_WLP_FEC_STATUS_I1" comment="WLP Front-end control status."/>
    <register addr="000050bc" rw_flags="RW" width="4" name="COEX_RF_WLP_PROT_CHANGE_MODE_I1" comment="Set this to 0xDEADBEEF in order to change the analogue protection. Should clear back to 0 after changing mode."/>
    <register addr="000050c0" rw_flags="RW" width="1" name="COEX_RF_WLP_PROT_CFG_I1" comment="Analogue protection configuration register."/>
  </block>
  <block name="rfic_pad_control" comment="RFIC Pad Control Registers">
    <register addr="00007000" rw_flags="RW" width="2" name="PAD_CONTROL_RFIC_CTRL[0]" comment="BTWL control register for RFIC_CTRL pads"/>
    <register addr="00007004" rw_flags="RW" width="2" name="PAD_CONTROL_RFIC_CTRL[1]" comment="BTWL control register for RFIC_CTRL pads"/>
    <register addr="00007008" rw_flags="R" width="1" name="PAD_STATUS_RFIC_CTRL[0]" comment="BTWL status register for RFIC_CTRL pads"/>
    <register addr="0000700c" rw_flags="R" width="1" name="PAD_STATUS_RFIC_CTRL[1]" comment="BTWL status register for RFIC_CTRL pads"/>
    <register addr="00007010" rw_flags="RW" width="2" name="PAD_CONTROL_FM_SPDY_S" comment="BTWL control register for FM_SPDY_S pad"/>
    <register addr="00007014" rw_flags="R" width="1" name="PAD_STATUS_FM_SPDY_S" comment="BTWL status register for FM_SPDY_S pad"/>
    <register addr="00007018" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[0]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="0000701c" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[1]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007020" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[2]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007024" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[3]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007028" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[4]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="0000702c" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[5]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007030" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[6]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007034" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[7]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007038" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[8]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="0000703c" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[9]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007040" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[10]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007044" rw_flags="RW" width="2" name="PAD_CONTROL_FEM_CTRL[11]" comment="BTWL control register for FEM_CTRL pads"/>
    <register addr="00007048" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[0]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="0000704c" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[1]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007050" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[2]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007054" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[3]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007058" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[4]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="0000705c" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[5]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007060" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[6]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007064" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[7]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007068" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[8]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="0000706c" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[9]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007070" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[10]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007074" rw_flags="R" width="1" name="PAD_STATUS_FEM_CTRL[11]" comment="BTWL status register for FEM_CTRL pads"/>
    <register addr="00007078" rw_flags="RW" width="4" name="RFIC_PAD_MUX_CTRL" comment="Pad muxing control register."/>
    <register addr="0000707c" rw_flags="RW" width="4" name="RFIC_PAD_MUX_CTRL2" comment="Pad muxing control register #2."/>
  </block>
  <block name="top_rf" comment="Top level BT/WLAN registers in RFIC.">
    <register addr="00000000" rw_flags="R" width="2" name="CHIP_VERSION" comment="Chip Version and ID (S610 EVT0=0x00B0, S610 EVT1=0x10B0, S610 EVT1.1=0x11B0, S610 EVT2=0x20B0, S612 EVT0=0x00B1, S620 EVT0=0x00B2, S621 EVT0=0x00B3, S621 EVT0.1=0x01B3, S621+ =0x10B3)"/>
    <register addr="00000004" rw_flags="RW" width="1" name="RFIC_CONFIG" comment="Main BT/WL configuration register for RFIC."/>
    <register addr="00000008" rw_flags="R" width="2" name="RFIC_REGISTER_HASH" comment="Contains a 16-bit hash of all of the BTWL register tree source (generated by drun register build flow). Can be used by CHV etc. to figure out which release of the IP they're running on."/>
    <register addr="0000000c" rw_flags="RW" width="1" name="RFIC_BTWL_TO_FM_RST" comment="BTWL to FM reset. This will reset all of FM, so be very careful. Not expected to be used..."/>
    <register addr="00000010" rw_flags="RW" width="2" name="RFIC_BTWL_TO_FM_COEX" comment="BTWL to FM signalling for Coexistence."/>
    <register addr="00000014" rw_flags="R" width="2" name="RFIC_FM_TO_BTWL_COEX" comment="FM to BTWL signalling for Coexistence."/>
    <register addr="00000018" rw_flags="RW" width="1" name="RFIC_LDO_CONFIG" comment="LDO configuration."/>
    <register addr="0000001c" rw_flags="RW" width="4" name="RFIC_EFUSE_WRITE_DATA0" comment="[ 31: 0] of 128-bit EFUSE write data word."/>
    <register addr="00000020" rw_flags="RW" width="4" name="RFIC_EFUSE_WRITE_DATA1" comment="[ 63:32] of 128-bit EFUSE write data word."/>
    <register addr="00000024" rw_flags="RW" width="4" name="RFIC_EFUSE_WRITE_DATA2" comment="[ 95:64] of 128-bit EFUSE write data word."/>
    <register addr="00000028" rw_flags="RW" width="4" name="RFIC_EFUSE_WRITE_DATA3" comment="[127:96] of 128-bit EFUSE write data word."/>
    <register addr="0000002c" rw_flags="R" width="4" name="RFIC_EFUSE_READ_DATA0" comment="[ 31: 0] of 128-bit EFUSE read data word."/>
    <register addr="00000030" rw_flags="R" width="4" name="RFIC_EFUSE_READ_DATA1" comment="[ 63:32] of 128-bit EFUSE read data word."/>
    <register addr="00000034" rw_flags="R" width="4" name="RFIC_EFUSE_READ_DATA2" comment="[ 95:64] of 128-bit EFUSE read data word."/>
    <register addr="00000038" rw_flags="R" width="4" name="RFIC_EFUSE_READ_DATA3" comment="[127:96] of 128-bit EFUSE read data word."/>
    <register addr="0000003c" rw_flags="W" width="1" name="RFIC_EFUSE_START" comment="Writing '1' to this register starts the specified operation setup in RFIC_EFUSE_CONFIG_MODE."/>
    <register addr="00000040" rw_flags="RW" width="4" name="RFIC_EFUSE_CONFIG" comment="Config word for EFUSE operation."/>
    <register addr="00000044" rw_flags="R" width="1" name="RFIC_EFUSE_STATUS" comment="Indicates the current EFUSE status."/>
    <register addr="00000048" rw_flags="RW" width="2" name="RFIC_EFUSE_ORIDE_CTRL" comment="Override control for EFUSE hardware interface - control register. Use RFIC_EFUSE_CONFIG_FSOURCE_EN to enable the programming voltage."/>
    <register addr="0000004c" rw_flags="RW" width="1" name="RFIC_CLKGEN_CONFIG_BT" comment="Bluetooth firmware clock enables. Relevant bits OR'd with RFIC_CLKGEN_CONFIG_WL bits."/>
    <register addr="00000050" rw_flags="RW" width="1" name="RFIC_CLKGEN_CONFIG_WL[0]" comment="WLAN firmware clock enables. Relevant bits OR'd with RFIC_CLKGEN_CONFIG_BT bits."/>
    <register addr="00000054" rw_flags="RW" width="1" name="RFIC_CLKGEN_CONFIG_WL[1]" comment="WLAN firmware clock enables. Relevant bits OR'd with RFIC_CLKGEN_CONFIG_BT bits."/>
    <register addr="00000058" rw_flags="RW" width="2" name="RFIC_CLKGEN_1632_SKIP_VALUE" comment="Number of 80MHz clks between each skip of 16MHz clock (set to desired_interval-1). 32MHz clock is skipped twice in this period, so this should be an even value or there will be sytematic error. Setting to non-zero enables this feature."/>
    <register addr="0000005c" rw_flags="RW" width="1" name="RFIC_CLKGEN_SYSTEM_TIME_DIV_RATIO" comment="Divide ratio for system timer (from 80MHz clock)"/>
    <register addr="00000060" rw_flags="RW" width="2" name="RFIC_CLKGEN_SYSTEM_TIME_SKIP_VALUE" comment="Specifies the number of microseconds between skipping an increment of the microsecond system timer. This will be used for scenarios where the Aux PLL has been shifted in order to keep BT packet timings more accurate. Setting to non-zero enables this feature."/>
    <register addr="00000064" rw_flags="RW" width="1" name="RFIC_CLKGEN_SYSTEM_TIME_EN" comment="Enable the microsecond System Timer."/>
    <register addr="00000068" rw_flags="RW" width="4" name="RFIC_CLKGEN_SYSTEM_TIME_INIT_VAL" comment="Set initial value for the microsecond System Timer."/>
    <register addr="0000006c" rw_flags="R" width="4" name="RFIC_CLKGEN_SYSTEM_TIME" comment="Current value of the microsecond System Timer"/>
    <register addr="00000070" rw_flags="R" width="1" name="RFIC_CLKGEN_SYSTEM_FINE_TIME" comment="Current value of the microsecond System Timer's fine time (80MHz units)."/>
    <register addr="00000074" rw_flags="R" width="1" name="AUX_ANA_STATUS0" comment=""/>
    <register addr="00000078" rw_flags="RW" width="2" name="AUX_ANA_ENABLES" comment=""/>
    <register addr="0000007c" rw_flags="RW" width="4" name="AUX_ANA_CFG0" comment=""/>
    <register addr="00000080" rw_flags="RW" width="2" name="AUX_ANA_CFG1" comment=""/>
    <register addr="00000084" rw_flags="RW" width="4" name="AUX_ANA_SPARES" comment="AUX_ANA_SPARES"/>
    <register addr="00000088" rw_flags="RW" width="4" name="BPLL_ENABLES" comment=""/>
    <register addr="0000008c" rw_flags="RW" width="4" name="BPLL_CONTROLS_0" comment=""/>
    <register addr="00000090" rw_flags="RW" width="4" name="BPLL_CONTROLS_1" comment=""/>
    <register addr="00000094" rw_flags="RW" width="4" name="BPLL_CONTROLS_2" comment=""/>
    <register addr="00000098" rw_flags="RW" width="4" name="BPLL_CONTROLS_3" comment=""/>
    <register addr="0000009c" rw_flags="RW" width="4" name="BPLL_DSM_F" comment=""/>
    <register addr="000000a0" rw_flags="RW" width="4" name="BPLL_DSM_K" comment=""/>
    <register addr="000000a4" rw_flags="RW" width="1" name="BPLL_ABC_START" comment=""/>
    <register addr="000000a8" rw_flags="RW" width="1" name="BPLL_SPARE" comment=""/>
    <register addr="000000ac" rw_flags="R" width="2" name="BPLL_STATUS" comment=""/>
    <register addr="000000b0" rw_flags="RW" width="2" name="RFIC_SPARES0" comment="Spare bits."/>
    <register addr="000000b4" rw_flags="RW" width="2" name="RFIC_SPARES1" comment="Spare bits."/>
    <register addr="000000b8" rw_flags="R" width="4" name="RFIC_SCSC0" comment="Chris Hunter/Damien Smith"/>
    <register addr="000000bc" rw_flags="R" width="4" name="RFIC_SCSC1" comment="Michael Cowell/Alex Thoukydides"/>
    <register addr="000000c0" rw_flags="R" width="4" name="RFIC_SCSC2" comment="Steve Jones/Andy Summers"/>
    <register addr="000000c4" rw_flags="R" width="4" name="RFIC_SCSC3" comment="David Price/Richard Wilkinson"/>
    <register addr="000000c8" rw_flags="R" width="4" name="RFIC_SCSC4" comment="Richard Pratt/Farshid Nowshadi"/>
    <register addr="000000cc" rw_flags="R" width="4" name="RFIC_SCSC5" comment="Chris Morton/Chetan Yadav"/>
    <register addr="000000d0" rw_flags="R" width="4" name="RFIC_SCSC6" comment="Mariangela Genovese and Magson Gao/Noemi Cala"/>
    <register addr="000000d4" rw_flags="R" width="4" name="RFIC_SCSC7" comment="Dimitris Gerakaris/Norman Zhi"/>
    <register addr="000000d8" rw_flags="R" width="4" name="RFIC_SCSC8" comment="Jacob Sharpe/Zern Tay"/>
  </block>
  <block name="wl_rf_common" comment="WLAN RFIC configuration registers which are common between paths.">
    <register addr="00008000" rw_flags="RW" width="1" name="WLRF_DEBUG0_SEL" comment="WLAN RFIC debug select for output DEBUG1"/>
    <register addr="00008004" rw_flags="RW" width="1" name="WLRF_DEBUG1_SEL" comment="WLAN RFIC debug select for output DEBUG1"/>
    <register addr="00008008" rw_flags="RW" width="1" name="WLRF_AIQ_SWAP_CONFIG" comment="Optional AIQ swap controls"/>
    <register addr="0000800c" rw_flags="RW" width="1" name="WLRF_LO_MIMO_DIVERSITY_EN[0]" comment="New MIMO diversity LO control feature for S621+ which allows the WIFI0 Tx/Rx mixer enables and WIFI0 AGC state to dynamically control the WIFI0/WIFI1 WL_ANA_LO_LOGEN_LO01_DRV_EN signals to the analogue, in order to try and save LO distribution current. Index 0 of this register refers to WIFI0's LO01_DRV_EN bit and index 1 refers to WIFI1's. Note: The WL_ANA_LOGEN2[WL_ANA_LO_LOGEN_LO01_DRV_EN] register bits (in WIFI0/WIFI1) are unconditionally OR'd into this result, so they should be set to 0 when this feature is enabled. Also, the LO01_DRV_EN bits are forced to 0 (off) when the radio is idle (neither transmitting nor receiving)."/>
    <register addr="00008010" rw_flags="RW" width="1" name="WLRF_LO_MIMO_DIVERSITY_EN[1]" comment="New MIMO diversity LO control feature for S621+ which allows the WIFI0 Tx/Rx mixer enables and WIFI0 AGC state to dynamically control the WIFI0/WIFI1 WL_ANA_LO_LOGEN_LO01_DRV_EN signals to the analogue, in order to try and save LO distribution current. Index 0 of this register refers to WIFI0's LO01_DRV_EN bit and index 1 refers to WIFI1's. Note: The WL_ANA_LOGEN2[WL_ANA_LO_LOGEN_LO01_DRV_EN] register bits (in WIFI0/WIFI1) are unconditionally OR'd into this result, so they should be set to 0 when this feature is enabled. Also, the LO01_DRV_EN bits are forced to 0 (off) when the radio is idle (neither transmitting nor receiving)."/>
    <register addr="00008014" rw_flags="RW" width="1" name="WLRF_RADIO_TEMP_SW_RST" comment="Temperature sensor software reset. It is write sensitive. Don't set it back to 0"/>
    <register addr="00008018" rw_flags="RW" width="1" name="WLRF_RADIO_TEMP_CONFIG" comment="Temperature sensor logic configuration."/>
    <register addr="0000801c" rw_flags="R" width="1" name="WLRF_RADIO_TEMP_INT_STATUS" comment="Status of generated interrupt events."/>
    <register addr="00008020" rw_flags="W" width="1" name="WLRF_RADIO_TEMP_INT_CLEAR" comment="Clear the status of generated interrupt events."/>
    <register addr="00008024" rw_flags="RW" width="4" name="WLRF_RADIO_TEMP_CTRL_CONFIG[0]" comment="Mode in which to run the sensor checking."/>
    <register addr="00008028" rw_flags="R" width="2" name="WLRF_RADIO_TEMP[0]" comment="Status for the sensor."/>
    <register addr="0000802c" rw_flags="RW" width="1" name="WLRF_RADIO_TEMP_CHECK_COUNT[0]" comment="Number of checks to run each time this sensor is selected."/>
    <register addr="00008030" rw_flags="RW" width="4" name="WL_ANA_PERIPH_CMN_CONFIG" comment="This register controls the peripheral block"/>
    <register addr="00008034" rw_flags="RW" width="1" name="WL_ANA_ABB_RCCAL_CONFIG" comment=""/>
    <register addr="00008038" rw_flags="RW" width="4" name="WLRF_RADIO_RCCAL_CTRL_CFG1" comment=""/>
    <register addr="0000803c" rw_flags="RW" width="4" name="WLRF_RADIO_RCCAL_CTRL_CFG2" comment=""/>
    <register addr="00008040" rw_flags="R" width="2" name="WLRF_RADIO_RCCAL_CTRL_STATUS" comment=""/>
  </block>
  <block name="wl_rf_path_0" comment="WLAN RFIC configuration registers for a single radio path's digital logic.">
    <register addr="00009000" rw_flags="RW" width="1" name="WLRF_DEBUG_SELECT_I0" comment="Selects which debug appears on the output of the WLAN block"/>
    <register addr="00009004" rw_flags="R" width="2" name="WLRF_DEBUG_STATUS_I0" comment="Returns the current value on the debug bus"/>
    <register addr="00009008" rw_flags="RW" width="1" name="WLRF_RADIO_CONFIG_I0" comment="Miscellaneous config bits"/>
    <register addr="0000900c" rw_flags="R" width="1" name="WLRF_ZIPPY_TX_SPARE_STATUS_I0" comment="Spare Tx RF control bit from ZIPPY."/>
    <register addr="00009010" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009014" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009018" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000901c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009020" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009024" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009028" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000902c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009030" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009034" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009038" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000903c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009040" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009044" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009048" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000904c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009050" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009054" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009058" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000905c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009060" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009064" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009068" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000906c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009070" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009074" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009078" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000907c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009080" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009084" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009088" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000908c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009090" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009094" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="00009098" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000909c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090a0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090a4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090a8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090ac" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090b0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090b4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090b8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090bc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090c0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090c4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090c8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090cc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I0[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="000090d0" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG1_I0" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="000090d4" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG2_I0" comment="Configuration bits for the AGC: gains ranges definition. valid when AGC is active, and gain not forced."/>
    <register addr="000090d8" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG3_I0" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="000090dc" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG4_I0" comment="Configuration bits for the AGC: gains ranges definition. valid during the gain nudge process when high-performance LNA settings are selected (FeLut[1])"/>
    <register addr="000090e0" rw_flags="RW" width="2" name="WLRF_RADIO_RX_LEVEL_I0" comment="This register contains the value to be sent to the analogue gain stages if the AGC is disabled."/>
    <register addr="000090e4" rw_flags="R" width="2" name="WLRF_RADIO_GAIN_STATUS_I0" comment="This register contains the current gain settings to all blocks in the analogue front end"/>
    <register addr="000090e8" rw_flags="RW" width="1" name="WLRF_RADIO_RX_EXT_LNA_2P0DB_I0" comment="eLNA gain"/>
    <register addr="000090ec" rw_flags="RW" width="1" name="WLRF_RADIO_RX_TOTAL_GAIN_THRESHOLD_I0" comment="Threshold value for the total gain. It is used to reset the timer"/>
    <register addr="000090f0" rw_flags="R" width="1" name="WLRF_RADIO_HIGH_POWER_SIGNAL_FOUND_I0" comment="High Power Signal is begin received"/>
    <register addr="000090f4" rw_flags="RW" width="1" name="WLRF_RSSI_MASK_MSB_I0" comment="Used to mask the MSB of ANA_RX_RSSI"/>
    <register addr="000090f8" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_EXT_LOUD_I0" comment="This register specifies the threshold value for the FE RSSI module, turning off external LNA indication"/>
    <register addr="000090fc" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_WEAK_I0" comment="This register specifies the threshold value for the FE RSSI module, too weak indication   (+ 6dB gain change request)"/>
    <register addr="00009100" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_LOUD_I0" comment="This register specifies the threshold value for the FE RSSI module, too loud indication   (- 6dB gain change request)"/>
    <register addr="00009104" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_V_LOUD_I0" comment="This register specifies the threshold value for the FE RSSI module, extra loud indication (-12dB gain change request)"/>
    <register addr="00009108" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_SIGNAL_FOUND_I0" comment="This register specifies the threshold value for the ABB RSSI module, signal found indication"/>
    <register addr="0000910c" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_WEAK_I0" comment="This register specifies the threshold value for the ABB RSSI module, too weak indication   (+ 2.0dB gain change request)"/>
    <register addr="00009110" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_LOUD_I0" comment="This register specifies the threshold value for the ABB RSSI module, too loud indication   (- 6dB gain change request)"/>
    <register addr="00009114" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_V_LOUD_I0" comment="This register specifies the threshold value for the ABB RSSI module, extra loud indication (-12dB gain change request)"/>
    <register addr="00009118" rw_flags="R" width="2" name="WLRF_RADIO_RX_RSSI_I0" comment="This register contains the RSSI of the receive chain. The lower byte is the 8 bit digital RSSI (fixed to 0 since this is a radio-only chip) and the upper byte is the final analogue gain in 3dB steps."/>
    <register addr="0000911c" rw_flags="R" width="4" name="WLRF_RSSI_FILTERED_STATUS_I0" comment="This register contains the analogue RSSI values for the receive chain, after initial processing in the rssi blocks block."/>
    <register addr="00009120" rw_flags="RW" width="4" name="WLRF_IB_RSSI_LUT0_I0" comment="First 6 locations of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="00009124" rw_flags="RW" width="4" name="WLRF_IB_RSSI_LUT1_I0" comment="Locations 6 to 11 of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="00009128" rw_flags="RW" width="1" name="WLRF_IB_RSSI_LUT2_I0" comment="Last location of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="0000912c" rw_flags="RW" width="4" name="WLRF_ABB_RSSI_LUT0_I0" comment="First 6 locations of LUT used to generate RSSI values for ABB RSSI"/>
    <register addr="00009130" rw_flags="RW" width="4" name="WLRF_ABB_RSSI_LUT1_I0" comment="Last 6 locations of LUT used to generate RSSI values for ABB RSSI"/>
    <register addr="00009134" rw_flags="RW" width="1" name="WLRF_FE_LUT_SELECTION_MODE_I0" comment="Switch from one set of LUTs (FeLut[0]) to the other (FeLut[1]) based on AGC state (0 = don't switch;  switch when the AGC state changes from:  1= RF_FREE_RUN to RF_LOCK_REQUESTED; 2=RF_SNR_NUDGE to RF_RECEIVING; 3=RF_SNR_NUDGE to RF_RECEIVING, but after going through RF_NUDGE_AGAIN); 4=RF_LOCK_REQUESTED to RF_GAIN_NUDGE; 5=RF_RECEIVING to RF_NUDGE_AGAIN"/>
    <register addr="00009138" rw_flags="RW" width="1" name="WLRF_FE_LUT_SELECTION_INDEX_I0" comment="This register can be used to overwrite the signal used to switch from FeLut[0] to FeLut[1] when WLRF_FE_LUT_SELECTION_MODE&amp;gt;0"/>
    <register addr="0000913c" rw_flags="RW" width="1" name="WLRF_ELNA_FROM_LUT_I0" comment="Select ELNA Gain from 0: AGC; 1: FeLUT"/>
    <register addr="00009140" rw_flags="R" width="1" name="WLRF_ANA_TIMER_TX_SLOT_I0" comment="This register contains the current slot selected by the Tx timer"/>
    <register addr="00009144" rw_flags="R" width="1" name="WLRF_ANA_TIMER_RX_SLOT_I0" comment="This register contains the current slot selected by the Rx timer"/>
    <register addr="00009148" rw_flags="RW" width="4" name="WLRF_ANA_ENABLES_I0" comment="Default values for analogue enables signals should the mask register select this rather than the timer outputs"/>
    <register addr="0000914c" rw_flags="RW" width="4" name="WLRF_ANA_ENABLES_MASK_I0" comment="Selects use of ANA_ENABLES or timer outputs. A 1 in a given bit selects the timer output."/>
    <register addr="00009150" rw_flags="RW" width="4" name="WLRF_ANA_TRAINING_ENABLES_MASK_I0" comment="This masks the output of the Tx timer when it is not a DPD training frame. The idea is to be able to remove the extra Rx enables that are required for making DPD training work to improve power consumption on frames that don't need them. It should typically have all the Tx bits set and none of the Rx bits."/>
    <register addr="00009154" rw_flags="RW" width="1" name="WLRF_ANA_MIMO_RX_DIVERSITY_USE_REM_AGC_I0" comment="Set to 0 for the MIMO diversity Rx enable masking to use the local AGC lock (this path), or set to 1 to use the remote AGC lock (the other path). This is to use the remote (other) path, as that AGC will be the most accurate when using this feature."/>
    <register addr="00009158" rw_flags="RW" width="4" name="WLRF_ANA_MIMO_RX_DIVERSITY_MASK_I0" comment="This masks the output of the Rx timer before the AGC has found STF sync (prior to RF_LOCK_REQUESTED state). It is intended to be used as part of the new S621+ MIMO Rx diversity feature, whereby we keep some of the WIFI1 path Rx enables disabled until we find STF sync in order to reduce WIFI1 Rx current. This register should be set to all 1s by default, and is only expected to be used on WIFI1 path in MIMO scenarios."/>
    <register addr="0000915c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[0]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00009160" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[1]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00009164" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[2]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00009168" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[3]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000916c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[4]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00009170" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[5]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00009174" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[6]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="00009178" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I0[7]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000917c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[0]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00009180" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[1]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00009184" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[2]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00009188" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[3]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000918c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[4]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00009190" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[5]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00009194" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[6]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="00009198" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I0[7]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000919c" rw_flags="RW" width="2" name="WLRF_ANA_TIMER_TX_SLOT_ON_OFF_LAST_I0" comment="This register sets the start and end of Tx turn on and off ramps, and the slot jumped to in the case of a Tx abort"/>
    <register addr="000091a0" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[0]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091a4" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[1]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091a8" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[2]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091ac" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[3]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091b0" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[4]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091b4" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[5]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091b8" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[6]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091bc" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I0[7]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="000091c0" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[0]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091c4" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[1]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091c8" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[2]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091cc" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[3]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091d0" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[4]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091d4" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[5]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091d8" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[6]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091dc" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I0[7]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="000091e0" rw_flags="RW" width="2" name="WLRF_ANA_TIMER_RX_SLOT_ON_OFF_LAST_I0" comment="This register sets the start and end of Rx turn on and off ramps, and the slot jumped to in the case of an Rx abort"/>
    <register addr="000091e4" rw_flags="W" width="1" name="WLRF_INT_CLEAR_I0" comment="Writing this register clears any interrupts whose corresponding bits are set in the write data. Bit allocations are as for WL_RF_INT_MASK"/>
    <register addr="000091e8" rw_flags="RW" width="1" name="WLRF_INT_MASK_I0" comment="This register masks events from causing interrupts. Only those interrupts whose mask bit is set will be delivered to the processors"/>
    <register addr="000091ec" rw_flags="R" width="1" name="WLRF_INT_STATUS_I0" comment="This register has bits set in it for any interrupt that is currently active. In addition 'raw' bits are set for any active interrupt, whether it is masked or not"/>
    <register addr="000091f0" rw_flags="RW" width="1" name="WLRF_ANAIF_DEBUG_SEL_I0" comment="WLAN RFIC AnaIf debug select."/>
    <register addr="000091f4" rw_flags="RW" width="1" name="WLRF_ANAIF_RSSI_CTRL_I0" comment="WLAN RFIC register to control how the analogue RSSI blocks (ABB/IB) are enabled and how the clock is requested."/>
    <register addr="000091f8" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_CONFIG_I0" comment="DCOC controller config"/>
    <register addr="000091fc" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_CONFIG2_I0" comment="DCOC controller config"/>
    <register addr="00009200" rw_flags="R" width="2" name="WLRF_DCOC_CTRL_STATUS_I0" comment="DCOC controller status."/>
    <register addr="00009204" rw_flags="RW" width="1" name="WLRF_DCOC_CTRL_LUT_SELECT_I0" comment="Choose the LUT to access, either read or write"/>
    <register addr="00009208" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_LUT_WRITE_I0" comment="Write the specified value to the LUTs. 12 LSBs and 12 MSBs are used for I and Q respectively."/>
    <register addr="0000920c" rw_flags="R" width="4" name="WLRF_DCOC_CTRL_LUT_READ_I0" comment="Read the contents of the LUTs. 12 LSBs and 12 MSBs are used for I and Q respectively."/>
    <register addr="00009210" rw_flags="RW" width="4" name="WLRF_ANA_AIQ_CFG_I0" comment="Configure AIQ interface"/>
    <register addr="00009214" rw_flags="R" width="1" name="WLRF_ANA_AIQ_STATUS_I0" comment="Status of AIQ interface."/>
    <register addr="00009218" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][0]" comment="Rx FE LUT controls."/>
    <register addr="0000921c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][1]" comment="Rx FE LUT controls."/>
    <register addr="00009220" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][2]" comment="Rx FE LUT controls."/>
    <register addr="00009224" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][3]" comment="Rx FE LUT controls."/>
    <register addr="00009228" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][4]" comment="Rx FE LUT controls."/>
    <register addr="0000922c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][5]" comment="Rx FE LUT controls."/>
    <register addr="00009230" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][6]" comment="Rx FE LUT controls."/>
    <register addr="00009234" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][7]" comment="Rx FE LUT controls."/>
    <register addr="00009238" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[0][8]" comment="Rx FE LUT controls."/>
    <register addr="0000923c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][0]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009240" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][1]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009244" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][2]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009248" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][3]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000924c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][4]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009250" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][5]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009254" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][6]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009258" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][7]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000925c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[0][8]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009260" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][0]" comment="Rx FE LUT controls."/>
    <register addr="00009264" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][1]" comment="Rx FE LUT controls."/>
    <register addr="00009268" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][2]" comment="Rx FE LUT controls."/>
    <register addr="0000926c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][3]" comment="Rx FE LUT controls."/>
    <register addr="00009270" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][4]" comment="Rx FE LUT controls."/>
    <register addr="00009274" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][5]" comment="Rx FE LUT controls."/>
    <register addr="00009278" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][6]" comment="Rx FE LUT controls."/>
    <register addr="0000927c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][7]" comment="Rx FE LUT controls."/>
    <register addr="00009280" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I0[1][8]" comment="Rx FE LUT controls."/>
    <register addr="00009284" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][0]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009288" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][1]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000928c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][2]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009290" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][3]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009294" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][4]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="00009298" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][5]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000929c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][6]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="000092a0" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][7]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="000092a4" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I0[1][8]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="000092a8" rw_flags="R" width="4" name="WLRF_ANA_ENABLES_STATUS_I0" comment="This register contains the current values of the Analogue Enables, after all masking and multiplexing."/>
    <register addr="000092ac" rw_flags="R" width="2" name="WLRF_ANA_RAW_IB_RSSI_STATUS_I0" comment="Raw IB RSSI from analogue."/>
    <register addr="000092b0" rw_flags="R" width="2" name="WLRF_ANA_RAW_ABB_RSSI_STATUS_I0" comment="Raw ABB RSSI from analogue."/>
    <register addr="000092b4" rw_flags="RW" width="1" name="WL_ANA_LO_PLL_START_I0" comment="This register written to start the PLL running"/>
    <register addr="000092b8" rw_flags="RW" width="1" name="WL_ANA_LO_PLL_STOP_I0" comment="This register written to stop the PLL from running"/>
    <register addr="000092bc" rw_flags="R" width="1" name="WL_ANA_LO_CTRL_STATE_I0" comment="The state of the RFIC_DGT_LO_CTRL block, which controls the SAPLL start/stop."/>
    <register addr="000092c0" rw_flags="RW" width="4" name="WL_DGT_LO_D_FREQ1_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092c4" rw_flags="RW" width="1" name="WL_DGT_LO_D_FREQ2_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092c8" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF1_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092cc" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF2_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092d0" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF3_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092d4" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF4_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092d8" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF5_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092dc" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF6_I0" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="000092e0" rw_flags="R" width="4" name="WL_DGT_LO_PLL_TEST_OUT_I0" comment="Read-only register for test"/>
    <register addr="000092e4" rw_flags="R" width="1" name="WLRF_ANA_STATUS_I0" comment="Returns the value on the ANA_STATUS bus"/>
    <register addr="000092e8" rw_flags="RW" width="2" name="WL_ANA_MISC_I0" comment="Misc. enables."/>
    <register addr="000092ec" rw_flags="RW" width="2" name="WL_ANA_BIAS_EN_I0" comment="Key bias enables."/>
    <register addr="000092f0" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG_I0" comment="This register controls Rx baseband"/>
    <register addr="000092f4" rw_flags="RW" width="2" name="WL_ANA_ABB_RX_CONFIG2_I0" comment="This register controls Rx baseband"/>
    <register addr="000092f8" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG3_I0" comment="This register controls Rx baseband"/>
    <register addr="000092fc" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG4_I0" comment="This register controls Rx baseband"/>
    <register addr="00009300" rw_flags="RW" width="2" name="WL_ANA_ABB_RX_CONFIG5_I0" comment="This register controls Rx baseband"/>
    <register addr="00009304" rw_flags="RW" width="4" name="WL_ANA_ABB_TX_CONFIG_I0" comment="This register controls Tx baseband"/>
    <register addr="00009308" rw_flags="RW" width="2" name="WL_ANA_PERIPH_PATH_CONFIG_I0" comment="This register controls Tx baseband"/>
    <register addr="0000930c" rw_flags="RW" width="1" name="WL_ANA_TX_2G_STATIC_ENABLES_I0" comment="This register contains 2G Tx RF-related static enables."/>
    <register addr="00009310" rw_flags="RW" width="1" name="WL_ANA_TX_5G_STATIC_ENABLES_I0" comment="This register contains 2G Tx RF-related static enables."/>
    <register addr="00009314" rw_flags="RW" width="1" name="WL_ANA_RX_2G_LNA_CONFIG_I0" comment="This register contains static controls for the Rx 2G LNA."/>
    <register addr="00009318" rw_flags="RW" width="2" name="WL_ANA_RX_5G_LNA_CONFIG_I0" comment="This register contains static controls for the Rx 5G LNA."/>
    <register addr="0000931c" rw_flags="RW" width="4" name="WL_ANA_RX_MIX_CONFIG_I0" comment="This registers contains static controls common to all Rx Mixers."/>
    <register addr="00009320" rw_flags="RW" width="2" name="WL_ANA_TX_ADB_CONFIG_I0" comment="This register contains static controls common to all Tx ADB."/>
    <register addr="00009324" rw_flags="RW" width="2" name="WL_ANA_TX_DECT_CONFIG_I0" comment="This register contains static controls common to all Tx DECT."/>
    <register addr="00009328" rw_flags="RW" width="4" name="WL_ANA_TX_DPD_CONFIG_I0" comment="This register contains static controls common to all Tx DPD."/>
    <register addr="0000932c" rw_flags="RW" width="2" name="WL_ANA_TX_DRV_CONFIG_I0" comment="This register contains static controls common to all Tx Drivers."/>
    <register addr="00009330" rw_flags="RW" width="4" name="WL_ANA_TX_MIX_CONFIG_I0" comment="This register contains static controls common to all Tx Mixers."/>
    <register addr="00009334" rw_flags="RW" width="1" name="WL_ANA_TX_PPA_CONFIG_I0" comment="This register contains static controls common to all Tx PPAs."/>
    <register addr="00009338" rw_flags="RW" width="2" name="WL_ANA_TX_PA_CONFIG_I0" comment="This register contains static controls common to all Tx PAs."/>
    <register addr="0000933c" rw_flags="RW" width="1" name="WL_ANA_ABB_RX_SPARES_I0" comment="WL_ANA_ABB_RX_SPARES"/>
    <register addr="00009340" rw_flags="RW" width="1" name="WL_ANA_ABB_TX_SPARES_I0" comment="WL_ANA_ABB_TX_SPARES"/>
    <register addr="00009344" rw_flags="RW" width="1" name="WL_ANA_PERIPH_SPARES_I0" comment="WL_ANA_PERIPH_SPARES"/>
    <register addr="00009348" rw_flags="RW" width="1" name="WL_ANA_RX_RF_SPARES_I0" comment="Reserved"/>
    <register addr="0000934c" rw_flags="RW" width="1" name="WL_ANA_TX_2G_SPARES_I0" comment="TODO S621P"/>
    <register addr="00009350" rw_flags="RW" width="1" name="WL_ANA_TX_5G_SPARES_I0" comment="TODO S621P"/>
    <register addr="00009354" rw_flags="RW" width="4" name="WL_ANA_LO_DTC_CONF_I0" comment="Okay"/>
    <register addr="00009358" rw_flags="RW" width="4" name="WL_ANA_LO_FBDIV_CONF_I0" comment="Okay"/>
    <register addr="0000935c" rw_flags="RW" width="4" name="WL_ANA_LO_FLL_CONF_I0" comment="[27:26]WL_ANA_LO_FLL_DLY_CTRL: [1:0] controls delay inserted in CKDTC path 0, 50ps, 100ps, 150ps.&amp;lt;br&amp;gt;[25:24]WL_ANA_LO_FLL_DLY_CTRL: [1:0] controls delay inserted in CKFB path 0, 50ps, 100ps, 150ps.&amp;lt;br&amp;gt;[23:21]WL_ANA_LO_FLL_ICP: [2]: no connected inside FLL. Used to control CP current 2'b00: 0uA, 2'b01: 125uA 2'b10: 250uA 2'b11: same as 2'b10. "/>
    <register addr="00009360" rw_flags="RW" width="4" name="WL_ANA_LO_LO_PU_I0" comment="[0]WL_ANA_LO_NMOSSF_REG_VCO_PU: Power up NMOSSF_REG_VCO"/>
    <register addr="00009364" rw_flags="RW" width="4" name="WL_ANA_LO_LOGEN1_I0" comment="Okay"/>
    <register addr="00009368" rw_flags="RW" width="4" name="WL_ANA_LOGEN2_I0" comment="Okay"/>
    <register addr="0000936c" rw_flags="RW" width="4" name="WL_ANA_LO_LOGEN3_I0" comment="Okay"/>
    <register addr="00009370" rw_flags="RW" width="4" name="WL_ANA_LO_PLL_RESV_I0" comment="Okay"/>
    <register addr="00009374" rw_flags="RW" width="4" name="WL_ANA_LO_REF_BIAS1_I0" comment="[2:0]WL_ANA_LO_REF_BIAS_VREF075_GLB_SEL: VREF0P75 used for the opamp VREF in GLB. 000: 0.65V,min, 011: 0.75V, 111: 0.9.V, max"/>
    <register addr="00009378" rw_flags="RW" width="4" name="WL_ANA_LO_REF_BIAS2_I0" comment="Almost full change"/>
    <register addr="0000937c" rw_flags="RW" width="4" name="WL_ANA_LO_SFREG_CONF_I0" comment="Okay"/>
    <register addr="00009380" rw_flags="RW" width="4" name="WL_ANA_LO_SPD_CONF1_I0" comment="Okay"/>
    <register addr="00009384" rw_flags="RW" width="4" name="WL_ANA_LO_SPD_CONF2_I0" comment="Okay"/>
    <register addr="00009388" rw_flags="RW" width="4" name="WL_ANA_LO_SPD_CONF3_I0" comment="[11:9]WL_ANA_LO_TOP_DCTP_SEL: DCTP selection in LO TOP&amp;lt;br&amp;gt;[8:7]WL_ANA_LO_TEST_SEL_TP_CK: Selection bits of CK TEST MUX. 00 : ''0'',  01 : CLK_1X,  10: LOCK_PD_CP,  11: LOCK&amp;lt;br&amp;gt;[6:0]WL_ANA_LO_SPD_SPARE2: Unused"/>
    <register addr="0000938c" rw_flags="RW" width="4" name="WL_ANA_LO_VCO_CONF1_I0" comment="Okay"/>
    <register addr="00009390" rw_flags="RW" width="4" name="WL_ANA_LO_VCO_CONF2_I0" comment="[25:22]WL_ANA_LO_VCO_BUF01_ICTRL: Unused in WL1_LO.&amp;lt;br&amp;gt;[6:4]WL_ANA_LO_VCO_TAIL_TUNE&amp;lt;br&amp;gt;[3:0]WL_ANA_LO_VCO_SPARE1: Unused."/>
  </block>
  <block name="wl_rf_path_1" comment="WLAN RFIC configuration registers for a single radio path's digital logic.">
    <register addr="0000a000" rw_flags="RW" width="1" name="WLRF_DEBUG_SELECT_I1" comment="Selects which debug appears on the output of the WLAN block"/>
    <register addr="0000a004" rw_flags="R" width="2" name="WLRF_DEBUG_STATUS_I1" comment="Returns the current value on the debug bus"/>
    <register addr="0000a008" rw_flags="RW" width="1" name="WLRF_RADIO_CONFIG_I1" comment="Miscellaneous config bits"/>
    <register addr="0000a00c" rw_flags="R" width="1" name="WLRF_ZIPPY_TX_SPARE_STATUS_I1" comment="Spare Tx RF control bit from ZIPPY."/>
    <register addr="0000a010" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a014" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a018" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a01c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a020" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a024" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a028" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a02c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a030" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a034" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a038" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a03c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a040" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a044" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a048" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a04c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_I1[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a050" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a054" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a058" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a05c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a060" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a064" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a068" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a06c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a070" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a074" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a078" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a07c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a080" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a084" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a088" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a08c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_1_I1[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a090" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[0]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a094" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[1]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a098" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[2]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a09c" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[3]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0a0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[4]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0a4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[5]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0a8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[6]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0ac" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[7]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0b0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[8]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0b4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[9]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0b8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[10]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0bc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[11]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0c0" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[12]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0c4" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[13]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0c8" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[14]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0cc" rw_flags="RW" width="4" name="WLRF_ANA_TRIM_TX_2_I1[15]" comment="Tx power control LUT registers containing analogue gains and trims. The index is controlled per-packet by PHY_FLEXIMAC_TX_RF_MODE on the BBIC. Setting WLRF_RADIO_ANA_TX_TEST_MODE=1 selects index [0]."/>
    <register addr="0000a0d0" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG1_I1" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="0000a0d4" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG2_I1" comment="Configuration bits for the AGC: gains ranges definition. valid when AGC is active, and gain not forced."/>
    <register addr="0000a0d8" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG3_I1" comment="Miscellaneous config bits for the AGC as follows:"/>
    <register addr="0000a0dc" rw_flags="RW" width="4" name="WLRF_RADIO_AGC_CONFIG4_I1" comment="Configuration bits for the AGC: gains ranges definition. valid during the gain nudge process when high-performance LNA settings are selected (FeLut[1])"/>
    <register addr="0000a0e0" rw_flags="RW" width="2" name="WLRF_RADIO_RX_LEVEL_I1" comment="This register contains the value to be sent to the analogue gain stages if the AGC is disabled."/>
    <register addr="0000a0e4" rw_flags="R" width="2" name="WLRF_RADIO_GAIN_STATUS_I1" comment="This register contains the current gain settings to all blocks in the analogue front end"/>
    <register addr="0000a0e8" rw_flags="RW" width="1" name="WLRF_RADIO_RX_EXT_LNA_2P0DB_I1" comment="eLNA gain"/>
    <register addr="0000a0ec" rw_flags="RW" width="1" name="WLRF_RADIO_RX_TOTAL_GAIN_THRESHOLD_I1" comment="Threshold value for the total gain. It is used to reset the timer"/>
    <register addr="0000a0f0" rw_flags="R" width="1" name="WLRF_RADIO_HIGH_POWER_SIGNAL_FOUND_I1" comment="High Power Signal is begin received"/>
    <register addr="0000a0f4" rw_flags="RW" width="1" name="WLRF_RSSI_MASK_MSB_I1" comment="Used to mask the MSB of ANA_RX_RSSI"/>
    <register addr="0000a0f8" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_EXT_LOUD_I1" comment="This register specifies the threshold value for the FE RSSI module, turning off external LNA indication"/>
    <register addr="0000a0fc" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_WEAK_I1" comment="This register specifies the threshold value for the FE RSSI module, too weak indication   (+ 6dB gain change request)"/>
    <register addr="0000a100" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_LOUD_I1" comment="This register specifies the threshold value for the FE RSSI module, too loud indication   (- 6dB gain change request)"/>
    <register addr="0000a104" rw_flags="RW" width="2" name="WLRF_RADIO_FE_RSSI_THRESH_V_LOUD_I1" comment="This register specifies the threshold value for the FE RSSI module, extra loud indication (-12dB gain change request)"/>
    <register addr="0000a108" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_SIGNAL_FOUND_I1" comment="This register specifies the threshold value for the ABB RSSI module, signal found indication"/>
    <register addr="0000a10c" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_WEAK_I1" comment="This register specifies the threshold value for the ABB RSSI module, too weak indication   (+ 2.0dB gain change request)"/>
    <register addr="0000a110" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_LOUD_I1" comment="This register specifies the threshold value for the ABB RSSI module, too loud indication   (- 6dB gain change request)"/>
    <register addr="0000a114" rw_flags="RW" width="2" name="WLRF_RADIO_ABB_RSSI_THRESH_V_LOUD_I1" comment="This register specifies the threshold value for the ABB RSSI module, extra loud indication (-12dB gain change request)"/>
    <register addr="0000a118" rw_flags="R" width="2" name="WLRF_RADIO_RX_RSSI_I1" comment="This register contains the RSSI of the receive chain. The lower byte is the 8 bit digital RSSI (fixed to 0 since this is a radio-only chip) and the upper byte is the final analogue gain in 3dB steps."/>
    <register addr="0000a11c" rw_flags="R" width="4" name="WLRF_RSSI_FILTERED_STATUS_I1" comment="This register contains the analogue RSSI values for the receive chain, after initial processing in the rssi blocks block."/>
    <register addr="0000a120" rw_flags="RW" width="4" name="WLRF_IB_RSSI_LUT0_I1" comment="First 6 locations of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="0000a124" rw_flags="RW" width="4" name="WLRF_IB_RSSI_LUT1_I1" comment="Locations 6 to 11 of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="0000a128" rw_flags="RW" width="1" name="WLRF_IB_RSSI_LUT2_I1" comment="Last location of LUT used to generate RSSI values for IB RSSI"/>
    <register addr="0000a12c" rw_flags="RW" width="4" name="WLRF_ABB_RSSI_LUT0_I1" comment="First 6 locations of LUT used to generate RSSI values for ABB RSSI"/>
    <register addr="0000a130" rw_flags="RW" width="4" name="WLRF_ABB_RSSI_LUT1_I1" comment="Last 6 locations of LUT used to generate RSSI values for ABB RSSI"/>
    <register addr="0000a134" rw_flags="RW" width="1" name="WLRF_FE_LUT_SELECTION_MODE_I1" comment="Switch from one set of LUTs (FeLut[0]) to the other (FeLut[1]) based on AGC state (0 = don't switch;  switch when the AGC state changes from:  1= RF_FREE_RUN to RF_LOCK_REQUESTED; 2=RF_SNR_NUDGE to RF_RECEIVING; 3=RF_SNR_NUDGE to RF_RECEIVING, but after going through RF_NUDGE_AGAIN); 4=RF_LOCK_REQUESTED to RF_GAIN_NUDGE; 5=RF_RECEIVING to RF_NUDGE_AGAIN"/>
    <register addr="0000a138" rw_flags="RW" width="1" name="WLRF_FE_LUT_SELECTION_INDEX_I1" comment="This register can be used to overwrite the signal used to switch from FeLut[0] to FeLut[1] when WLRF_FE_LUT_SELECTION_MODE&amp;gt;0"/>
    <register addr="0000a13c" rw_flags="RW" width="1" name="WLRF_ELNA_FROM_LUT_I1" comment="Select ELNA Gain from 0: AGC; 1: FeLUT"/>
    <register addr="0000a140" rw_flags="R" width="1" name="WLRF_ANA_TIMER_TX_SLOT_I1" comment="This register contains the current slot selected by the Tx timer"/>
    <register addr="0000a144" rw_flags="R" width="1" name="WLRF_ANA_TIMER_RX_SLOT_I1" comment="This register contains the current slot selected by the Rx timer"/>
    <register addr="0000a148" rw_flags="RW" width="4" name="WLRF_ANA_ENABLES_I1" comment="Default values for analogue enables signals should the mask register select this rather than the timer outputs"/>
    <register addr="0000a14c" rw_flags="RW" width="4" name="WLRF_ANA_ENABLES_MASK_I1" comment="Selects use of ANA_ENABLES or timer outputs. A 1 in a given bit selects the timer output."/>
    <register addr="0000a150" rw_flags="RW" width="4" name="WLRF_ANA_TRAINING_ENABLES_MASK_I1" comment="This masks the output of the Tx timer when it is not a DPD training frame. The idea is to be able to remove the extra Rx enables that are required for making DPD training work to improve power consumption on frames that don't need them. It should typically have all the Tx bits set and none of the Rx bits."/>
    <register addr="0000a154" rw_flags="RW" width="1" name="WLRF_ANA_MIMO_RX_DIVERSITY_USE_REM_AGC_I1" comment="Set to 0 for the MIMO diversity Rx enable masking to use the local AGC lock (this path), or set to 1 to use the remote AGC lock (the other path). This is to use the remote (other) path, as that AGC will be the most accurate when using this feature."/>
    <register addr="0000a158" rw_flags="RW" width="4" name="WLRF_ANA_MIMO_RX_DIVERSITY_MASK_I1" comment="This masks the output of the Rx timer before the AGC has found STF sync (prior to RF_LOCK_REQUESTED state). It is intended to be used as part of the new S621+ MIMO Rx diversity feature, whereby we keep some of the WIFI1 path Rx enables disabled until we find STF sync in order to reduce WIFI1 Rx current. This register should be set to all 1s by default, and is only expected to be used on WIFI1 path in MIMO scenarios."/>
    <register addr="0000a15c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[0]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a160" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[1]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a164" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[2]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a168" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[3]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a16c" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[4]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a170" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[5]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a174" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[6]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a178" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_TX_SLOT_ENABLES_I1[7]" comment="These registers set the radio enables for the transmit timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a17c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[0]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a180" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[1]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a184" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[2]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a188" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[3]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a18c" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[4]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a190" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[5]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a194" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[6]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a198" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_TX_SLOT_DELAYS_I1[7]" comment="These registers set the delays for the transmit timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a19c" rw_flags="RW" width="2" name="WLRF_ANA_TIMER_TX_SLOT_ON_OFF_LAST_I1" comment="This register sets the start and end of Tx turn on and off ramps, and the slot jumped to in the case of a Tx abort"/>
    <register addr="0000a1a0" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[0]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1a4" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[1]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1a8" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[2]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1ac" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[3]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1b0" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[4]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1b4" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[5]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1b8" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[6]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1bc" rw_flags="RW" width="4" name="WLRF_ANA_TIMER_RX_SLOT_ENABLES_I1[7]" comment="These registers set the radio enables for the receive timer slots according to WL_ANA_TIMER_ENABLES."/>
    <register addr="0000a1c0" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[0]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1c4" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[1]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1c8" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[2]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1cc" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[3]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1d0" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[4]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1d4" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[5]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1d8" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[6]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1dc" rw_flags="RW" width="1" name="WLRF_ANA_TIMER_RX_SLOT_DELAYS_I1[7]" comment="These registers set the delays for the receive timer slots in 50ns units. NOTE that if the delay is less than the previous slot, the timer will wrap, allowing delays up to 12.8us to be selected."/>
    <register addr="0000a1e0" rw_flags="RW" width="2" name="WLRF_ANA_TIMER_RX_SLOT_ON_OFF_LAST_I1" comment="This register sets the start and end of Rx turn on and off ramps, and the slot jumped to in the case of an Rx abort"/>
    <register addr="0000a1e4" rw_flags="W" width="1" name="WLRF_INT_CLEAR_I1" comment="Writing this register clears any interrupts whose corresponding bits are set in the write data. Bit allocations are as for WL_RF_INT_MASK"/>
    <register addr="0000a1e8" rw_flags="RW" width="1" name="WLRF_INT_MASK_I1" comment="This register masks events from causing interrupts. Only those interrupts whose mask bit is set will be delivered to the processors"/>
    <register addr="0000a1ec" rw_flags="R" width="1" name="WLRF_INT_STATUS_I1" comment="This register has bits set in it for any interrupt that is currently active. In addition 'raw' bits are set for any active interrupt, whether it is masked or not"/>
    <register addr="0000a1f0" rw_flags="RW" width="1" name="WLRF_ANAIF_DEBUG_SEL_I1" comment="WLAN RFIC AnaIf debug select."/>
    <register addr="0000a1f4" rw_flags="RW" width="1" name="WLRF_ANAIF_RSSI_CTRL_I1" comment="WLAN RFIC register to control how the analogue RSSI blocks (ABB/IB) are enabled and how the clock is requested."/>
    <register addr="0000a1f8" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_CONFIG_I1" comment="DCOC controller config"/>
    <register addr="0000a1fc" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_CONFIG2_I1" comment="DCOC controller config"/>
    <register addr="0000a200" rw_flags="R" width="2" name="WLRF_DCOC_CTRL_STATUS_I1" comment="DCOC controller status."/>
    <register addr="0000a204" rw_flags="RW" width="1" name="WLRF_DCOC_CTRL_LUT_SELECT_I1" comment="Choose the LUT to access, either read or write"/>
    <register addr="0000a208" rw_flags="RW" width="4" name="WLRF_DCOC_CTRL_LUT_WRITE_I1" comment="Write the specified value to the LUTs. 12 LSBs and 12 MSBs are used for I and Q respectively."/>
    <register addr="0000a20c" rw_flags="R" width="4" name="WLRF_DCOC_CTRL_LUT_READ_I1" comment="Read the contents of the LUTs. 12 LSBs and 12 MSBs are used for I and Q respectively."/>
    <register addr="0000a210" rw_flags="RW" width="4" name="WLRF_ANA_AIQ_CFG_I1" comment="Configure AIQ interface"/>
    <register addr="0000a214" rw_flags="R" width="1" name="WLRF_ANA_AIQ_STATUS_I1" comment="Status of AIQ interface."/>
    <register addr="0000a218" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][0]" comment="Rx FE LUT controls."/>
    <register addr="0000a21c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][1]" comment="Rx FE LUT controls."/>
    <register addr="0000a220" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][2]" comment="Rx FE LUT controls."/>
    <register addr="0000a224" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][3]" comment="Rx FE LUT controls."/>
    <register addr="0000a228" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][4]" comment="Rx FE LUT controls."/>
    <register addr="0000a22c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][5]" comment="Rx FE LUT controls."/>
    <register addr="0000a230" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][6]" comment="Rx FE LUT controls."/>
    <register addr="0000a234" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][7]" comment="Rx FE LUT controls."/>
    <register addr="0000a238" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[0][8]" comment="Rx FE LUT controls."/>
    <register addr="0000a23c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][0]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a240" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][1]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a244" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][2]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a248" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][3]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a24c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][4]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a250" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][5]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a254" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][6]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a258" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][7]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a25c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[0][8]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a260" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][0]" comment="Rx FE LUT controls."/>
    <register addr="0000a264" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][1]" comment="Rx FE LUT controls."/>
    <register addr="0000a268" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][2]" comment="Rx FE LUT controls."/>
    <register addr="0000a26c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][3]" comment="Rx FE LUT controls."/>
    <register addr="0000a270" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][4]" comment="Rx FE LUT controls."/>
    <register addr="0000a274" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][5]" comment="Rx FE LUT controls."/>
    <register addr="0000a278" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][6]" comment="Rx FE LUT controls."/>
    <register addr="0000a27c" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][7]" comment="Rx FE LUT controls."/>
    <register addr="0000a280" rw_flags="RW" width="4" name="WL_ANA_FE_LUT_I1[1][8]" comment="Rx FE LUT controls."/>
    <register addr="0000a284" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][0]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a288" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][1]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a28c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][2]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a290" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][3]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a294" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][4]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a298" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][5]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a29c" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][6]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a2a0" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][7]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a2a4" rw_flags="RW" width="1" name="WL_ANA_FE_LUT2_I1[1][8]" comment="Second set of Rx FE LUT controls (WL_ANA_FE_LUT overflows 32-bit register)."/>
    <register addr="0000a2a8" rw_flags="R" width="4" name="WLRF_ANA_ENABLES_STATUS_I1" comment="This register contains the current values of the Analogue Enables, after all masking and multiplexing."/>
    <register addr="0000a2ac" rw_flags="R" width="2" name="WLRF_ANA_RAW_IB_RSSI_STATUS_I1" comment="Raw IB RSSI from analogue."/>
    <register addr="0000a2b0" rw_flags="R" width="2" name="WLRF_ANA_RAW_ABB_RSSI_STATUS_I1" comment="Raw ABB RSSI from analogue."/>
    <register addr="0000a2b4" rw_flags="RW" width="1" name="WL_ANA_LO_PLL_START_I1" comment="This register written to start the PLL running"/>
    <register addr="0000a2b8" rw_flags="RW" width="1" name="WL_ANA_LO_PLL_STOP_I1" comment="This register written to stop the PLL from running"/>
    <register addr="0000a2bc" rw_flags="R" width="1" name="WL_ANA_LO_CTRL_STATE_I1" comment="The state of the RFIC_DGT_LO_CTRL block, which controls the SAPLL start/stop."/>
    <register addr="0000a2c0" rw_flags="RW" width="4" name="WL_DGT_LO_D_FREQ1_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2c4" rw_flags="RW" width="1" name="WL_DGT_LO_D_FREQ2_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2c8" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF1_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2cc" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF2_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2d0" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF3_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2d4" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF4_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2d8" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF5_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2dc" rw_flags="RW" width="4" name="WL_DGT_LO_PLL_CONF6_I1" comment="WLAN LO/SAPLL configuration register."/>
    <register addr="0000a2e0" rw_flags="R" width="4" name="WL_DGT_LO_PLL_TEST_OUT_I1" comment="Read-only register for test"/>
    <register addr="0000a2e4" rw_flags="R" width="1" name="WLRF_ANA_STATUS_I1" comment="Returns the value on the ANA_STATUS bus"/>
    <register addr="0000a2e8" rw_flags="RW" width="2" name="WL_ANA_MISC_I1" comment="Misc. enables."/>
    <register addr="0000a2ec" rw_flags="RW" width="2" name="WL_ANA_BIAS_EN_I1" comment="Key bias enables."/>
    <register addr="0000a2f0" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG_I1" comment="This register controls Rx baseband"/>
    <register addr="0000a2f4" rw_flags="RW" width="2" name="WL_ANA_ABB_RX_CONFIG2_I1" comment="This register controls Rx baseband"/>
    <register addr="0000a2f8" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG3_I1" comment="This register controls Rx baseband"/>
    <register addr="0000a2fc" rw_flags="RW" width="4" name="WL_ANA_ABB_RX_CONFIG4_I1" comment="This register controls Rx baseband"/>
    <register addr="0000a300" rw_flags="RW" width="2" name="WL_ANA_ABB_RX_CONFIG5_I1" comment="This register controls Rx baseband"/>
    <register addr="0000a304" rw_flags="RW" width="4" name="WL_ANA_ABB_TX_CONFIG_I1" comment="This register controls Tx baseband"/>
    <register addr="0000a308" rw_flags="RW" width="2" name="WL_ANA_PERIPH_PATH_CONFIG_I1" comment="This register controls Tx baseband"/>
    <register addr="0000a30c" rw_flags="RW" width="1" name="WL_ANA_TX_2G_STATIC_ENABLES_I1" comment="This register contains 2G Tx RF-related static enables."/>
    <register addr="0000a310" rw_flags="RW" width="1" name="WL_ANA_TX_5G_STATIC_ENABLES_I1" comment="This register contains 2G Tx RF-related static enables."/>
    <register addr="0000a314" rw_flags="RW" width="1" name="WL_ANA_RX_2G_LNA_CONFIG_I1" comment="This register contains static controls for the Rx 2G LNA."/>
    <register addr="0000a318" rw_flags="RW" width="2" name="WL_ANA_RX_5G_LNA_CONFIG_I1" comment="This register contains static controls for the Rx 5G LNA."/>
    <register addr="0000a31c" rw_flags="RW" width="4" name="WL_ANA_RX_MIX_CONFIG_I1" comment="This registers contains static controls common to all Rx Mixers."/>
    <register addr="0000a320" rw_flags="RW" width="2" name="WL_ANA_TX_ADB_CONFIG_I1" comment="This register contains static controls common to all Tx ADB."/>
    <register addr="0000a324" rw_flags="RW" width="2" name="WL_ANA_TX_DECT_CONFIG_I1" comment="This register contains static controls common to all Tx DECT."/>
    <register addr="0000a328" rw_flags="RW" width="4" name="WL_ANA_TX_DPD_CONFIG_I1" comment="This register contains static controls common to all Tx DPD."/>
    <register addr="0000a32c" rw_flags="RW" width="2" name="WL_ANA_TX_DRV_CONFIG_I1" comment="This register contains static controls common to all Tx Drivers."/>
    <register addr="0000a330" rw_flags="RW" width="4" name="WL_ANA_TX_MIX_CONFIG_I1" comment="This register contains static controls common to all Tx Mixers."/>
    <register addr="0000a334" rw_flags="RW" width="1" name="WL_ANA_TX_PPA_CONFIG_I1" comment="This register contains static controls common to all Tx PPAs."/>
    <register addr="0000a338" rw_flags="RW" width="2" name="WL_ANA_TX_PA_CONFIG_I1" comment="This register contains static controls common to all Tx PAs."/>
    <register addr="0000a33c" rw_flags="RW" width="1" name="WL_ANA_ABB_RX_SPARES_I1" comment="WL_ANA_ABB_RX_SPARES"/>
    <register addr="0000a340" rw_flags="RW" width="1" name="WL_ANA_ABB_TX_SPARES_I1" comment="WL_ANA_ABB_TX_SPARES"/>
    <register addr="0000a344" rw_flags="RW" width="1" name="WL_ANA_PERIPH_SPARES_I1" comment="WL_ANA_PERIPH_SPARES"/>
    <register addr="0000a348" rw_flags="RW" width="1" name="WL_ANA_RX_RF_SPARES_I1" comment="Reserved"/>
    <register addr="0000a34c" rw_flags="RW" width="1" name="WL_ANA_TX_2G_SPARES_I1" comment="TODO S621P"/>
    <register addr="0000a350" rw_flags="RW" width="1" name="WL_ANA_TX_5G_SPARES_I1" comment="TODO S621P"/>
    <register addr="0000a354" rw_flags="RW" width="4" name="WL_ANA_LO_DTC_CONF_I1" comment="Okay"/>
    <register addr="0000a358" rw_flags="RW" width="4" name="WL_ANA_LO_FBDIV_CONF_I1" comment="Okay"/>
    <register addr="0000a35c" rw_flags="RW" width="4" name="WL_ANA_LO_FLL_CONF_I1" comment="[27:26]WL_ANA_LO_FLL_DLY_CTRL: [1:0] controls delay inserted in CKDTC path 0, 50ps, 100ps, 150ps.&amp;lt;br&amp;gt;[25:24]WL_ANA_LO_FLL_DLY_CTRL: [1:0] controls delay inserted in CKFB path 0, 50ps, 100ps, 150ps.&amp;lt;br&amp;gt;[23:21]WL_ANA_LO_FLL_ICP: [2]: no connected inside FLL. Used to control CP current 2'b00: 0uA, 2'b01: 125uA 2'b10: 250uA 2'b11: same as 2'b10. "/>
    <register addr="0000a360" rw_flags="RW" width="4" name="WL_ANA_LO_LO_PU_I1" comment="[0]WL_ANA_LO_NMOSSF_REG_VCO_PU: Power up NMOSSF_REG_VCO"/>
    <register addr="0000a364" rw_flags="RW" width="4" name="WL_ANA_LO_LOGEN1_I1" comment="Okay"/>
    <register addr="0000a368" rw_flags="RW" width="4" name="WL_ANA_LOGEN2_I1" comment="Okay"/>
    <register addr="0000a36c" rw_flags="RW" width="4" name="WL_ANA_LO_LOGEN3_I1" comment="Okay"/>
    <register addr="0000a370" rw_flags="RW" width="4" name="WL_ANA_LO_PLL_RESV_I1" comment="Okay"/>
    <register addr="0000a374" rw_flags="RW" width="4" name="WL_ANA_LO_REF_BIAS1_I1" comment="[2:0]WL_ANA_LO_REF_BIAS_VREF075_GLB_SEL: VREF0P75 used for the opamp VREF in GLB. 000: 0.65V,min, 011: 0.75V, 111: 0.9.V, max"/>
    <register addr="0000a378" rw_flags="RW" width="4" name="WL_ANA_LO_REF_BIAS2_I1" comment="Almost full change"/>
    <register addr="0000a37c" rw_flags="RW" width="4" name="WL_ANA_LO_SFREG_CONF_I1" comment="Okay"/>
    <register addr="0000a380" rw_flags="RW" width="4" name="WL_ANA_LO_SPD_CONF1_I1" comment="Okay"/>
    <register addr="0000a384" rw_flags="RW" width="4" name="WL_ANA_LO_SPD_CONF2_I1" comment="Okay"/>
    <register addr="0000a388" rw_flags="RW" width="4" name="WL_ANA_LO_SPD_CONF3_I1" comment="[11:9]WL_ANA_LO_TOP_DCTP_SEL: DCTP selection in LO TOP&amp;lt;br&amp;gt;[8:7]WL_ANA_LO_TEST_SEL_TP_CK: Selection bits of CK TEST MUX. 00 : ''0'',  01 : CLK_1X,  10: LOCK_PD_CP,  11: LOCK&amp;lt;br&amp;gt;[6:0]WL_ANA_LO_SPD_SPARE2: Unused"/>
    <register addr="0000a38c" rw_flags="RW" width="4" name="WL_ANA_LO_VCO_CONF1_I1" comment="Okay"/>
    <register addr="0000a390" rw_flags="RW" width="4" name="WL_ANA_LO_VCO_CONF2_I1" comment="[25:22]WL_ANA_LO_VCO_BUF01_ICTRL: Unused in WL1_LO.&amp;lt;br&amp;gt;[6:4]WL_ANA_LO_VCO_TAIL_TUNE&amp;lt;br&amp;gt;[3:0]WL_ANA_LO_VCO_SPARE1: Unused."/>
  </block>
  <block name="zippy_rf" comment="ZIPPY RF control and status registers">
    <register addr="0000b000" rw_flags="RW" width="4" name="ZIPPY_RF_TRANSPORT" comment="ZIPPY transport configuration."/>
    <register addr="0000b004" rw_flags="RW" width="1" name="ZIPPY_RF_PRIORITY_INC_RATE" comment="Configure the rate at which priority increases for unserviced channels. "/>
    <register addr="0000b008" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS0_CFG" comment="Configure flags0 interface"/>
    <register addr="0000b00c" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS1_CFG" comment="Configure flags1 interface"/>
    <register addr="0000b010" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS2_CFG" comment="Configure flags2 interface"/>
    <register addr="0000b014" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS3_CFG" comment="Configure flags3 interface"/>
    <register addr="0000b018" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS4_CFG" comment="Configure flags4 interface"/>
    <register addr="0000b01c" rw_flags="RW" width="2" name="ZIPPY_RF_FLAGS5_CFG" comment="Configure flags5 interface"/>
    <register addr="0000b020" rw_flags="RW" width="4" name="ZIPPY_RF_DATA_CFG" comment="Configure register access options"/>
    <register addr="0000b024" rw_flags="RW" width="1" name="ZIPPY_RF_INT_EN" comment="Enable interrupt sources."/>
    <register addr="0000b028" rw_flags="R" width="1" name="ZIPPY_RF_INT_STATUS" comment="Status of interrupt sources."/>
    <register addr="0000b02c" rw_flags="W" width="1" name="ZIPPY_RF_INT_CLEAR" comment="Clear interrupt Sources by writing a 1 to the register bit."/>
    <register addr="0000b030" rw_flags="R" width="2" name="ZIPPY_RF_DATA_COUNTS" comment="Local RF counters for data from BB to RF and RF to BB. To be compared with equivalent ones in the BB"/>
    <register addr="0000b034" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[0]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b038" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[1]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b03c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[2]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b040" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[3]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b044" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[4]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b048" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[5]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b04c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[6]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b050" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[7]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b054" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[8]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b058" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[9]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b05c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[10]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b060" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[11]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b064" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[12]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b068" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[13]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b06c" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[14]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
    <register addr="0000b070" rw_flags="RW" width="2" name="ZIPPY_RF_BURST_SCATTER[15]" comment="Array providing 16 address used to scatter a burst write. If BURST_SCATTER_EN bit is clear, the array can be loaded with target addresses(shifted down by 2). If BURST_SCATTER_EN bit is set, burst writes to the register array are scattered to the addresses stored in the array"/>
  </block>
</subsystem>
